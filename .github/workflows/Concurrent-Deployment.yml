# Deploy to Staging

name: Concurrent-Deployment
run-name: Deployment-${{ github.event.inputs.environment }}

# setting concurrency at workflow level
concurrency: ${{ github.event.inputs.environment }}

# trigger event
on: 
 workflow_dispatch:
  inputs:
      environment:
       description: 'Environment'
       type: environment
       required: true

      
env:
  # Setting an environment variable with the value of approvers
  prod_approvers: ${{ vars.PRODUCTION_APPROVERS }}
  staging_approvers: ${{ vars.STAGING_APPROVERS }}
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: asia-south1-a
  SERVICE_NAME: zicops-user-manager
  

# Deploy  jobs

jobs:
#Initialize variables based on trigger branch (staging or main)
  initialize:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
     BRANCH: test
    outputs:
      GKE_CLUSTER: ${{ steps.setvars_gke.outputs.GKE_CLUSTER }}${{ steps.setvars_gke_staging.outputs.GKE_CLUSTER }}
      NAMESPACE: ${{ steps.setvars_namespace.outputs.NAMESPACE }}${{ steps.setvars_namespace_staging.outputs.NAMESPACE }}
      APPROVERS: ${{ steps.setvars_appr.outputs.appr }}${{ steps.setvars_appr_staging.outputs.appr }}
      run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}${{ steps.set_output1.outputs.run_jobs }}
      
    steps:
     - name: Initializing variables
       run: echo "Initializing variables..."
       
     - name: Extract Branch Name
       run: |
        echo "Approvers      $prod_approvers  $staging_approvers"
        echo "BRANCH= ${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo ${{env.BRANCH}}
       
      
       

     - name: Set variables_production
       if: ${{github.ref == 'refs/heads/main'}}   
       id: setvars_gke
       run: echo "GKE_CLUSTER=zicops-dot-com-1" >> $GITHUB_OUTPUT
       
     - name: Set variables_production
       if: ${{github.ref == 'refs/heads/main'}}   
       id: setvars_namespace
       run: echo "NAMESPACE = production" >> $GITHUB_OUTPUT
       
     - name: Set variables_production
       if: ${{github.ref == 'refs/heads/main'}}   
       id: setvars_appr
       run: echo "appr = ${{env.prod_approvers}}" >> $GITHUB_OUTPUT
   
        
     - name: Set variables_staging
       if: ${{github.ref == 'refs/heads/staging'}}  
       id: setvars_gke_staging
       run: echo "GKE_CLUSTER=zicops-production-cost-one" >> $GITHUB_OUTPUT
       
       
     - name: Set variables_staging
       if: ${{github.ref == 'refs/heads/staging'}}  
       id: setvars_namespace_staging
       run: echo "NAMESPACE = staging" >> $GITHUB_OUTPUT
       
     - name: Set variables_staging
       if: ${{github.ref == 'refs/heads/staging'}}  
       id: setvars_appr_staging
       run: echo "appr = ${{env.staging_approvers}}" >> $GITHUB_OUTPUT
        
     - name: Check if branch is either staging or main
       id: set_output
       if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' }}
       run: echo "run_jobs=true" >> $GITHUB_OUTPUT
         
     - name: Check if branch is other than stagingor main 
       id: set_output_1
       if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/staging' }}
       run: echo "run_jobs=false" >> $GITHUB_OUTPUT

# Get Approvals for Deployment
  Approvals:
    runs-on: ubuntu-latest
    needs: initialize
    if: ${{ needs.initialize.outputs.run_rest_jobs == 'true'}}
    steps:
      - name: Code Testing
        run: echo approvers ${{ needs.initialize.outputs.APPROVE_RS }} rest jobs ${{ needs.initialize.outputs.run_rest_jobs }}
         
         
      - name: Get Approvals
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ needs.initialize.outputs.APPROVE_RS }}
          minimum-approvals: 1
          issue-title: "Deploying to ${{ github.event.inputs.environment }}"
          exclude-workflow-initiator-as-approver: false
          

      
 # call-staging-deployment-workflow:
 #  needs: [Deployment]
 #  uses: Zicops/zicops-user-manager/.github/workflows/Reusable-zicops-cicd-um.yml@${GITHUB_REF##*/}
