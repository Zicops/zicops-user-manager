scalar Upload

type User {
  id: ID
  first_name: String!
  last_name: String!
  status: String!
  role: String!
  is_verified: Boolean!
  is_active: Boolean!
  gender: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
  email: String!
  phone: String!
  photo_url: String
}

input UserInput {
  id: ID
  first_name: String!
  last_name: String!
  status: String!
  role: String!
  is_verified: Boolean!
  is_active: Boolean!
  gender: String!
  created_by: String
  updated_by: String
  email: String!
  phone: String!
  Photo: Upload
  photo_url: String
}

input UserLspMapInput {
  user_lsp_id: ID
  user_id: String!
  lsp_id: String!
  status: String!
  created_by: String
  updated_by: String
}

type UserLspMap {
  user_lsp_id: ID
  user_id: String!
  lsp_id: String!
  status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserOrganizationMapInput {
  user_organization_id: ID
  user_id: String!
  user_lsp_id: String!
  organization_id: String!
  organization_role: String!
  is_active: Boolean!
  employee_id: String!
  created_by: String
  updated_by: String
}

type UserOrganizationMap {
  user_organization_id: ID
  user_id: String!
  user_lsp_id: String!
  organization_id: String!
  organization_role: String!
  is_active: Boolean!
  employee_id: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserLanguageMapInput {
  user_id: String!
  user_lsp_id: String!
  language: String!
  is_base_language: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserLanguageMap {
  user_language_id: ID
  user_id: String!
  user_lsp_id: String!
  language: String!
  is_base_language: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserPreferenceInput {
  user_preference_id: ID
  user_id: String!
  user_lsp_id: String!
  sub_category: String!
  is_base: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserPreference {
  user_preference_id: ID
  user_id: String!
  user_lsp_id: String!
  sub_category: String!
  is_base: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserRoleInput {
  user_role_id: ID
  user_id: String!
  user_lsp_id: String!
  role: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserRole {
  user_role_id: ID
  user_id: String!
  user_lsp_id: String!
  role: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCohortInput {
  user_cohort_id: ID
  user_id: String!
  user_lsp_id: String!
  cohort_id: String!
  added_by: String!
  membership_status: String!
  role: String!
  created_by: String
  updated_by: String
}

type UserCohort {
  user_cohort_id: ID
  user_id: String!
  user_lsp_id: String!
  cohort_id: String!
  added_by: String!
  membership_status: String!
  role: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCourseInput {
  user_course_id: ID
  user_id: String!
  lsp_id: String
  user_lsp_id: String!
  course_id: String!
  course_type: String!
  added_by: String!
  is_mandatory: Boolean!
  end_date: String
  course_status: String!
  created_by: String
  updated_by: String
}

type UserCourse {
  user_course_id: ID
  user_id: String!
  lsp_id: String
  user_lsp_id: String!
  course_id: String!
  course_type: String!
  added_by: String!
  is_mandatory: Boolean!
  end_date: String
  course_status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCourseProgressInput {
  user_cp_id: ID
  user_id: String!
  user_course_id: String!
  topic_id: String!
  topic_type: String!
  status: String!
  video_progress: String!
  time_stamp: String!
  created_by: String
  updated_by: String
}

type UserCourseProgress {
  user_cp_id: ID
  user_id: String!
  user_course_id: String!
  topic_id: String!
  topic_type: String!
  status: String!
  video_progress: String!
  time_stamp: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserQuizAttemptInput {
  user_qa_id: ID
  user_id: String!
  user_cp_id: String!
  user_course_id: String!
  quiz_id: String!
  quiz_attempt: Int!
  topic_id: String!
  result: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserQuizAttempt {
  user_qa_id: ID
  user_id: String!
  user_cp_id: String!
  user_course_id: String!
  quiz_id: String!
  quiz_attempt: Int!
  topic_id: String!
  result: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserBookmarkInput {
  user_bm_id: ID
  user_id: String!
  user_lsp_id: String!
  user_course_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  name: String!
  time_stamp: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserBookmark {
  user_bm_id: ID
  user_id: String!
  user_lsp_id: String!
  user_course_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  name: String!
  time_stamp: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserNotesInput {
  user_notes_id: ID
  user_id: String!
  user_lsp_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  sequence: Int!
  status: String!
  details: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserNotes {
  user_notes_id: ID
  user_id: String!
  user_lsp_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  sequence: Int!
  status: String!
  details: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamAttemptsInput {
  user_ea_id: ID
  user_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  user_course_id: String!
  exam_id: String!
  attempt_no: Int!
  attempt_status: String!
  attempt_start_time: String!
  attempt_duration: String!
  created_by: String
  updated_by: String
}

type UserExamAttempts {
  user_ea_id: ID
  user_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  user_course_id: String!
  exam_id: String!
  attempt_no: Int!
  attempt_status: String!
  attempt_start_time: String!
  attempt_duration: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamProgressInput {
  user_ep_id: ID
  user_id: String!
  user_ea_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  sr_no: Int!
  question_id: String!
  question_type: String!
  answer: String!
  q_attempt_status: String!
  total_time_spent: String!
  correct_answer: String!
  section_id: String!
  created_by: String
  updated_by: String
}

type UserExamProgress {
  user_ep_id: ID
  user_id: String!
  user_ea_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  sr_no: Int!
  question_id: String!
  question_type: String!
  answer: String!
  q_attempt_status: String!
  total_time_spent: String!
  correct_answer: String!
  section_id: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamResultInput {
  user_er_id: ID
  user_id: String!
  user_ea_id: String!
  user_score: Int!
  correct_answers: Int!
  wrong_answers: Int!
  result_status: String!
  created_by: String
  updated_by: String
}

type UserExamResult {
  user_er_id: ID
  user_id: String!
  user_ea_id: String!
  user_score: Int!
  correct_answers: Int!
  wrong_answers: Int!
  result_status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

type PaginatedUsers {
  users: [User]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedCourseMaps {
  user_courses: [UserCourse]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedNotes {
  notes: [UserNotes]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedBookmarks {
  bookmarks: [UserBookmark]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedCohorts {
  cohorts: [UserCohort]
  pageCursor: String
  direction: String
  pageSize: Int
}

input CohortMainInput {
  cohort_id: ID
  name: String!
  description: String!
  lsp_id: String!
  code: String!
  status: String!
  type: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  size: Int!
  image: Upload
  imageUrl: String
}

type CohortMain {
  cohort_id: ID
  name: String!
  description: String!
  lsp_id: String!
  code: String!
  status: String!
  type: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
  size: Int!
  imageUrl: String
}

type PaginatedCohortsMain {
  cohorts: [CohortMain]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedUserLspMaps {
  user_lsp_maps: [UserLspMap]
  pageCursor: String
  direction: String
  pageSize: Int
}

input OrganizationInput {
  org_id: ID
  name: String!
  logo_url: String
  industry: String!
  type: String!
  subdomain: String!
  employee_count: Int!
  website: String!
  linkedin_url: String
  facebook_url: String
  twitter_url: String
  status: String!
  logo: Upload
}

type Organization {
  org_id: ID
  name: String!
  logo_url: String
  industry: String!
  type: String!
  subdomain: String!
  employee_count: Int!
  website: String!
  linkedin_url: String
  facebook_url: String
  twitter_url: String
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input OrganizationUnitInput {
  ou_id: ID
  org_id: String!
  emp_count: Int!
  address: String!
  city: String!
  state: String!
  country: String!
  postal_code: String!
  status: String!
  created_by: String
  updated_by: String
}

type OrganizationUnit {
  ou_id: ID
  org_id: String!
  emp_count: Int!
  address: String!
  city: String!
  state: String!
  country: String!
  postal_code: String!
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input LearningSpaceInput {
  lsp_id: ID
  org_id: String!
  ou_id: String!
  name: String!
  logo_url: String
  logo: Upload
  profile_url: String
  profile: Upload
  no_users: Int!
  owners: [String]
  is_default: Boolean!
  status: String!
  created_by: String
  updated_by: String
}

type LearningSpace {
  lsp_id: ID
  org_id: String!
  ou_id: String!
  name: String!
  logo_url: String
  profile_url: String
  no_users: Int!
  owners: [String]
  is_default: Boolean!
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input UserExamResultDetails {
  user_id: String!
  user_ea_id: String!
}

type UserExamResultInfo {
  user_id: String!
  user_ea_id: String!
  results: [UserExamResult]
}

input UserFilters {
  email: String
  nameSearch: String
  role: String
  status: String
}

input CourseMapFilters {
  lsp_id: [String]
  is_mandatory: Boolean
  status: String
  type: String
}

type Count {
  name: String!
  count: Int!
}

input UserCourseMapStatsInput {
  lsp_id: String
  user_id: String
  course_type: [String]
  course_status: [String]
  is_mandatory: Boolean
}

type UserCourseMapStats {
  lsp_id: String
  user_id: String
  type_stats: [Count]
  status_stats: [Count]
}

type CourseConsumptionStats {
  ID: String
  LspId: String
  CourseId: String
  Category: String
  SubCategory: String
  Owner: String
  Duration: Int
  TotalLearners: Int
  ActiveLearners: Int
  CompletedLearners: Int
  ExpectedCompletionTime: Int
  AverageCompletionTime: Int
  AverageComplianceScore: Int
  CreatedAt: Int
  UpdatedAt: Int
  CreatedBy: String
  UpdatedBy: String
}

type PaginatedCCStats {
  stats: [CourseConsumptionStats]
  pageCursor: String
  direction: String
  pageSize: Int
}

type CourseViews {
  seconds: Int
  created_at: String
  lsp_id: String
  user_ids: [String]
  date_string: String
}

type Query {
  logout: Boolean
  getUserLspMapsByLspId(
    lsp_id: String!
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedUserLspMaps
  getUsersForAdmin(
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    filters: UserFilters
  ): PaginatedUsers
  getUserDetails(user_ids: [String]): [User]
  getUserOrganizations(user_id: String!): [UserOrganizationMap]
  getUserOrgDetails(user_id: String!, user_lsp_id: String!): UserOrganizationMap
  getUserPreferences(user_id: String!): [UserPreference]
  getUserPreferenceForLsp(
    user_id: String!
    user_lsp_id: String!
  ): UserPreference
  getUserLsps(user_id: String!): [UserLspMap]
  getUserLspByLspId(user_id: String!, lsp_id: String!): UserLspMap
  getUserCourseMaps(
    user_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    filters: CourseMapFilters
  ): PaginatedCourseMaps
  getUserCourseMapStats(input: UserCourseMapStatsInput!): UserCourseMapStats
  getUserCourseMapByCourseID(
    user_id: String!
    course_id: String!
    lsp_id: String
  ): [UserCourse]
  getUserCourseProgressByMapId(
    user_id: String!
    user_course_id: [ID!]
  ): [UserCourseProgress]
  getUserCourseProgressByTopicId(
    user_id: String!
    topic_id: ID!
  ): [UserCourseProgress]
  getUserNotes(
    user_id: String!
    user_lsp_id: String
    course_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedNotes
  getUserBookmarks(
    user_id: String!
    user_lsp_id: String
    course_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedBookmarks
  getUserExamAttempts(user_id: String, exam_id: String!): [UserExamAttempts]
  getUserExamResults(
    user_ea_details: [UserExamResultDetails!]!
  ): [UserExamResultInfo]
  getUserExamProgress(user_id: String!, user_ea_id: String!): [UserExamProgress]
  getLatestCohorts(
    user_id: String
    user_lsp_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCohorts
  getCohortUsers(
    cohort_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCohorts
  getUserQuizAttempts(user_id: String!, topic_id: String!): [UserQuizAttempt]
  getCohortDetails(cohort_id: String!): CohortMain
  getCohortMains(
    lsp_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    searchText: String
  ): PaginatedCohortsMain
  getOrganizations(org_ids: [String]): [Organization]
  getOrganizationsByName(
    name: String
    prevPageSnapShot: String!
    pageSize: Int!
  ): [Organization]
  getOrganizationUnits(ou_ids: [String]): [OrganizationUnit]
  getUnitsByOrgId(org_id: String!): [OrganizationUnit]
  getLearningSpacesByOrgId(org_id: String!): [LearningSpace]
  getLearningSpacesByOuId(ou_id: String!, org_id: String!): [LearningSpace]
  getLearningSpaceDetails(lsp_ids: [String]): [LearningSpace]
  getUserLspRoles(user_id: String!, user_lsp_ids: [String!]!): [UserRole]
  getCourseConsumptionStats(
    lsp_id: String!
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCCStats
  getCourseViews(
    lsp_ids: [String!]!
    start_time: String
    end_time: String
  ): [CourseViews]
}

type Mutation {
  registerUsers(input: [UserInput]!): [User]
  inviteUsers(emails: [String!]!, lsp_id: String): Boolean
  updateUser(input: UserInput!): User
  login: User
  addUserLspMap(input: [UserLspMapInput]!): [UserLspMap]
  updateUserLspMap(input: UserLspMapInput!): UserLspMap
  addUserOrganizationMap(
    input: [UserOrganizationMapInput]!
  ): [UserOrganizationMap]
  updateUserOrganizationMap(
    input: UserOrganizationMapInput!
  ): UserOrganizationMap
  addUserLanguageMap(input: [UserLanguageMapInput]!): [UserLanguageMap]
  addUserPreference(input: [UserPreferenceInput]!): [UserPreference]
  updateUserPreference(input: UserPreferenceInput!): UserPreference
  addUserRoles(input: [UserRoleInput]!): [UserRole]
  updateUserRole(input: UserRoleInput!): UserRole
  addUserCohort(input: [UserCohortInput]!): [UserCohort]
  updateUserCohort(input: UserCohortInput!): UserCohort
  addUserCourse(input: [UserCourseInput]!): [UserCourse]
  updateUserCourse(input: UserCourseInput!): UserCourse
  addUserCourseProgress(input: [UserCourseProgressInput]!): [UserCourseProgress]
  updateUserCourseProgress(input: UserCourseProgressInput!): UserCourseProgress
  addUserQuizAttempt(input: [UserQuizAttemptInput]!): [UserQuizAttempt]
  updateUserQuizAttempt(input: UserQuizAttemptInput!): UserQuizAttempt
  addUserBookmark(input: [UserBookmarkInput]!): [UserBookmark]
  updateUserBookmark(input: UserBookmarkInput!): UserBookmark
  addUserNotes(input: [UserNotesInput]!): [UserNotes]
  updateUserNotes(input: UserNotesInput!): UserNotes
  addUserExamAttempts(input: [UserExamAttemptsInput]!): [UserExamAttempts]
  updateUserExamAttempts(input: UserExamAttemptsInput!): UserExamAttempts
  addUserExamProgress(input: [UserExamProgressInput]!): [UserExamProgress]
  updateUserExamProgress(input: UserExamProgressInput!): UserExamProgress
  addUserExamResult(input: [UserExamResultInput]!): [UserExamResult]
  updateUserExamResult(input: UserExamResultInput!): UserExamResult
  addCohortMain(input: CohortMainInput!): CohortMain
  updateCohortMain(input: CohortMainInput!): CohortMain
  addOrganization(input: OrganizationInput!): Organization
  updateOrganization(input: OrganizationInput!): Organization
  addOrganizationUnit(input: OrganizationUnitInput!): OrganizationUnit
  updateOrganizationUnit(input: OrganizationUnitInput!): OrganizationUnit
  addLearningSpace(input: LearningSpaceInput!): LearningSpace
  updateLearningSpace(input: LearningSpaceInput!): LearningSpace
  deleteCohortImage(cohort_id: String!, filename: String!): String
}
