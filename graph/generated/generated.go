// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/zicops/zicops-user-manager/graph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CohortMain struct {
		Code        func(childComplexity int) int
		CohortID    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ImageURL    func(childComplexity int) int
		IsActive    func(childComplexity int) int
		LspID       func(childComplexity int) int
		Name        func(childComplexity int) int
		Size        func(childComplexity int) int
		Status      func(childComplexity int) int
		Type        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	Count struct {
		Count func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	CourseConsumptionStats struct {
		ActiveLearners         func(childComplexity int) int
		AverageCompletionTime  func(childComplexity int) int
		AverageComplianceScore func(childComplexity int) int
		Category               func(childComplexity int) int
		CompletedLearners      func(childComplexity int) int
		CourseID               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		Duration               func(childComplexity int) int
		ExpectedCompletionTime func(childComplexity int) int
		ID                     func(childComplexity int) int
		LspID                  func(childComplexity int) int
		Owner                  func(childComplexity int) int
		SubCategory            func(childComplexity int) int
		TotalLearners          func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
	}

	CourseViews struct {
		CreatedAt  func(childComplexity int) int
		DateString func(childComplexity int) int
		LspID      func(childComplexity int) int
		Seconds    func(childComplexity int) int
		UserIds    func(childComplexity int) int
	}

	ExperienceVendor struct {
		CompanyName     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		EmployementType func(childComplexity int) int
		EndDate         func(childComplexity int) int
		ExpID           func(childComplexity int) int
		Location        func(childComplexity int) int
		LocationType    func(childComplexity int) int
		PfID            func(childComplexity int) int
		StartDate       func(childComplexity int) int
		Status          func(childComplexity int) int
		Title           func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		VendorID        func(childComplexity int) int
	}

	InviteResponse struct {
		Email   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	LearningSpace struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		IsDefault  func(childComplexity int) int
		LogoURL    func(childComplexity int) int
		LspID      func(childComplexity int) int
		Name       func(childComplexity int) int
		NoUsers    func(childComplexity int) int
		OrgID      func(childComplexity int) int
		OuID       func(childComplexity int) int
		Owners     func(childComplexity int) int
		ProfileURL func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	Mutation struct {
		AddCohortMain             func(childComplexity int, input model.CohortMainInput) int
		AddLearningSpace          func(childComplexity int, input model.LearningSpaceInput) int
		AddOrganization           func(childComplexity int, input model.OrganizationInput) int
		AddOrganizationUnit       func(childComplexity int, input model.OrganizationUnitInput) int
		AddUserBookmark           func(childComplexity int, input []*model.UserBookmarkInput) int
		AddUserCohort             func(childComplexity int, input []*model.UserCohortInput) int
		AddUserCourse             func(childComplexity int, input []*model.UserCourseInput) int
		AddUserCourseProgress     func(childComplexity int, input []*model.UserCourseProgressInput) int
		AddUserExamAttempts       func(childComplexity int, input []*model.UserExamAttemptsInput) int
		AddUserExamProgress       func(childComplexity int, input []*model.UserExamProgressInput) int
		AddUserExamResult         func(childComplexity int, input []*model.UserExamResultInput) int
		AddUserLanguageMap        func(childComplexity int, input []*model.UserLanguageMapInput) int
		AddUserLspMap             func(childComplexity int, input []*model.UserLspMapInput) int
		AddUserNotes              func(childComplexity int, input []*model.UserNotesInput) int
		AddUserOrganizationMap    func(childComplexity int, input []*model.UserOrganizationMapInput) int
		AddUserPreference         func(childComplexity int, input []*model.UserPreferenceInput) int
		AddUserQuizAttempt        func(childComplexity int, input []*model.UserQuizAttemptInput) int
		AddUserRoles              func(childComplexity int, input []*model.UserRoleInput) int
		AddVendor                 func(childComplexity int, input *model.VendorInput) int
		CreateExperienceVendor    func(childComplexity int, input model.ExperienceInput) int
		CreateProfileVendor       func(childComplexity int, input *model.VendorProfile) int
		DeleteCohortImage         func(childComplexity int, cohortID string, filename string) int
		InviteUsers               func(childComplexity int, emails []string, lspID *string) int
		InviteUsersWithRole       func(childComplexity int, emails []string, lspID *string, role *string) int
		Login                     func(childComplexity int) int
		RegisterUsers             func(childComplexity int, input []*model.UserInput) int
		UpdateCohortMain          func(childComplexity int, input model.CohortMainInput) int
		UpdateLearningSpace       func(childComplexity int, input model.LearningSpaceInput) int
		UpdateOrganization        func(childComplexity int, input model.OrganizationInput) int
		UpdateOrganizationUnit    func(childComplexity int, input model.OrganizationUnitInput) int
		UpdateUser                func(childComplexity int, input model.UserInput) int
		UpdateUserBookmark        func(childComplexity int, input model.UserBookmarkInput) int
		UpdateUserCohort          func(childComplexity int, input model.UserCohortInput) int
		UpdateUserCourse          func(childComplexity int, input model.UserCourseInput) int
		UpdateUserCourseProgress  func(childComplexity int, input model.UserCourseProgressInput) int
		UpdateUserExamAttempts    func(childComplexity int, input model.UserExamAttemptsInput) int
		UpdateUserExamProgress    func(childComplexity int, input model.UserExamProgressInput) int
		UpdateUserExamResult      func(childComplexity int, input model.UserExamResultInput) int
		UpdateUserLspMap          func(childComplexity int, input model.UserLspMapInput) int
		UpdateUserNotes           func(childComplexity int, input model.UserNotesInput) int
		UpdateUserOrganizationMap func(childComplexity int, input model.UserOrganizationMapInput) int
		UpdateUserPreference      func(childComplexity int, input model.UserPreferenceInput) int
		UpdateUserQuizAttempt     func(childComplexity int, input model.UserQuizAttemptInput) int
		UpdateUserRole            func(childComplexity int, input model.UserRoleInput) int
		UpdateVendor              func(childComplexity int, input *model.VendorInput) int
		UploadSampleFile          func(childComplexity int, input *model.SampleFile) int
	}

	Organization struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		EmployeeCount func(childComplexity int) int
		FacebookURL   func(childComplexity int) int
		Industry      func(childComplexity int) int
		LinkedinURL   func(childComplexity int) int
		LogoURL       func(childComplexity int) int
		Name          func(childComplexity int) int
		OrgID         func(childComplexity int) int
		Status        func(childComplexity int) int
		Subdomain     func(childComplexity int) int
		TwitterURL    func(childComplexity int) int
		Type          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		Website       func(childComplexity int) int
	}

	OrganizationUnit struct {
		Address    func(childComplexity int) int
		City       func(childComplexity int) int
		Country    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		EmpCount   func(childComplexity int) int
		OrgID      func(childComplexity int) int
		OuID       func(childComplexity int) int
		PostalCode func(childComplexity int) int
		State      func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	PaginatedBookmarks struct {
		Bookmarks  func(childComplexity int) int
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
	}

	PaginatedCCStats struct {
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Stats      func(childComplexity int) int
	}

	PaginatedCohorts struct {
		Cohorts    func(childComplexity int) int
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
	}

	PaginatedCohortsMain struct {
		Cohorts    func(childComplexity int) int
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
	}

	PaginatedCourseMaps struct {
		Direction   func(childComplexity int) int
		PageCursor  func(childComplexity int) int
		PageSize    func(childComplexity int) int
		UserCourses func(childComplexity int) int
	}

	PaginatedNotes struct {
		Direction  func(childComplexity int) int
		Notes      func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
	}

	PaginatedUserLspMaps struct {
		Direction   func(childComplexity int) int
		PageCursor  func(childComplexity int) int
		PageSize    func(childComplexity int) int
		UserLspMaps func(childComplexity int) int
	}

	PaginatedUsers struct {
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Users      func(childComplexity int) int
	}

	PaginatedVendors struct {
		Direction  func(childComplexity int) int
		PageCursor func(childComplexity int) int
		PageSize   func(childComplexity int) int
		Vendors    func(childComplexity int) int
	}

	Query struct {
		GetCohortDetails               func(childComplexity int, cohortID string) int
		GetCohortMains                 func(childComplexity int, lspID string, publishTime *int, pageCursor *string, direction *string, pageSize *int, searchText *string) int
		GetCohortUsers                 func(childComplexity int, cohortID string, publishTime *int, pageCursor *string, direction *string, pageSize *int) int
		GetCourseConsumptionStats      func(childComplexity int, lspID string, pageCursor *string, direction *string, pageSize *int) int
		GetCourseViews                 func(childComplexity int, lspIds []string, startTime *string, endTime *string) int
		GetLatestCohorts               func(childComplexity int, userID *string, userLspID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) int
		GetLearningSpaceDetails        func(childComplexity int, lspIds []*string) int
		GetLearningSpacesByOrgID       func(childComplexity int, orgID string) int
		GetLearningSpacesByOuID        func(childComplexity int, ouID string, orgID string) int
		GetOrganizationUnits           func(childComplexity int, ouIds []*string) int
		GetOrganizations               func(childComplexity int, orgIds []*string) int
		GetOrganizationsByName         func(childComplexity int, name *string, prevPageSnapShot string, pageSize int) int
		GetPaginatedVendors            func(childComplexity int, lspID *string, pageCursor *string, direction *string, pageSize *int) int
		GetUnitsByOrgID                func(childComplexity int, orgID string) int
		GetUserBookmarks               func(childComplexity int, userID string, userLspID *string, courseID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) int
		GetUserCourseMapByCourseID     func(childComplexity int, userID string, courseID string, lspID *string) int
		GetUserCourseMapStats          func(childComplexity int, input model.UserCourseMapStatsInput) int
		GetUserCourseMaps              func(childComplexity int, userID string, publishTime *int, pageCursor *string, direction *string, pageSize *int, filters *model.CourseMapFilters) int
		GetUserCourseProgressByMapID   func(childComplexity int, userID string, userCourseID []string) int
		GetUserCourseProgressByTopicID func(childComplexity int, userID string, topicID string) int
		GetUserDetails                 func(childComplexity int, userIds []*string) int
		GetUserExamAttempts            func(childComplexity int, userID *string, examID string) int
		GetUserExamProgress            func(childComplexity int, userID string, userEaID string) int
		GetUserExamResults             func(childComplexity int, userEaDetails []*model.UserExamResultDetails) int
		GetUserLspByLspID              func(childComplexity int, userID string, lspID string) int
		GetUserLspMapsByLspID          func(childComplexity int, lspID string, pageCursor *string, direction *string, pageSize *int) int
		GetUserLspRoles                func(childComplexity int, userID string, userLspIds []string) int
		GetUserLsps                    func(childComplexity int, userID string) int
		GetUserNotes                   func(childComplexity int, userID string, userLspID *string, courseID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) int
		GetUserOrgDetails              func(childComplexity int, userID string, userLspID string) int
		GetUserOrganizations           func(childComplexity int, userID string) int
		GetUserPreferenceForLsp        func(childComplexity int, userID string, userLspID string) int
		GetUserPreferences             func(childComplexity int, userID string) int
		GetUserQuizAttempts            func(childComplexity int, userID string, topicID string) int
		GetUsersForAdmin               func(childComplexity int, publishTime *int, pageCursor *string, direction *string, pageSize *int, filters *model.UserFilters) int
		GetVendorAdmins                func(childComplexity int, vendorID string) int
		GetVendorDetails               func(childComplexity int, vendorID string) int
		GetVendorExperience            func(childComplexity int, vendorID string, expID string) int
		GetVendors                     func(childComplexity int, lspID *string) int
		Logout                         func(childComplexity int) int
	}

	User struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		Email      func(childComplexity int) int
		FirstName  func(childComplexity int) int
		Gender     func(childComplexity int) int
		ID         func(childComplexity int) int
		IsActive   func(childComplexity int) int
		IsVerified func(childComplexity int) int
		LastName   func(childComplexity int) int
		Phone      func(childComplexity int) int
		PhotoURL   func(childComplexity int) int
		Role       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	UserBookmark struct {
		CourseID     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		IsActive     func(childComplexity int) int
		ModuleID     func(childComplexity int) int
		Name         func(childComplexity int) int
		TimeStamp    func(childComplexity int) int
		TopicID      func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		UserBmID     func(childComplexity int) int
		UserCourseID func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserLspID    func(childComplexity int) int
	}

	UserCohort struct {
		AddedBy          func(childComplexity int) int
		CohortID         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		MembershipStatus func(childComplexity int) int
		Role             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		UserCohortID     func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserLspID        func(childComplexity int) int
	}

	UserCourse struct {
		AddedBy      func(childComplexity int) int
		CourseID     func(childComplexity int) int
		CourseStatus func(childComplexity int) int
		CourseType   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		EndDate      func(childComplexity int) int
		IsMandatory  func(childComplexity int) int
		LspID        func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		UserCourseID func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserLspID    func(childComplexity int) int
	}

	UserCourseMapStats struct {
		LspID       func(childComplexity int) int
		StatusStats func(childComplexity int) int
		TypeStats   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	UserCourseProgress struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		Status        func(childComplexity int) int
		TimeStamp     func(childComplexity int) int
		TopicID       func(childComplexity int) int
		TopicType     func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		UserCourseID  func(childComplexity int) int
		UserCpID      func(childComplexity int) int
		UserID        func(childComplexity int) int
		VideoProgress func(childComplexity int) int
	}

	UserExamAttempts struct {
		AttemptDuration  func(childComplexity int) int
		AttemptNo        func(childComplexity int) int
		AttemptStartTime func(childComplexity int) int
		AttemptStatus    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		ExamID           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		UserCourseID     func(childComplexity int) int
		UserCpID         func(childComplexity int) int
		UserEaID         func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserLspID        func(childComplexity int) int
	}

	UserExamProgress struct {
		Answer         func(childComplexity int) int
		CorrectAnswer  func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		QAttemptStatus func(childComplexity int) int
		QuestionID     func(childComplexity int) int
		QuestionType   func(childComplexity int) int
		SectionID      func(childComplexity int) int
		SrNo           func(childComplexity int) int
		TotalTimeSpent func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		UserCpID       func(childComplexity int) int
		UserEaID       func(childComplexity int) int
		UserEpID       func(childComplexity int) int
		UserID         func(childComplexity int) int
		UserLspID      func(childComplexity int) int
	}

	UserExamResult struct {
		CorrectAnswers func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ResultStatus   func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		UserEaID       func(childComplexity int) int
		UserErID       func(childComplexity int) int
		UserID         func(childComplexity int) int
		UserScore      func(childComplexity int) int
		WrongAnswers   func(childComplexity int) int
	}

	UserExamResultInfo struct {
		Results  func(childComplexity int) int
		UserEaID func(childComplexity int) int
		UserID   func(childComplexity int) int
	}

	UserLanguageMap struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		IsActive       func(childComplexity int) int
		IsBaseLanguage func(childComplexity int) int
		Language       func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
		UserID         func(childComplexity int) int
		UserLanguageID func(childComplexity int) int
		UserLspID      func(childComplexity int) int
	}

	UserLspMap struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		LspID     func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		UserID    func(childComplexity int) int
		UserLspID func(childComplexity int) int
	}

	UserNotes struct {
		CourseID    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Details     func(childComplexity int) int
		IsActive    func(childComplexity int) int
		ModuleID    func(childComplexity int) int
		Sequence    func(childComplexity int) int
		Status      func(childComplexity int) int
		TopicID     func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
		UserID      func(childComplexity int) int
		UserLspID   func(childComplexity int) int
		UserNotesID func(childComplexity int) int
	}

	UserOrganizationMap struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		EmployeeID         func(childComplexity int) int
		IsActive           func(childComplexity int) int
		OrganizationID     func(childComplexity int) int
		OrganizationRole   func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		UserID             func(childComplexity int) int
		UserLspID          func(childComplexity int) int
		UserOrganizationID func(childComplexity int) int
	}

	UserPreference struct {
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		IsActive         func(childComplexity int) int
		IsBase           func(childComplexity int) int
		SubCategory      func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserLspID        func(childComplexity int) int
		UserPreferenceID func(childComplexity int) int
	}

	UserQuizAttempt struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		IsActive     func(childComplexity int) int
		QuizAttempt  func(childComplexity int) int
		QuizID       func(childComplexity int) int
		Result       func(childComplexity int) int
		TopicID      func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		UserCourseID func(childComplexity int) int
		UserCpID     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserQaID     func(childComplexity int) int
	}

	UserRole struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		IsActive   func(childComplexity int) int
		Role       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
		UserID     func(childComplexity int) int
		UserLspID  func(childComplexity int) int
		UserRoleID func(childComplexity int) int
	}

	Vendor struct {
		Address      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Description  func(childComplexity int) int
		FacebookURL  func(childComplexity int) int
		InstagramURL func(childComplexity int) int
		Level        func(childComplexity int) int
		LinkedinURL  func(childComplexity int) int
		Name         func(childComplexity int) int
		PhotoURL     func(childComplexity int) int
		Status       func(childComplexity int) int
		TwitterURL   func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Users        func(childComplexity int) int
		VendorID     func(childComplexity int) int
		Website      func(childComplexity int) int
	}
}

type MutationResolver interface {
	RegisterUsers(ctx context.Context, input []*model.UserInput) ([]*model.User, error)
	InviteUsers(ctx context.Context, emails []string, lspID *string) (*bool, error)
	InviteUsersWithRole(ctx context.Context, emails []string, lspID *string, role *string) ([]*model.InviteResponse, error)
	UpdateUser(ctx context.Context, input model.UserInput) (*model.User, error)
	Login(ctx context.Context) (*model.User, error)
	AddUserLspMap(ctx context.Context, input []*model.UserLspMapInput) ([]*model.UserLspMap, error)
	UpdateUserLspMap(ctx context.Context, input model.UserLspMapInput) (*model.UserLspMap, error)
	AddUserOrganizationMap(ctx context.Context, input []*model.UserOrganizationMapInput) ([]*model.UserOrganizationMap, error)
	UpdateUserOrganizationMap(ctx context.Context, input model.UserOrganizationMapInput) (*model.UserOrganizationMap, error)
	AddUserLanguageMap(ctx context.Context, input []*model.UserLanguageMapInput) ([]*model.UserLanguageMap, error)
	AddUserPreference(ctx context.Context, input []*model.UserPreferenceInput) ([]*model.UserPreference, error)
	UpdateUserPreference(ctx context.Context, input model.UserPreferenceInput) (*model.UserPreference, error)
	AddUserRoles(ctx context.Context, input []*model.UserRoleInput) ([]*model.UserRole, error)
	UpdateUserRole(ctx context.Context, input model.UserRoleInput) (*model.UserRole, error)
	AddUserCohort(ctx context.Context, input []*model.UserCohortInput) ([]*model.UserCohort, error)
	UpdateUserCohort(ctx context.Context, input model.UserCohortInput) (*model.UserCohort, error)
	AddUserCourse(ctx context.Context, input []*model.UserCourseInput) ([]*model.UserCourse, error)
	UpdateUserCourse(ctx context.Context, input model.UserCourseInput) (*model.UserCourse, error)
	AddUserCourseProgress(ctx context.Context, input []*model.UserCourseProgressInput) ([]*model.UserCourseProgress, error)
	UpdateUserCourseProgress(ctx context.Context, input model.UserCourseProgressInput) (*model.UserCourseProgress, error)
	AddUserQuizAttempt(ctx context.Context, input []*model.UserQuizAttemptInput) ([]*model.UserQuizAttempt, error)
	UpdateUserQuizAttempt(ctx context.Context, input model.UserQuizAttemptInput) (*model.UserQuizAttempt, error)
	AddUserBookmark(ctx context.Context, input []*model.UserBookmarkInput) ([]*model.UserBookmark, error)
	UpdateUserBookmark(ctx context.Context, input model.UserBookmarkInput) (*model.UserBookmark, error)
	AddUserNotes(ctx context.Context, input []*model.UserNotesInput) ([]*model.UserNotes, error)
	UpdateUserNotes(ctx context.Context, input model.UserNotesInput) (*model.UserNotes, error)
	AddUserExamAttempts(ctx context.Context, input []*model.UserExamAttemptsInput) ([]*model.UserExamAttempts, error)
	UpdateUserExamAttempts(ctx context.Context, input model.UserExamAttemptsInput) (*model.UserExamAttempts, error)
	AddUserExamProgress(ctx context.Context, input []*model.UserExamProgressInput) ([]*model.UserExamProgress, error)
	UpdateUserExamProgress(ctx context.Context, input model.UserExamProgressInput) (*model.UserExamProgress, error)
	AddUserExamResult(ctx context.Context, input []*model.UserExamResultInput) ([]*model.UserExamResult, error)
	UpdateUserExamResult(ctx context.Context, input model.UserExamResultInput) (*model.UserExamResult, error)
	AddCohortMain(ctx context.Context, input model.CohortMainInput) (*model.CohortMain, error)
	UpdateCohortMain(ctx context.Context, input model.CohortMainInput) (*model.CohortMain, error)
	AddOrganization(ctx context.Context, input model.OrganizationInput) (*model.Organization, error)
	UpdateOrganization(ctx context.Context, input model.OrganizationInput) (*model.Organization, error)
	AddOrganizationUnit(ctx context.Context, input model.OrganizationUnitInput) (*model.OrganizationUnit, error)
	UpdateOrganizationUnit(ctx context.Context, input model.OrganizationUnitInput) (*model.OrganizationUnit, error)
	AddLearningSpace(ctx context.Context, input model.LearningSpaceInput) (*model.LearningSpace, error)
	UpdateLearningSpace(ctx context.Context, input model.LearningSpaceInput) (*model.LearningSpace, error)
	DeleteCohortImage(ctx context.Context, cohortID string, filename string) (*string, error)
	AddVendor(ctx context.Context, input *model.VendorInput) (*model.Vendor, error)
	UpdateVendor(ctx context.Context, input *model.VendorInput) (*model.Vendor, error)
	CreateProfileVendor(ctx context.Context, input *model.VendorProfile) (string, error)
	CreateExperienceVendor(ctx context.Context, input model.ExperienceInput) (string, error)
	UploadSampleFile(ctx context.Context, input *model.SampleFile) (string, error)
}
type QueryResolver interface {
	Logout(ctx context.Context) (*bool, error)
	GetUserLspMapsByLspID(ctx context.Context, lspID string, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedUserLspMaps, error)
	GetUsersForAdmin(ctx context.Context, publishTime *int, pageCursor *string, direction *string, pageSize *int, filters *model.UserFilters) (*model.PaginatedUsers, error)
	GetUserDetails(ctx context.Context, userIds []*string) ([]*model.User, error)
	GetUserOrganizations(ctx context.Context, userID string) ([]*model.UserOrganizationMap, error)
	GetUserOrgDetails(ctx context.Context, userID string, userLspID string) (*model.UserOrganizationMap, error)
	GetUserPreferences(ctx context.Context, userID string) ([]*model.UserPreference, error)
	GetUserPreferenceForLsp(ctx context.Context, userID string, userLspID string) (*model.UserPreference, error)
	GetUserLsps(ctx context.Context, userID string) ([]*model.UserLspMap, error)
	GetUserLspByLspID(ctx context.Context, userID string, lspID string) (*model.UserLspMap, error)
	GetUserCourseMaps(ctx context.Context, userID string, publishTime *int, pageCursor *string, direction *string, pageSize *int, filters *model.CourseMapFilters) (*model.PaginatedCourseMaps, error)
	GetUserCourseMapStats(ctx context.Context, input model.UserCourseMapStatsInput) (*model.UserCourseMapStats, error)
	GetUserCourseMapByCourseID(ctx context.Context, userID string, courseID string, lspID *string) ([]*model.UserCourse, error)
	GetUserCourseProgressByMapID(ctx context.Context, userID string, userCourseID []string) ([]*model.UserCourseProgress, error)
	GetUserCourseProgressByTopicID(ctx context.Context, userID string, topicID string) ([]*model.UserCourseProgress, error)
	GetUserNotes(ctx context.Context, userID string, userLspID *string, courseID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedNotes, error)
	GetUserBookmarks(ctx context.Context, userID string, userLspID *string, courseID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedBookmarks, error)
	GetUserExamAttempts(ctx context.Context, userID *string, examID string) ([]*model.UserExamAttempts, error)
	GetUserExamResults(ctx context.Context, userEaDetails []*model.UserExamResultDetails) ([]*model.UserExamResultInfo, error)
	GetUserExamProgress(ctx context.Context, userID string, userEaID string) ([]*model.UserExamProgress, error)
	GetLatestCohorts(ctx context.Context, userID *string, userLspID *string, publishTime *int, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedCohorts, error)
	GetCohortUsers(ctx context.Context, cohortID string, publishTime *int, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedCohorts, error)
	GetUserQuizAttempts(ctx context.Context, userID string, topicID string) ([]*model.UserQuizAttempt, error)
	GetCohortDetails(ctx context.Context, cohortID string) (*model.CohortMain, error)
	GetCohortMains(ctx context.Context, lspID string, publishTime *int, pageCursor *string, direction *string, pageSize *int, searchText *string) (*model.PaginatedCohortsMain, error)
	GetOrganizations(ctx context.Context, orgIds []*string) ([]*model.Organization, error)
	GetOrganizationsByName(ctx context.Context, name *string, prevPageSnapShot string, pageSize int) ([]*model.Organization, error)
	GetOrganizationUnits(ctx context.Context, ouIds []*string) ([]*model.OrganizationUnit, error)
	GetUnitsByOrgID(ctx context.Context, orgID string) ([]*model.OrganizationUnit, error)
	GetLearningSpacesByOrgID(ctx context.Context, orgID string) ([]*model.LearningSpace, error)
	GetLearningSpacesByOuID(ctx context.Context, ouID string, orgID string) ([]*model.LearningSpace, error)
	GetLearningSpaceDetails(ctx context.Context, lspIds []*string) ([]*model.LearningSpace, error)
	GetUserLspRoles(ctx context.Context, userID string, userLspIds []string) ([]*model.UserRole, error)
	GetCourseConsumptionStats(ctx context.Context, lspID string, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedCCStats, error)
	GetCourseViews(ctx context.Context, lspIds []string, startTime *string, endTime *string) ([]*model.CourseViews, error)
	GetVendorExperience(ctx context.Context, vendorID string, expID string) (*model.ExperienceVendor, error)
	GetVendors(ctx context.Context, lspID *string) ([]*model.Vendor, error)
	GetPaginatedVendors(ctx context.Context, lspID *string, pageCursor *string, direction *string, pageSize *int) (*model.PaginatedVendors, error)
	GetVendorAdmins(ctx context.Context, vendorID string) ([]*model.User, error)
	GetVendorDetails(ctx context.Context, vendorID string) (*model.Vendor, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CohortMain.code":
		if e.complexity.CohortMain.Code == nil {
			break
		}

		return e.complexity.CohortMain.Code(childComplexity), true

	case "CohortMain.cohort_id":
		if e.complexity.CohortMain.CohortID == nil {
			break
		}

		return e.complexity.CohortMain.CohortID(childComplexity), true

	case "CohortMain.created_at":
		if e.complexity.CohortMain.CreatedAt == nil {
			break
		}

		return e.complexity.CohortMain.CreatedAt(childComplexity), true

	case "CohortMain.created_by":
		if e.complexity.CohortMain.CreatedBy == nil {
			break
		}

		return e.complexity.CohortMain.CreatedBy(childComplexity), true

	case "CohortMain.description":
		if e.complexity.CohortMain.Description == nil {
			break
		}

		return e.complexity.CohortMain.Description(childComplexity), true

	case "CohortMain.imageUrl":
		if e.complexity.CohortMain.ImageURL == nil {
			break
		}

		return e.complexity.CohortMain.ImageURL(childComplexity), true

	case "CohortMain.is_active":
		if e.complexity.CohortMain.IsActive == nil {
			break
		}

		return e.complexity.CohortMain.IsActive(childComplexity), true

	case "CohortMain.lsp_id":
		if e.complexity.CohortMain.LspID == nil {
			break
		}

		return e.complexity.CohortMain.LspID(childComplexity), true

	case "CohortMain.name":
		if e.complexity.CohortMain.Name == nil {
			break
		}

		return e.complexity.CohortMain.Name(childComplexity), true

	case "CohortMain.size":
		if e.complexity.CohortMain.Size == nil {
			break
		}

		return e.complexity.CohortMain.Size(childComplexity), true

	case "CohortMain.status":
		if e.complexity.CohortMain.Status == nil {
			break
		}

		return e.complexity.CohortMain.Status(childComplexity), true

	case "CohortMain.type":
		if e.complexity.CohortMain.Type == nil {
			break
		}

		return e.complexity.CohortMain.Type(childComplexity), true

	case "CohortMain.updated_at":
		if e.complexity.CohortMain.UpdatedAt == nil {
			break
		}

		return e.complexity.CohortMain.UpdatedAt(childComplexity), true

	case "CohortMain.updated_by":
		if e.complexity.CohortMain.UpdatedBy == nil {
			break
		}

		return e.complexity.CohortMain.UpdatedBy(childComplexity), true

	case "Count.count":
		if e.complexity.Count.Count == nil {
			break
		}

		return e.complexity.Count.Count(childComplexity), true

	case "Count.name":
		if e.complexity.Count.Name == nil {
			break
		}

		return e.complexity.Count.Name(childComplexity), true

	case "CourseConsumptionStats.ActiveLearners":
		if e.complexity.CourseConsumptionStats.ActiveLearners == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.ActiveLearners(childComplexity), true

	case "CourseConsumptionStats.AverageCompletionTime":
		if e.complexity.CourseConsumptionStats.AverageCompletionTime == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.AverageCompletionTime(childComplexity), true

	case "CourseConsumptionStats.AverageComplianceScore":
		if e.complexity.CourseConsumptionStats.AverageComplianceScore == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.AverageComplianceScore(childComplexity), true

	case "CourseConsumptionStats.Category":
		if e.complexity.CourseConsumptionStats.Category == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.Category(childComplexity), true

	case "CourseConsumptionStats.CompletedLearners":
		if e.complexity.CourseConsumptionStats.CompletedLearners == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.CompletedLearners(childComplexity), true

	case "CourseConsumptionStats.CourseId":
		if e.complexity.CourseConsumptionStats.CourseID == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.CourseID(childComplexity), true

	case "CourseConsumptionStats.CreatedAt":
		if e.complexity.CourseConsumptionStats.CreatedAt == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.CreatedAt(childComplexity), true

	case "CourseConsumptionStats.CreatedBy":
		if e.complexity.CourseConsumptionStats.CreatedBy == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.CreatedBy(childComplexity), true

	case "CourseConsumptionStats.Duration":
		if e.complexity.CourseConsumptionStats.Duration == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.Duration(childComplexity), true

	case "CourseConsumptionStats.ExpectedCompletionTime":
		if e.complexity.CourseConsumptionStats.ExpectedCompletionTime == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.ExpectedCompletionTime(childComplexity), true

	case "CourseConsumptionStats.ID":
		if e.complexity.CourseConsumptionStats.ID == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.ID(childComplexity), true

	case "CourseConsumptionStats.LspId":
		if e.complexity.CourseConsumptionStats.LspID == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.LspID(childComplexity), true

	case "CourseConsumptionStats.Owner":
		if e.complexity.CourseConsumptionStats.Owner == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.Owner(childComplexity), true

	case "CourseConsumptionStats.SubCategory":
		if e.complexity.CourseConsumptionStats.SubCategory == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.SubCategory(childComplexity), true

	case "CourseConsumptionStats.TotalLearners":
		if e.complexity.CourseConsumptionStats.TotalLearners == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.TotalLearners(childComplexity), true

	case "CourseConsumptionStats.UpdatedAt":
		if e.complexity.CourseConsumptionStats.UpdatedAt == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.UpdatedAt(childComplexity), true

	case "CourseConsumptionStats.UpdatedBy":
		if e.complexity.CourseConsumptionStats.UpdatedBy == nil {
			break
		}

		return e.complexity.CourseConsumptionStats.UpdatedBy(childComplexity), true

	case "CourseViews.created_at":
		if e.complexity.CourseViews.CreatedAt == nil {
			break
		}

		return e.complexity.CourseViews.CreatedAt(childComplexity), true

	case "CourseViews.date_string":
		if e.complexity.CourseViews.DateString == nil {
			break
		}

		return e.complexity.CourseViews.DateString(childComplexity), true

	case "CourseViews.lsp_id":
		if e.complexity.CourseViews.LspID == nil {
			break
		}

		return e.complexity.CourseViews.LspID(childComplexity), true

	case "CourseViews.seconds":
		if e.complexity.CourseViews.Seconds == nil {
			break
		}

		return e.complexity.CourseViews.Seconds(childComplexity), true

	case "CourseViews.user_ids":
		if e.complexity.CourseViews.UserIds == nil {
			break
		}

		return e.complexity.CourseViews.UserIds(childComplexity), true

	case "ExperienceVendor.CompanyName":
		if e.complexity.ExperienceVendor.CompanyName == nil {
			break
		}

		return e.complexity.ExperienceVendor.CompanyName(childComplexity), true

	case "ExperienceVendor.CreatedAt":
		if e.complexity.ExperienceVendor.CreatedAt == nil {
			break
		}

		return e.complexity.ExperienceVendor.CreatedAt(childComplexity), true

	case "ExperienceVendor.CreatedBy":
		if e.complexity.ExperienceVendor.CreatedBy == nil {
			break
		}

		return e.complexity.ExperienceVendor.CreatedBy(childComplexity), true

	case "ExperienceVendor.EmployementType":
		if e.complexity.ExperienceVendor.EmployementType == nil {
			break
		}

		return e.complexity.ExperienceVendor.EmployementType(childComplexity), true

	case "ExperienceVendor.EndDate":
		if e.complexity.ExperienceVendor.EndDate == nil {
			break
		}

		return e.complexity.ExperienceVendor.EndDate(childComplexity), true

	case "ExperienceVendor.ExpId":
		if e.complexity.ExperienceVendor.ExpID == nil {
			break
		}

		return e.complexity.ExperienceVendor.ExpID(childComplexity), true

	case "ExperienceVendor.Location":
		if e.complexity.ExperienceVendor.Location == nil {
			break
		}

		return e.complexity.ExperienceVendor.Location(childComplexity), true

	case "ExperienceVendor.LocationType":
		if e.complexity.ExperienceVendor.LocationType == nil {
			break
		}

		return e.complexity.ExperienceVendor.LocationType(childComplexity), true

	case "ExperienceVendor.PfId":
		if e.complexity.ExperienceVendor.PfID == nil {
			break
		}

		return e.complexity.ExperienceVendor.PfID(childComplexity), true

	case "ExperienceVendor.StartDate":
		if e.complexity.ExperienceVendor.StartDate == nil {
			break
		}

		return e.complexity.ExperienceVendor.StartDate(childComplexity), true

	case "ExperienceVendor.Status":
		if e.complexity.ExperienceVendor.Status == nil {
			break
		}

		return e.complexity.ExperienceVendor.Status(childComplexity), true

	case "ExperienceVendor.Title":
		if e.complexity.ExperienceVendor.Title == nil {
			break
		}

		return e.complexity.ExperienceVendor.Title(childComplexity), true

	case "ExperienceVendor.UpdatedAt":
		if e.complexity.ExperienceVendor.UpdatedAt == nil {
			break
		}

		return e.complexity.ExperienceVendor.UpdatedAt(childComplexity), true

	case "ExperienceVendor.UpdatedBy":
		if e.complexity.ExperienceVendor.UpdatedBy == nil {
			break
		}

		return e.complexity.ExperienceVendor.UpdatedBy(childComplexity), true

	case "ExperienceVendor.VendorId":
		if e.complexity.ExperienceVendor.VendorID == nil {
			break
		}

		return e.complexity.ExperienceVendor.VendorID(childComplexity), true

	case "InviteResponse.email":
		if e.complexity.InviteResponse.Email == nil {
			break
		}

		return e.complexity.InviteResponse.Email(childComplexity), true

	case "InviteResponse.message":
		if e.complexity.InviteResponse.Message == nil {
			break
		}

		return e.complexity.InviteResponse.Message(childComplexity), true

	case "LearningSpace.created_at":
		if e.complexity.LearningSpace.CreatedAt == nil {
			break
		}

		return e.complexity.LearningSpace.CreatedAt(childComplexity), true

	case "LearningSpace.created_by":
		if e.complexity.LearningSpace.CreatedBy == nil {
			break
		}

		return e.complexity.LearningSpace.CreatedBy(childComplexity), true

	case "LearningSpace.is_default":
		if e.complexity.LearningSpace.IsDefault == nil {
			break
		}

		return e.complexity.LearningSpace.IsDefault(childComplexity), true

	case "LearningSpace.logo_url":
		if e.complexity.LearningSpace.LogoURL == nil {
			break
		}

		return e.complexity.LearningSpace.LogoURL(childComplexity), true

	case "LearningSpace.lsp_id":
		if e.complexity.LearningSpace.LspID == nil {
			break
		}

		return e.complexity.LearningSpace.LspID(childComplexity), true

	case "LearningSpace.name":
		if e.complexity.LearningSpace.Name == nil {
			break
		}

		return e.complexity.LearningSpace.Name(childComplexity), true

	case "LearningSpace.no_users":
		if e.complexity.LearningSpace.NoUsers == nil {
			break
		}

		return e.complexity.LearningSpace.NoUsers(childComplexity), true

	case "LearningSpace.org_id":
		if e.complexity.LearningSpace.OrgID == nil {
			break
		}

		return e.complexity.LearningSpace.OrgID(childComplexity), true

	case "LearningSpace.ou_id":
		if e.complexity.LearningSpace.OuID == nil {
			break
		}

		return e.complexity.LearningSpace.OuID(childComplexity), true

	case "LearningSpace.owners":
		if e.complexity.LearningSpace.Owners == nil {
			break
		}

		return e.complexity.LearningSpace.Owners(childComplexity), true

	case "LearningSpace.profile_url":
		if e.complexity.LearningSpace.ProfileURL == nil {
			break
		}

		return e.complexity.LearningSpace.ProfileURL(childComplexity), true

	case "LearningSpace.status":
		if e.complexity.LearningSpace.Status == nil {
			break
		}

		return e.complexity.LearningSpace.Status(childComplexity), true

	case "LearningSpace.updated_at":
		if e.complexity.LearningSpace.UpdatedAt == nil {
			break
		}

		return e.complexity.LearningSpace.UpdatedAt(childComplexity), true

	case "LearningSpace.updated_by":
		if e.complexity.LearningSpace.UpdatedBy == nil {
			break
		}

		return e.complexity.LearningSpace.UpdatedBy(childComplexity), true

	case "Mutation.addCohortMain":
		if e.complexity.Mutation.AddCohortMain == nil {
			break
		}

		args, err := ec.field_Mutation_addCohortMain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCohortMain(childComplexity, args["input"].(model.CohortMainInput)), true

	case "Mutation.addLearningSpace":
		if e.complexity.Mutation.AddLearningSpace == nil {
			break
		}

		args, err := ec.field_Mutation_addLearningSpace_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddLearningSpace(childComplexity, args["input"].(model.LearningSpaceInput)), true

	case "Mutation.addOrganization":
		if e.complexity.Mutation.AddOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganization(childComplexity, args["input"].(model.OrganizationInput)), true

	case "Mutation.addOrganizationUnit":
		if e.complexity.Mutation.AddOrganizationUnit == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationUnit(childComplexity, args["input"].(model.OrganizationUnitInput)), true

	case "Mutation.addUserBookmark":
		if e.complexity.Mutation.AddUserBookmark == nil {
			break
		}

		args, err := ec.field_Mutation_addUserBookmark_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserBookmark(childComplexity, args["input"].([]*model.UserBookmarkInput)), true

	case "Mutation.addUserCohort":
		if e.complexity.Mutation.AddUserCohort == nil {
			break
		}

		args, err := ec.field_Mutation_addUserCohort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserCohort(childComplexity, args["input"].([]*model.UserCohortInput)), true

	case "Mutation.addUserCourse":
		if e.complexity.Mutation.AddUserCourse == nil {
			break
		}

		args, err := ec.field_Mutation_addUserCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserCourse(childComplexity, args["input"].([]*model.UserCourseInput)), true

	case "Mutation.addUserCourseProgress":
		if e.complexity.Mutation.AddUserCourseProgress == nil {
			break
		}

		args, err := ec.field_Mutation_addUserCourseProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserCourseProgress(childComplexity, args["input"].([]*model.UserCourseProgressInput)), true

	case "Mutation.addUserExamAttempts":
		if e.complexity.Mutation.AddUserExamAttempts == nil {
			break
		}

		args, err := ec.field_Mutation_addUserExamAttempts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserExamAttempts(childComplexity, args["input"].([]*model.UserExamAttemptsInput)), true

	case "Mutation.addUserExamProgress":
		if e.complexity.Mutation.AddUserExamProgress == nil {
			break
		}

		args, err := ec.field_Mutation_addUserExamProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserExamProgress(childComplexity, args["input"].([]*model.UserExamProgressInput)), true

	case "Mutation.addUserExamResult":
		if e.complexity.Mutation.AddUserExamResult == nil {
			break
		}

		args, err := ec.field_Mutation_addUserExamResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserExamResult(childComplexity, args["input"].([]*model.UserExamResultInput)), true

	case "Mutation.addUserLanguageMap":
		if e.complexity.Mutation.AddUserLanguageMap == nil {
			break
		}

		args, err := ec.field_Mutation_addUserLanguageMap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserLanguageMap(childComplexity, args["input"].([]*model.UserLanguageMapInput)), true

	case "Mutation.addUserLspMap":
		if e.complexity.Mutation.AddUserLspMap == nil {
			break
		}

		args, err := ec.field_Mutation_addUserLspMap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserLspMap(childComplexity, args["input"].([]*model.UserLspMapInput)), true

	case "Mutation.addUserNotes":
		if e.complexity.Mutation.AddUserNotes == nil {
			break
		}

		args, err := ec.field_Mutation_addUserNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserNotes(childComplexity, args["input"].([]*model.UserNotesInput)), true

	case "Mutation.addUserOrganizationMap":
		if e.complexity.Mutation.AddUserOrganizationMap == nil {
			break
		}

		args, err := ec.field_Mutation_addUserOrganizationMap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserOrganizationMap(childComplexity, args["input"].([]*model.UserOrganizationMapInput)), true

	case "Mutation.addUserPreference":
		if e.complexity.Mutation.AddUserPreference == nil {
			break
		}

		args, err := ec.field_Mutation_addUserPreference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserPreference(childComplexity, args["input"].([]*model.UserPreferenceInput)), true

	case "Mutation.addUserQuizAttempt":
		if e.complexity.Mutation.AddUserQuizAttempt == nil {
			break
		}

		args, err := ec.field_Mutation_addUserQuizAttempt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserQuizAttempt(childComplexity, args["input"].([]*model.UserQuizAttemptInput)), true

	case "Mutation.addUserRoles":
		if e.complexity.Mutation.AddUserRoles == nil {
			break
		}

		args, err := ec.field_Mutation_addUserRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserRoles(childComplexity, args["input"].([]*model.UserRoleInput)), true

	case "Mutation.addVendor":
		if e.complexity.Mutation.AddVendor == nil {
			break
		}

		args, err := ec.field_Mutation_addVendor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddVendor(childComplexity, args["input"].(*model.VendorInput)), true

	case "Mutation.createExperienceVendor":
		if e.complexity.Mutation.CreateExperienceVendor == nil {
			break
		}

		args, err := ec.field_Mutation_createExperienceVendor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateExperienceVendor(childComplexity, args["input"].(model.ExperienceInput)), true

	case "Mutation.createProfileVendor":
		if e.complexity.Mutation.CreateProfileVendor == nil {
			break
		}

		args, err := ec.field_Mutation_createProfileVendor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProfileVendor(childComplexity, args["input"].(*model.VendorProfile)), true

	case "Mutation.deleteCohortImage":
		if e.complexity.Mutation.DeleteCohortImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCohortImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCohortImage(childComplexity, args["cohort_id"].(string), args["filename"].(string)), true

	case "Mutation.inviteUsers":
		if e.complexity.Mutation.InviteUsers == nil {
			break
		}

		args, err := ec.field_Mutation_inviteUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteUsers(childComplexity, args["emails"].([]string), args["lsp_id"].(*string)), true

	case "Mutation.inviteUsersWithRole":
		if e.complexity.Mutation.InviteUsersWithRole == nil {
			break
		}

		args, err := ec.field_Mutation_inviteUsersWithRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteUsersWithRole(childComplexity, args["emails"].([]string), args["lsp_id"].(*string), args["role"].(*string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		return e.complexity.Mutation.Login(childComplexity), true

	case "Mutation.registerUsers":
		if e.complexity.Mutation.RegisterUsers == nil {
			break
		}

		args, err := ec.field_Mutation_registerUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterUsers(childComplexity, args["input"].([]*model.UserInput)), true

	case "Mutation.updateCohortMain":
		if e.complexity.Mutation.UpdateCohortMain == nil {
			break
		}

		args, err := ec.field_Mutation_updateCohortMain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCohortMain(childComplexity, args["input"].(model.CohortMainInput)), true

	case "Mutation.updateLearningSpace":
		if e.complexity.Mutation.UpdateLearningSpace == nil {
			break
		}

		args, err := ec.field_Mutation_updateLearningSpace_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLearningSpace(childComplexity, args["input"].(model.LearningSpaceInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["input"].(model.OrganizationInput)), true

	case "Mutation.updateOrganizationUnit":
		if e.complexity.Mutation.UpdateOrganizationUnit == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationUnit(childComplexity, args["input"].(model.OrganizationUnitInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UserInput)), true

	case "Mutation.updateUserBookmark":
		if e.complexity.Mutation.UpdateUserBookmark == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserBookmark_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserBookmark(childComplexity, args["input"].(model.UserBookmarkInput)), true

	case "Mutation.updateUserCohort":
		if e.complexity.Mutation.UpdateUserCohort == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserCohort_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserCohort(childComplexity, args["input"].(model.UserCohortInput)), true

	case "Mutation.updateUserCourse":
		if e.complexity.Mutation.UpdateUserCourse == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserCourse(childComplexity, args["input"].(model.UserCourseInput)), true

	case "Mutation.updateUserCourseProgress":
		if e.complexity.Mutation.UpdateUserCourseProgress == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserCourseProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserCourseProgress(childComplexity, args["input"].(model.UserCourseProgressInput)), true

	case "Mutation.updateUserExamAttempts":
		if e.complexity.Mutation.UpdateUserExamAttempts == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserExamAttempts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserExamAttempts(childComplexity, args["input"].(model.UserExamAttemptsInput)), true

	case "Mutation.updateUserExamProgress":
		if e.complexity.Mutation.UpdateUserExamProgress == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserExamProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserExamProgress(childComplexity, args["input"].(model.UserExamProgressInput)), true

	case "Mutation.updateUserExamResult":
		if e.complexity.Mutation.UpdateUserExamResult == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserExamResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserExamResult(childComplexity, args["input"].(model.UserExamResultInput)), true

	case "Mutation.updateUserLspMap":
		if e.complexity.Mutation.UpdateUserLspMap == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserLspMap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserLspMap(childComplexity, args["input"].(model.UserLspMapInput)), true

	case "Mutation.updateUserNotes":
		if e.complexity.Mutation.UpdateUserNotes == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserNotes(childComplexity, args["input"].(model.UserNotesInput)), true

	case "Mutation.updateUserOrganizationMap":
		if e.complexity.Mutation.UpdateUserOrganizationMap == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserOrganizationMap_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserOrganizationMap(childComplexity, args["input"].(model.UserOrganizationMapInput)), true

	case "Mutation.updateUserPreference":
		if e.complexity.Mutation.UpdateUserPreference == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPreference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPreference(childComplexity, args["input"].(model.UserPreferenceInput)), true

	case "Mutation.updateUserQuizAttempt":
		if e.complexity.Mutation.UpdateUserQuizAttempt == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserQuizAttempt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserQuizAttempt(childComplexity, args["input"].(model.UserQuizAttemptInput)), true

	case "Mutation.updateUserRole":
		if e.complexity.Mutation.UpdateUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserRole(childComplexity, args["input"].(model.UserRoleInput)), true

	case "Mutation.updateVendor":
		if e.complexity.Mutation.UpdateVendor == nil {
			break
		}

		args, err := ec.field_Mutation_updateVendor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVendor(childComplexity, args["input"].(*model.VendorInput)), true

	case "Mutation.uploadSampleFile":
		if e.complexity.Mutation.UploadSampleFile == nil {
			break
		}

		args, err := ec.field_Mutation_uploadSampleFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadSampleFile(childComplexity, args["input"].(*model.SampleFile)), true

	case "Organization.created_at":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.created_by":
		if e.complexity.Organization.CreatedBy == nil {
			break
		}

		return e.complexity.Organization.CreatedBy(childComplexity), true

	case "Organization.employee_count":
		if e.complexity.Organization.EmployeeCount == nil {
			break
		}

		return e.complexity.Organization.EmployeeCount(childComplexity), true

	case "Organization.facebook_url":
		if e.complexity.Organization.FacebookURL == nil {
			break
		}

		return e.complexity.Organization.FacebookURL(childComplexity), true

	case "Organization.industry":
		if e.complexity.Organization.Industry == nil {
			break
		}

		return e.complexity.Organization.Industry(childComplexity), true

	case "Organization.linkedin_url":
		if e.complexity.Organization.LinkedinURL == nil {
			break
		}

		return e.complexity.Organization.LinkedinURL(childComplexity), true

	case "Organization.logo_url":
		if e.complexity.Organization.LogoURL == nil {
			break
		}

		return e.complexity.Organization.LogoURL(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.org_id":
		if e.complexity.Organization.OrgID == nil {
			break
		}

		return e.complexity.Organization.OrgID(childComplexity), true

	case "Organization.status":
		if e.complexity.Organization.Status == nil {
			break
		}

		return e.complexity.Organization.Status(childComplexity), true

	case "Organization.subdomain":
		if e.complexity.Organization.Subdomain == nil {
			break
		}

		return e.complexity.Organization.Subdomain(childComplexity), true

	case "Organization.twitter_url":
		if e.complexity.Organization.TwitterURL == nil {
			break
		}

		return e.complexity.Organization.TwitterURL(childComplexity), true

	case "Organization.type":
		if e.complexity.Organization.Type == nil {
			break
		}

		return e.complexity.Organization.Type(childComplexity), true

	case "Organization.updated_at":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.updated_by":
		if e.complexity.Organization.UpdatedBy == nil {
			break
		}

		return e.complexity.Organization.UpdatedBy(childComplexity), true

	case "Organization.website":
		if e.complexity.Organization.Website == nil {
			break
		}

		return e.complexity.Organization.Website(childComplexity), true

	case "OrganizationUnit.address":
		if e.complexity.OrganizationUnit.Address == nil {
			break
		}

		return e.complexity.OrganizationUnit.Address(childComplexity), true

	case "OrganizationUnit.city":
		if e.complexity.OrganizationUnit.City == nil {
			break
		}

		return e.complexity.OrganizationUnit.City(childComplexity), true

	case "OrganizationUnit.country":
		if e.complexity.OrganizationUnit.Country == nil {
			break
		}

		return e.complexity.OrganizationUnit.Country(childComplexity), true

	case "OrganizationUnit.created_at":
		if e.complexity.OrganizationUnit.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationUnit.CreatedAt(childComplexity), true

	case "OrganizationUnit.created_by":
		if e.complexity.OrganizationUnit.CreatedBy == nil {
			break
		}

		return e.complexity.OrganizationUnit.CreatedBy(childComplexity), true

	case "OrganizationUnit.emp_count":
		if e.complexity.OrganizationUnit.EmpCount == nil {
			break
		}

		return e.complexity.OrganizationUnit.EmpCount(childComplexity), true

	case "OrganizationUnit.org_id":
		if e.complexity.OrganizationUnit.OrgID == nil {
			break
		}

		return e.complexity.OrganizationUnit.OrgID(childComplexity), true

	case "OrganizationUnit.ou_id":
		if e.complexity.OrganizationUnit.OuID == nil {
			break
		}

		return e.complexity.OrganizationUnit.OuID(childComplexity), true

	case "OrganizationUnit.postal_code":
		if e.complexity.OrganizationUnit.PostalCode == nil {
			break
		}

		return e.complexity.OrganizationUnit.PostalCode(childComplexity), true

	case "OrganizationUnit.state":
		if e.complexity.OrganizationUnit.State == nil {
			break
		}

		return e.complexity.OrganizationUnit.State(childComplexity), true

	case "OrganizationUnit.status":
		if e.complexity.OrganizationUnit.Status == nil {
			break
		}

		return e.complexity.OrganizationUnit.Status(childComplexity), true

	case "OrganizationUnit.updated_at":
		if e.complexity.OrganizationUnit.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationUnit.UpdatedAt(childComplexity), true

	case "OrganizationUnit.updated_by":
		if e.complexity.OrganizationUnit.UpdatedBy == nil {
			break
		}

		return e.complexity.OrganizationUnit.UpdatedBy(childComplexity), true

	case "PaginatedBookmarks.bookmarks":
		if e.complexity.PaginatedBookmarks.Bookmarks == nil {
			break
		}

		return e.complexity.PaginatedBookmarks.Bookmarks(childComplexity), true

	case "PaginatedBookmarks.direction":
		if e.complexity.PaginatedBookmarks.Direction == nil {
			break
		}

		return e.complexity.PaginatedBookmarks.Direction(childComplexity), true

	case "PaginatedBookmarks.pageCursor":
		if e.complexity.PaginatedBookmarks.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedBookmarks.PageCursor(childComplexity), true

	case "PaginatedBookmarks.pageSize":
		if e.complexity.PaginatedBookmarks.PageSize == nil {
			break
		}

		return e.complexity.PaginatedBookmarks.PageSize(childComplexity), true

	case "PaginatedCCStats.direction":
		if e.complexity.PaginatedCCStats.Direction == nil {
			break
		}

		return e.complexity.PaginatedCCStats.Direction(childComplexity), true

	case "PaginatedCCStats.pageCursor":
		if e.complexity.PaginatedCCStats.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedCCStats.PageCursor(childComplexity), true

	case "PaginatedCCStats.pageSize":
		if e.complexity.PaginatedCCStats.PageSize == nil {
			break
		}

		return e.complexity.PaginatedCCStats.PageSize(childComplexity), true

	case "PaginatedCCStats.stats":
		if e.complexity.PaginatedCCStats.Stats == nil {
			break
		}

		return e.complexity.PaginatedCCStats.Stats(childComplexity), true

	case "PaginatedCohorts.cohorts":
		if e.complexity.PaginatedCohorts.Cohorts == nil {
			break
		}

		return e.complexity.PaginatedCohorts.Cohorts(childComplexity), true

	case "PaginatedCohorts.direction":
		if e.complexity.PaginatedCohorts.Direction == nil {
			break
		}

		return e.complexity.PaginatedCohorts.Direction(childComplexity), true

	case "PaginatedCohorts.pageCursor":
		if e.complexity.PaginatedCohorts.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedCohorts.PageCursor(childComplexity), true

	case "PaginatedCohorts.pageSize":
		if e.complexity.PaginatedCohorts.PageSize == nil {
			break
		}

		return e.complexity.PaginatedCohorts.PageSize(childComplexity), true

	case "PaginatedCohortsMain.cohorts":
		if e.complexity.PaginatedCohortsMain.Cohorts == nil {
			break
		}

		return e.complexity.PaginatedCohortsMain.Cohorts(childComplexity), true

	case "PaginatedCohortsMain.direction":
		if e.complexity.PaginatedCohortsMain.Direction == nil {
			break
		}

		return e.complexity.PaginatedCohortsMain.Direction(childComplexity), true

	case "PaginatedCohortsMain.pageCursor":
		if e.complexity.PaginatedCohortsMain.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedCohortsMain.PageCursor(childComplexity), true

	case "PaginatedCohortsMain.pageSize":
		if e.complexity.PaginatedCohortsMain.PageSize == nil {
			break
		}

		return e.complexity.PaginatedCohortsMain.PageSize(childComplexity), true

	case "PaginatedCourseMaps.direction":
		if e.complexity.PaginatedCourseMaps.Direction == nil {
			break
		}

		return e.complexity.PaginatedCourseMaps.Direction(childComplexity), true

	case "PaginatedCourseMaps.pageCursor":
		if e.complexity.PaginatedCourseMaps.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedCourseMaps.PageCursor(childComplexity), true

	case "PaginatedCourseMaps.pageSize":
		if e.complexity.PaginatedCourseMaps.PageSize == nil {
			break
		}

		return e.complexity.PaginatedCourseMaps.PageSize(childComplexity), true

	case "PaginatedCourseMaps.user_courses":
		if e.complexity.PaginatedCourseMaps.UserCourses == nil {
			break
		}

		return e.complexity.PaginatedCourseMaps.UserCourses(childComplexity), true

	case "PaginatedNotes.direction":
		if e.complexity.PaginatedNotes.Direction == nil {
			break
		}

		return e.complexity.PaginatedNotes.Direction(childComplexity), true

	case "PaginatedNotes.notes":
		if e.complexity.PaginatedNotes.Notes == nil {
			break
		}

		return e.complexity.PaginatedNotes.Notes(childComplexity), true

	case "PaginatedNotes.pageCursor":
		if e.complexity.PaginatedNotes.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedNotes.PageCursor(childComplexity), true

	case "PaginatedNotes.pageSize":
		if e.complexity.PaginatedNotes.PageSize == nil {
			break
		}

		return e.complexity.PaginatedNotes.PageSize(childComplexity), true

	case "PaginatedUserLspMaps.direction":
		if e.complexity.PaginatedUserLspMaps.Direction == nil {
			break
		}

		return e.complexity.PaginatedUserLspMaps.Direction(childComplexity), true

	case "PaginatedUserLspMaps.pageCursor":
		if e.complexity.PaginatedUserLspMaps.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedUserLspMaps.PageCursor(childComplexity), true

	case "PaginatedUserLspMaps.pageSize":
		if e.complexity.PaginatedUserLspMaps.PageSize == nil {
			break
		}

		return e.complexity.PaginatedUserLspMaps.PageSize(childComplexity), true

	case "PaginatedUserLspMaps.user_lsp_maps":
		if e.complexity.PaginatedUserLspMaps.UserLspMaps == nil {
			break
		}

		return e.complexity.PaginatedUserLspMaps.UserLspMaps(childComplexity), true

	case "PaginatedUsers.direction":
		if e.complexity.PaginatedUsers.Direction == nil {
			break
		}

		return e.complexity.PaginatedUsers.Direction(childComplexity), true

	case "PaginatedUsers.pageCursor":
		if e.complexity.PaginatedUsers.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedUsers.PageCursor(childComplexity), true

	case "PaginatedUsers.pageSize":
		if e.complexity.PaginatedUsers.PageSize == nil {
			break
		}

		return e.complexity.PaginatedUsers.PageSize(childComplexity), true

	case "PaginatedUsers.users":
		if e.complexity.PaginatedUsers.Users == nil {
			break
		}

		return e.complexity.PaginatedUsers.Users(childComplexity), true

	case "PaginatedVendors.direction":
		if e.complexity.PaginatedVendors.Direction == nil {
			break
		}

		return e.complexity.PaginatedVendors.Direction(childComplexity), true

	case "PaginatedVendors.pageCursor":
		if e.complexity.PaginatedVendors.PageCursor == nil {
			break
		}

		return e.complexity.PaginatedVendors.PageCursor(childComplexity), true

	case "PaginatedVendors.pageSize":
		if e.complexity.PaginatedVendors.PageSize == nil {
			break
		}

		return e.complexity.PaginatedVendors.PageSize(childComplexity), true

	case "PaginatedVendors.vendors":
		if e.complexity.PaginatedVendors.Vendors == nil {
			break
		}

		return e.complexity.PaginatedVendors.Vendors(childComplexity), true

	case "Query.getCohortDetails":
		if e.complexity.Query.GetCohortDetails == nil {
			break
		}

		args, err := ec.field_Query_getCohortDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCohortDetails(childComplexity, args["cohort_id"].(string)), true

	case "Query.getCohortMains":
		if e.complexity.Query.GetCohortMains == nil {
			break
		}

		args, err := ec.field_Query_getCohortMains_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCohortMains(childComplexity, args["lsp_id"].(string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int), args["searchText"].(*string)), true

	case "Query.getCohortUsers":
		if e.complexity.Query.GetCohortUsers == nil {
			break
		}

		args, err := ec.field_Query_getCohortUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCohortUsers(childComplexity, args["cohort_id"].(string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getCourseConsumptionStats":
		if e.complexity.Query.GetCourseConsumptionStats == nil {
			break
		}

		args, err := ec.field_Query_getCourseConsumptionStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCourseConsumptionStats(childComplexity, args["lsp_id"].(string), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getCourseViews":
		if e.complexity.Query.GetCourseViews == nil {
			break
		}

		args, err := ec.field_Query_getCourseViews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCourseViews(childComplexity, args["lsp_ids"].([]string), args["start_time"].(*string), args["end_time"].(*string)), true

	case "Query.getLatestCohorts":
		if e.complexity.Query.GetLatestCohorts == nil {
			break
		}

		args, err := ec.field_Query_getLatestCohorts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLatestCohorts(childComplexity, args["user_id"].(*string), args["user_lsp_id"].(*string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getLearningSpaceDetails":
		if e.complexity.Query.GetLearningSpaceDetails == nil {
			break
		}

		args, err := ec.field_Query_getLearningSpaceDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLearningSpaceDetails(childComplexity, args["lsp_ids"].([]*string)), true

	case "Query.getLearningSpacesByOrgId":
		if e.complexity.Query.GetLearningSpacesByOrgID == nil {
			break
		}

		args, err := ec.field_Query_getLearningSpacesByOrgId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLearningSpacesByOrgID(childComplexity, args["org_id"].(string)), true

	case "Query.getLearningSpacesByOuId":
		if e.complexity.Query.GetLearningSpacesByOuID == nil {
			break
		}

		args, err := ec.field_Query_getLearningSpacesByOuId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLearningSpacesByOuID(childComplexity, args["ou_id"].(string), args["org_id"].(string)), true

	case "Query.getOrganizationUnits":
		if e.complexity.Query.GetOrganizationUnits == nil {
			break
		}

		args, err := ec.field_Query_getOrganizationUnits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrganizationUnits(childComplexity, args["ou_ids"].([]*string)), true

	case "Query.getOrganizations":
		if e.complexity.Query.GetOrganizations == nil {
			break
		}

		args, err := ec.field_Query_getOrganizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrganizations(childComplexity, args["org_ids"].([]*string)), true

	case "Query.getOrganizationsByName":
		if e.complexity.Query.GetOrganizationsByName == nil {
			break
		}

		args, err := ec.field_Query_getOrganizationsByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrganizationsByName(childComplexity, args["name"].(*string), args["prevPageSnapShot"].(string), args["pageSize"].(int)), true

	case "Query.getPaginatedVendors":
		if e.complexity.Query.GetPaginatedVendors == nil {
			break
		}

		args, err := ec.field_Query_getPaginatedVendors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPaginatedVendors(childComplexity, args["lsp_id"].(*string), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getUnitsByOrgId":
		if e.complexity.Query.GetUnitsByOrgID == nil {
			break
		}

		args, err := ec.field_Query_getUnitsByOrgId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUnitsByOrgID(childComplexity, args["org_id"].(string)), true

	case "Query.getUserBookmarks":
		if e.complexity.Query.GetUserBookmarks == nil {
			break
		}

		args, err := ec.field_Query_getUserBookmarks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserBookmarks(childComplexity, args["user_id"].(string), args["user_lsp_id"].(*string), args["course_id"].(*string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getUserCourseMapByCourseID":
		if e.complexity.Query.GetUserCourseMapByCourseID == nil {
			break
		}

		args, err := ec.field_Query_getUserCourseMapByCourseID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCourseMapByCourseID(childComplexity, args["user_id"].(string), args["course_id"].(string), args["lsp_id"].(*string)), true

	case "Query.getUserCourseMapStats":
		if e.complexity.Query.GetUserCourseMapStats == nil {
			break
		}

		args, err := ec.field_Query_getUserCourseMapStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCourseMapStats(childComplexity, args["input"].(model.UserCourseMapStatsInput)), true

	case "Query.getUserCourseMaps":
		if e.complexity.Query.GetUserCourseMaps == nil {
			break
		}

		args, err := ec.field_Query_getUserCourseMaps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCourseMaps(childComplexity, args["user_id"].(string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int), args["filters"].(*model.CourseMapFilters)), true

	case "Query.getUserCourseProgressByMapId":
		if e.complexity.Query.GetUserCourseProgressByMapID == nil {
			break
		}

		args, err := ec.field_Query_getUserCourseProgressByMapId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCourseProgressByMapID(childComplexity, args["user_id"].(string), args["user_course_id"].([]string)), true

	case "Query.getUserCourseProgressByTopicId":
		if e.complexity.Query.GetUserCourseProgressByTopicID == nil {
			break
		}

		args, err := ec.field_Query_getUserCourseProgressByTopicId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCourseProgressByTopicID(childComplexity, args["user_id"].(string), args["topic_id"].(string)), true

	case "Query.getUserDetails":
		if e.complexity.Query.GetUserDetails == nil {
			break
		}

		args, err := ec.field_Query_getUserDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserDetails(childComplexity, args["user_ids"].([]*string)), true

	case "Query.getUserExamAttempts":
		if e.complexity.Query.GetUserExamAttempts == nil {
			break
		}

		args, err := ec.field_Query_getUserExamAttempts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserExamAttempts(childComplexity, args["user_id"].(*string), args["exam_id"].(string)), true

	case "Query.getUserExamProgress":
		if e.complexity.Query.GetUserExamProgress == nil {
			break
		}

		args, err := ec.field_Query_getUserExamProgress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserExamProgress(childComplexity, args["user_id"].(string), args["user_ea_id"].(string)), true

	case "Query.getUserExamResults":
		if e.complexity.Query.GetUserExamResults == nil {
			break
		}

		args, err := ec.field_Query_getUserExamResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserExamResults(childComplexity, args["user_ea_details"].([]*model.UserExamResultDetails)), true

	case "Query.getUserLspByLspId":
		if e.complexity.Query.GetUserLspByLspID == nil {
			break
		}

		args, err := ec.field_Query_getUserLspByLspId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserLspByLspID(childComplexity, args["user_id"].(string), args["lsp_id"].(string)), true

	case "Query.getUserLspMapsByLspId":
		if e.complexity.Query.GetUserLspMapsByLspID == nil {
			break
		}

		args, err := ec.field_Query_getUserLspMapsByLspId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserLspMapsByLspID(childComplexity, args["lsp_id"].(string), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getUserLspRoles":
		if e.complexity.Query.GetUserLspRoles == nil {
			break
		}

		args, err := ec.field_Query_getUserLspRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserLspRoles(childComplexity, args["user_id"].(string), args["user_lsp_ids"].([]string)), true

	case "Query.getUserLsps":
		if e.complexity.Query.GetUserLsps == nil {
			break
		}

		args, err := ec.field_Query_getUserLsps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserLsps(childComplexity, args["user_id"].(string)), true

	case "Query.getUserNotes":
		if e.complexity.Query.GetUserNotes == nil {
			break
		}

		args, err := ec.field_Query_getUserNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserNotes(childComplexity, args["user_id"].(string), args["user_lsp_id"].(*string), args["course_id"].(*string), args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int)), true

	case "Query.getUserOrgDetails":
		if e.complexity.Query.GetUserOrgDetails == nil {
			break
		}

		args, err := ec.field_Query_getUserOrgDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserOrgDetails(childComplexity, args["user_id"].(string), args["user_lsp_id"].(string)), true

	case "Query.getUserOrganizations":
		if e.complexity.Query.GetUserOrganizations == nil {
			break
		}

		args, err := ec.field_Query_getUserOrganizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserOrganizations(childComplexity, args["user_id"].(string)), true

	case "Query.getUserPreferenceForLsp":
		if e.complexity.Query.GetUserPreferenceForLsp == nil {
			break
		}

		args, err := ec.field_Query_getUserPreferenceForLsp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserPreferenceForLsp(childComplexity, args["user_id"].(string), args["user_lsp_id"].(string)), true

	case "Query.getUserPreferences":
		if e.complexity.Query.GetUserPreferences == nil {
			break
		}

		args, err := ec.field_Query_getUserPreferences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserPreferences(childComplexity, args["user_id"].(string)), true

	case "Query.getUserQuizAttempts":
		if e.complexity.Query.GetUserQuizAttempts == nil {
			break
		}

		args, err := ec.field_Query_getUserQuizAttempts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserQuizAttempts(childComplexity, args["user_id"].(string), args["topic_id"].(string)), true

	case "Query.getUsersForAdmin":
		if e.complexity.Query.GetUsersForAdmin == nil {
			break
		}

		args, err := ec.field_Query_getUsersForAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUsersForAdmin(childComplexity, args["publish_time"].(*int), args["pageCursor"].(*string), args["Direction"].(*string), args["pageSize"].(*int), args["filters"].(*model.UserFilters)), true

	case "Query.getVendorAdmins":
		if e.complexity.Query.GetVendorAdmins == nil {
			break
		}

		args, err := ec.field_Query_getVendorAdmins_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVendorAdmins(childComplexity, args["vendor_id"].(string)), true

	case "Query.getVendorDetails":
		if e.complexity.Query.GetVendorDetails == nil {
			break
		}

		args, err := ec.field_Query_getVendorDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVendorDetails(childComplexity, args["vendor_id"].(string)), true

	case "Query.getVendorExperience":
		if e.complexity.Query.GetVendorExperience == nil {
			break
		}

		args, err := ec.field_Query_getVendorExperience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVendorExperience(childComplexity, args["vendor_id"].(string), args["exp_id"].(string)), true

	case "Query.getVendors":
		if e.complexity.Query.GetVendors == nil {
			break
		}

		args, err := ec.field_Query_getVendors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVendors(childComplexity, args["lsp_id"].(*string)), true

	case "Query.logout":
		if e.complexity.Query.Logout == nil {
			break
		}

		return e.complexity.Query.Logout(childComplexity), true

	case "User.created_at":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.created_by":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.first_name":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.gender":
		if e.complexity.User.Gender == nil {
			break
		}

		return e.complexity.User.Gender(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.is_active":
		if e.complexity.User.IsActive == nil {
			break
		}

		return e.complexity.User.IsActive(childComplexity), true

	case "User.is_verified":
		if e.complexity.User.IsVerified == nil {
			break
		}

		return e.complexity.User.IsVerified(childComplexity), true

	case "User.last_name":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.photo_url":
		if e.complexity.User.PhotoURL == nil {
			break
		}

		return e.complexity.User.PhotoURL(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.updated_at":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updated_by":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "UserBookmark.course_id":
		if e.complexity.UserBookmark.CourseID == nil {
			break
		}

		return e.complexity.UserBookmark.CourseID(childComplexity), true

	case "UserBookmark.created_at":
		if e.complexity.UserBookmark.CreatedAt == nil {
			break
		}

		return e.complexity.UserBookmark.CreatedAt(childComplexity), true

	case "UserBookmark.created_by":
		if e.complexity.UserBookmark.CreatedBy == nil {
			break
		}

		return e.complexity.UserBookmark.CreatedBy(childComplexity), true

	case "UserBookmark.is_active":
		if e.complexity.UserBookmark.IsActive == nil {
			break
		}

		return e.complexity.UserBookmark.IsActive(childComplexity), true

	case "UserBookmark.module_id":
		if e.complexity.UserBookmark.ModuleID == nil {
			break
		}

		return e.complexity.UserBookmark.ModuleID(childComplexity), true

	case "UserBookmark.name":
		if e.complexity.UserBookmark.Name == nil {
			break
		}

		return e.complexity.UserBookmark.Name(childComplexity), true

	case "UserBookmark.time_stamp":
		if e.complexity.UserBookmark.TimeStamp == nil {
			break
		}

		return e.complexity.UserBookmark.TimeStamp(childComplexity), true

	case "UserBookmark.topic_id":
		if e.complexity.UserBookmark.TopicID == nil {
			break
		}

		return e.complexity.UserBookmark.TopicID(childComplexity), true

	case "UserBookmark.updated_at":
		if e.complexity.UserBookmark.UpdatedAt == nil {
			break
		}

		return e.complexity.UserBookmark.UpdatedAt(childComplexity), true

	case "UserBookmark.updated_by":
		if e.complexity.UserBookmark.UpdatedBy == nil {
			break
		}

		return e.complexity.UserBookmark.UpdatedBy(childComplexity), true

	case "UserBookmark.user_bm_id":
		if e.complexity.UserBookmark.UserBmID == nil {
			break
		}

		return e.complexity.UserBookmark.UserBmID(childComplexity), true

	case "UserBookmark.user_course_id":
		if e.complexity.UserBookmark.UserCourseID == nil {
			break
		}

		return e.complexity.UserBookmark.UserCourseID(childComplexity), true

	case "UserBookmark.user_id":
		if e.complexity.UserBookmark.UserID == nil {
			break
		}

		return e.complexity.UserBookmark.UserID(childComplexity), true

	case "UserBookmark.user_lsp_id":
		if e.complexity.UserBookmark.UserLspID == nil {
			break
		}

		return e.complexity.UserBookmark.UserLspID(childComplexity), true

	case "UserCohort.added_by":
		if e.complexity.UserCohort.AddedBy == nil {
			break
		}

		return e.complexity.UserCohort.AddedBy(childComplexity), true

	case "UserCohort.cohort_id":
		if e.complexity.UserCohort.CohortID == nil {
			break
		}

		return e.complexity.UserCohort.CohortID(childComplexity), true

	case "UserCohort.created_at":
		if e.complexity.UserCohort.CreatedAt == nil {
			break
		}

		return e.complexity.UserCohort.CreatedAt(childComplexity), true

	case "UserCohort.created_by":
		if e.complexity.UserCohort.CreatedBy == nil {
			break
		}

		return e.complexity.UserCohort.CreatedBy(childComplexity), true

	case "UserCohort.membership_status":
		if e.complexity.UserCohort.MembershipStatus == nil {
			break
		}

		return e.complexity.UserCohort.MembershipStatus(childComplexity), true

	case "UserCohort.role":
		if e.complexity.UserCohort.Role == nil {
			break
		}

		return e.complexity.UserCohort.Role(childComplexity), true

	case "UserCohort.updated_at":
		if e.complexity.UserCohort.UpdatedAt == nil {
			break
		}

		return e.complexity.UserCohort.UpdatedAt(childComplexity), true

	case "UserCohort.updated_by":
		if e.complexity.UserCohort.UpdatedBy == nil {
			break
		}

		return e.complexity.UserCohort.UpdatedBy(childComplexity), true

	case "UserCohort.user_cohort_id":
		if e.complexity.UserCohort.UserCohortID == nil {
			break
		}

		return e.complexity.UserCohort.UserCohortID(childComplexity), true

	case "UserCohort.user_id":
		if e.complexity.UserCohort.UserID == nil {
			break
		}

		return e.complexity.UserCohort.UserID(childComplexity), true

	case "UserCohort.user_lsp_id":
		if e.complexity.UserCohort.UserLspID == nil {
			break
		}

		return e.complexity.UserCohort.UserLspID(childComplexity), true

	case "UserCourse.added_by":
		if e.complexity.UserCourse.AddedBy == nil {
			break
		}

		return e.complexity.UserCourse.AddedBy(childComplexity), true

	case "UserCourse.course_id":
		if e.complexity.UserCourse.CourseID == nil {
			break
		}

		return e.complexity.UserCourse.CourseID(childComplexity), true

	case "UserCourse.course_status":
		if e.complexity.UserCourse.CourseStatus == nil {
			break
		}

		return e.complexity.UserCourse.CourseStatus(childComplexity), true

	case "UserCourse.course_type":
		if e.complexity.UserCourse.CourseType == nil {
			break
		}

		return e.complexity.UserCourse.CourseType(childComplexity), true

	case "UserCourse.created_at":
		if e.complexity.UserCourse.CreatedAt == nil {
			break
		}

		return e.complexity.UserCourse.CreatedAt(childComplexity), true

	case "UserCourse.created_by":
		if e.complexity.UserCourse.CreatedBy == nil {
			break
		}

		return e.complexity.UserCourse.CreatedBy(childComplexity), true

	case "UserCourse.end_date":
		if e.complexity.UserCourse.EndDate == nil {
			break
		}

		return e.complexity.UserCourse.EndDate(childComplexity), true

	case "UserCourse.is_mandatory":
		if e.complexity.UserCourse.IsMandatory == nil {
			break
		}

		return e.complexity.UserCourse.IsMandatory(childComplexity), true

	case "UserCourse.lsp_id":
		if e.complexity.UserCourse.LspID == nil {
			break
		}

		return e.complexity.UserCourse.LspID(childComplexity), true

	case "UserCourse.updated_at":
		if e.complexity.UserCourse.UpdatedAt == nil {
			break
		}

		return e.complexity.UserCourse.UpdatedAt(childComplexity), true

	case "UserCourse.updated_by":
		if e.complexity.UserCourse.UpdatedBy == nil {
			break
		}

		return e.complexity.UserCourse.UpdatedBy(childComplexity), true

	case "UserCourse.user_course_id":
		if e.complexity.UserCourse.UserCourseID == nil {
			break
		}

		return e.complexity.UserCourse.UserCourseID(childComplexity), true

	case "UserCourse.user_id":
		if e.complexity.UserCourse.UserID == nil {
			break
		}

		return e.complexity.UserCourse.UserID(childComplexity), true

	case "UserCourse.user_lsp_id":
		if e.complexity.UserCourse.UserLspID == nil {
			break
		}

		return e.complexity.UserCourse.UserLspID(childComplexity), true

	case "UserCourseMapStats.lsp_id":
		if e.complexity.UserCourseMapStats.LspID == nil {
			break
		}

		return e.complexity.UserCourseMapStats.LspID(childComplexity), true

	case "UserCourseMapStats.status_stats":
		if e.complexity.UserCourseMapStats.StatusStats == nil {
			break
		}

		return e.complexity.UserCourseMapStats.StatusStats(childComplexity), true

	case "UserCourseMapStats.type_stats":
		if e.complexity.UserCourseMapStats.TypeStats == nil {
			break
		}

		return e.complexity.UserCourseMapStats.TypeStats(childComplexity), true

	case "UserCourseMapStats.user_id":
		if e.complexity.UserCourseMapStats.UserID == nil {
			break
		}

		return e.complexity.UserCourseMapStats.UserID(childComplexity), true

	case "UserCourseProgress.created_at":
		if e.complexity.UserCourseProgress.CreatedAt == nil {
			break
		}

		return e.complexity.UserCourseProgress.CreatedAt(childComplexity), true

	case "UserCourseProgress.created_by":
		if e.complexity.UserCourseProgress.CreatedBy == nil {
			break
		}

		return e.complexity.UserCourseProgress.CreatedBy(childComplexity), true

	case "UserCourseProgress.status":
		if e.complexity.UserCourseProgress.Status == nil {
			break
		}

		return e.complexity.UserCourseProgress.Status(childComplexity), true

	case "UserCourseProgress.time_stamp":
		if e.complexity.UserCourseProgress.TimeStamp == nil {
			break
		}

		return e.complexity.UserCourseProgress.TimeStamp(childComplexity), true

	case "UserCourseProgress.topic_id":
		if e.complexity.UserCourseProgress.TopicID == nil {
			break
		}

		return e.complexity.UserCourseProgress.TopicID(childComplexity), true

	case "UserCourseProgress.topic_type":
		if e.complexity.UserCourseProgress.TopicType == nil {
			break
		}

		return e.complexity.UserCourseProgress.TopicType(childComplexity), true

	case "UserCourseProgress.updated_at":
		if e.complexity.UserCourseProgress.UpdatedAt == nil {
			break
		}

		return e.complexity.UserCourseProgress.UpdatedAt(childComplexity), true

	case "UserCourseProgress.updated_by":
		if e.complexity.UserCourseProgress.UpdatedBy == nil {
			break
		}

		return e.complexity.UserCourseProgress.UpdatedBy(childComplexity), true

	case "UserCourseProgress.user_course_id":
		if e.complexity.UserCourseProgress.UserCourseID == nil {
			break
		}

		return e.complexity.UserCourseProgress.UserCourseID(childComplexity), true

	case "UserCourseProgress.user_cp_id":
		if e.complexity.UserCourseProgress.UserCpID == nil {
			break
		}

		return e.complexity.UserCourseProgress.UserCpID(childComplexity), true

	case "UserCourseProgress.user_id":
		if e.complexity.UserCourseProgress.UserID == nil {
			break
		}

		return e.complexity.UserCourseProgress.UserID(childComplexity), true

	case "UserCourseProgress.video_progress":
		if e.complexity.UserCourseProgress.VideoProgress == nil {
			break
		}

		return e.complexity.UserCourseProgress.VideoProgress(childComplexity), true

	case "UserExamAttempts.attempt_duration":
		if e.complexity.UserExamAttempts.AttemptDuration == nil {
			break
		}

		return e.complexity.UserExamAttempts.AttemptDuration(childComplexity), true

	case "UserExamAttempts.attempt_no":
		if e.complexity.UserExamAttempts.AttemptNo == nil {
			break
		}

		return e.complexity.UserExamAttempts.AttemptNo(childComplexity), true

	case "UserExamAttempts.attempt_start_time":
		if e.complexity.UserExamAttempts.AttemptStartTime == nil {
			break
		}

		return e.complexity.UserExamAttempts.AttemptStartTime(childComplexity), true

	case "UserExamAttempts.attempt_status":
		if e.complexity.UserExamAttempts.AttemptStatus == nil {
			break
		}

		return e.complexity.UserExamAttempts.AttemptStatus(childComplexity), true

	case "UserExamAttempts.created_at":
		if e.complexity.UserExamAttempts.CreatedAt == nil {
			break
		}

		return e.complexity.UserExamAttempts.CreatedAt(childComplexity), true

	case "UserExamAttempts.created_by":
		if e.complexity.UserExamAttempts.CreatedBy == nil {
			break
		}

		return e.complexity.UserExamAttempts.CreatedBy(childComplexity), true

	case "UserExamAttempts.exam_id":
		if e.complexity.UserExamAttempts.ExamID == nil {
			break
		}

		return e.complexity.UserExamAttempts.ExamID(childComplexity), true

	case "UserExamAttempts.updated_at":
		if e.complexity.UserExamAttempts.UpdatedAt == nil {
			break
		}

		return e.complexity.UserExamAttempts.UpdatedAt(childComplexity), true

	case "UserExamAttempts.updated_by":
		if e.complexity.UserExamAttempts.UpdatedBy == nil {
			break
		}

		return e.complexity.UserExamAttempts.UpdatedBy(childComplexity), true

	case "UserExamAttempts.user_course_id":
		if e.complexity.UserExamAttempts.UserCourseID == nil {
			break
		}

		return e.complexity.UserExamAttempts.UserCourseID(childComplexity), true

	case "UserExamAttempts.user_cp_id":
		if e.complexity.UserExamAttempts.UserCpID == nil {
			break
		}

		return e.complexity.UserExamAttempts.UserCpID(childComplexity), true

	case "UserExamAttempts.user_ea_id":
		if e.complexity.UserExamAttempts.UserEaID == nil {
			break
		}

		return e.complexity.UserExamAttempts.UserEaID(childComplexity), true

	case "UserExamAttempts.user_id":
		if e.complexity.UserExamAttempts.UserID == nil {
			break
		}

		return e.complexity.UserExamAttempts.UserID(childComplexity), true

	case "UserExamAttempts.user_lsp_id":
		if e.complexity.UserExamAttempts.UserLspID == nil {
			break
		}

		return e.complexity.UserExamAttempts.UserLspID(childComplexity), true

	case "UserExamProgress.answer":
		if e.complexity.UserExamProgress.Answer == nil {
			break
		}

		return e.complexity.UserExamProgress.Answer(childComplexity), true

	case "UserExamProgress.correct_answer":
		if e.complexity.UserExamProgress.CorrectAnswer == nil {
			break
		}

		return e.complexity.UserExamProgress.CorrectAnswer(childComplexity), true

	case "UserExamProgress.created_at":
		if e.complexity.UserExamProgress.CreatedAt == nil {
			break
		}

		return e.complexity.UserExamProgress.CreatedAt(childComplexity), true

	case "UserExamProgress.created_by":
		if e.complexity.UserExamProgress.CreatedBy == nil {
			break
		}

		return e.complexity.UserExamProgress.CreatedBy(childComplexity), true

	case "UserExamProgress.q_attempt_status":
		if e.complexity.UserExamProgress.QAttemptStatus == nil {
			break
		}

		return e.complexity.UserExamProgress.QAttemptStatus(childComplexity), true

	case "UserExamProgress.question_id":
		if e.complexity.UserExamProgress.QuestionID == nil {
			break
		}

		return e.complexity.UserExamProgress.QuestionID(childComplexity), true

	case "UserExamProgress.question_type":
		if e.complexity.UserExamProgress.QuestionType == nil {
			break
		}

		return e.complexity.UserExamProgress.QuestionType(childComplexity), true

	case "UserExamProgress.section_id":
		if e.complexity.UserExamProgress.SectionID == nil {
			break
		}

		return e.complexity.UserExamProgress.SectionID(childComplexity), true

	case "UserExamProgress.sr_no":
		if e.complexity.UserExamProgress.SrNo == nil {
			break
		}

		return e.complexity.UserExamProgress.SrNo(childComplexity), true

	case "UserExamProgress.total_time_spent":
		if e.complexity.UserExamProgress.TotalTimeSpent == nil {
			break
		}

		return e.complexity.UserExamProgress.TotalTimeSpent(childComplexity), true

	case "UserExamProgress.updated_at":
		if e.complexity.UserExamProgress.UpdatedAt == nil {
			break
		}

		return e.complexity.UserExamProgress.UpdatedAt(childComplexity), true

	case "UserExamProgress.updated_by":
		if e.complexity.UserExamProgress.UpdatedBy == nil {
			break
		}

		return e.complexity.UserExamProgress.UpdatedBy(childComplexity), true

	case "UserExamProgress.user_cp_id":
		if e.complexity.UserExamProgress.UserCpID == nil {
			break
		}

		return e.complexity.UserExamProgress.UserCpID(childComplexity), true

	case "UserExamProgress.user_ea_id":
		if e.complexity.UserExamProgress.UserEaID == nil {
			break
		}

		return e.complexity.UserExamProgress.UserEaID(childComplexity), true

	case "UserExamProgress.user_ep_id":
		if e.complexity.UserExamProgress.UserEpID == nil {
			break
		}

		return e.complexity.UserExamProgress.UserEpID(childComplexity), true

	case "UserExamProgress.user_id":
		if e.complexity.UserExamProgress.UserID == nil {
			break
		}

		return e.complexity.UserExamProgress.UserID(childComplexity), true

	case "UserExamProgress.user_lsp_id":
		if e.complexity.UserExamProgress.UserLspID == nil {
			break
		}

		return e.complexity.UserExamProgress.UserLspID(childComplexity), true

	case "UserExamResult.correct_answers":
		if e.complexity.UserExamResult.CorrectAnswers == nil {
			break
		}

		return e.complexity.UserExamResult.CorrectAnswers(childComplexity), true

	case "UserExamResult.created_at":
		if e.complexity.UserExamResult.CreatedAt == nil {
			break
		}

		return e.complexity.UserExamResult.CreatedAt(childComplexity), true

	case "UserExamResult.created_by":
		if e.complexity.UserExamResult.CreatedBy == nil {
			break
		}

		return e.complexity.UserExamResult.CreatedBy(childComplexity), true

	case "UserExamResult.result_status":
		if e.complexity.UserExamResult.ResultStatus == nil {
			break
		}

		return e.complexity.UserExamResult.ResultStatus(childComplexity), true

	case "UserExamResult.updated_at":
		if e.complexity.UserExamResult.UpdatedAt == nil {
			break
		}

		return e.complexity.UserExamResult.UpdatedAt(childComplexity), true

	case "UserExamResult.updated_by":
		if e.complexity.UserExamResult.UpdatedBy == nil {
			break
		}

		return e.complexity.UserExamResult.UpdatedBy(childComplexity), true

	case "UserExamResult.user_ea_id":
		if e.complexity.UserExamResult.UserEaID == nil {
			break
		}

		return e.complexity.UserExamResult.UserEaID(childComplexity), true

	case "UserExamResult.user_er_id":
		if e.complexity.UserExamResult.UserErID == nil {
			break
		}

		return e.complexity.UserExamResult.UserErID(childComplexity), true

	case "UserExamResult.user_id":
		if e.complexity.UserExamResult.UserID == nil {
			break
		}

		return e.complexity.UserExamResult.UserID(childComplexity), true

	case "UserExamResult.user_score":
		if e.complexity.UserExamResult.UserScore == nil {
			break
		}

		return e.complexity.UserExamResult.UserScore(childComplexity), true

	case "UserExamResult.wrong_answers":
		if e.complexity.UserExamResult.WrongAnswers == nil {
			break
		}

		return e.complexity.UserExamResult.WrongAnswers(childComplexity), true

	case "UserExamResultInfo.results":
		if e.complexity.UserExamResultInfo.Results == nil {
			break
		}

		return e.complexity.UserExamResultInfo.Results(childComplexity), true

	case "UserExamResultInfo.user_ea_id":
		if e.complexity.UserExamResultInfo.UserEaID == nil {
			break
		}

		return e.complexity.UserExamResultInfo.UserEaID(childComplexity), true

	case "UserExamResultInfo.user_id":
		if e.complexity.UserExamResultInfo.UserID == nil {
			break
		}

		return e.complexity.UserExamResultInfo.UserID(childComplexity), true

	case "UserLanguageMap.created_at":
		if e.complexity.UserLanguageMap.CreatedAt == nil {
			break
		}

		return e.complexity.UserLanguageMap.CreatedAt(childComplexity), true

	case "UserLanguageMap.created_by":
		if e.complexity.UserLanguageMap.CreatedBy == nil {
			break
		}

		return e.complexity.UserLanguageMap.CreatedBy(childComplexity), true

	case "UserLanguageMap.is_active":
		if e.complexity.UserLanguageMap.IsActive == nil {
			break
		}

		return e.complexity.UserLanguageMap.IsActive(childComplexity), true

	case "UserLanguageMap.is_base_language":
		if e.complexity.UserLanguageMap.IsBaseLanguage == nil {
			break
		}

		return e.complexity.UserLanguageMap.IsBaseLanguage(childComplexity), true

	case "UserLanguageMap.language":
		if e.complexity.UserLanguageMap.Language == nil {
			break
		}

		return e.complexity.UserLanguageMap.Language(childComplexity), true

	case "UserLanguageMap.updated_at":
		if e.complexity.UserLanguageMap.UpdatedAt == nil {
			break
		}

		return e.complexity.UserLanguageMap.UpdatedAt(childComplexity), true

	case "UserLanguageMap.updated_by":
		if e.complexity.UserLanguageMap.UpdatedBy == nil {
			break
		}

		return e.complexity.UserLanguageMap.UpdatedBy(childComplexity), true

	case "UserLanguageMap.user_id":
		if e.complexity.UserLanguageMap.UserID == nil {
			break
		}

		return e.complexity.UserLanguageMap.UserID(childComplexity), true

	case "UserLanguageMap.user_language_id":
		if e.complexity.UserLanguageMap.UserLanguageID == nil {
			break
		}

		return e.complexity.UserLanguageMap.UserLanguageID(childComplexity), true

	case "UserLanguageMap.user_lsp_id":
		if e.complexity.UserLanguageMap.UserLspID == nil {
			break
		}

		return e.complexity.UserLanguageMap.UserLspID(childComplexity), true

	case "UserLspMap.created_at":
		if e.complexity.UserLspMap.CreatedAt == nil {
			break
		}

		return e.complexity.UserLspMap.CreatedAt(childComplexity), true

	case "UserLspMap.created_by":
		if e.complexity.UserLspMap.CreatedBy == nil {
			break
		}

		return e.complexity.UserLspMap.CreatedBy(childComplexity), true

	case "UserLspMap.lsp_id":
		if e.complexity.UserLspMap.LspID == nil {
			break
		}

		return e.complexity.UserLspMap.LspID(childComplexity), true

	case "UserLspMap.status":
		if e.complexity.UserLspMap.Status == nil {
			break
		}

		return e.complexity.UserLspMap.Status(childComplexity), true

	case "UserLspMap.updated_at":
		if e.complexity.UserLspMap.UpdatedAt == nil {
			break
		}

		return e.complexity.UserLspMap.UpdatedAt(childComplexity), true

	case "UserLspMap.updated_by":
		if e.complexity.UserLspMap.UpdatedBy == nil {
			break
		}

		return e.complexity.UserLspMap.UpdatedBy(childComplexity), true

	case "UserLspMap.user_id":
		if e.complexity.UserLspMap.UserID == nil {
			break
		}

		return e.complexity.UserLspMap.UserID(childComplexity), true

	case "UserLspMap.user_lsp_id":
		if e.complexity.UserLspMap.UserLspID == nil {
			break
		}

		return e.complexity.UserLspMap.UserLspID(childComplexity), true

	case "UserNotes.course_id":
		if e.complexity.UserNotes.CourseID == nil {
			break
		}

		return e.complexity.UserNotes.CourseID(childComplexity), true

	case "UserNotes.created_at":
		if e.complexity.UserNotes.CreatedAt == nil {
			break
		}

		return e.complexity.UserNotes.CreatedAt(childComplexity), true

	case "UserNotes.created_by":
		if e.complexity.UserNotes.CreatedBy == nil {
			break
		}

		return e.complexity.UserNotes.CreatedBy(childComplexity), true

	case "UserNotes.details":
		if e.complexity.UserNotes.Details == nil {
			break
		}

		return e.complexity.UserNotes.Details(childComplexity), true

	case "UserNotes.is_active":
		if e.complexity.UserNotes.IsActive == nil {
			break
		}

		return e.complexity.UserNotes.IsActive(childComplexity), true

	case "UserNotes.module_id":
		if e.complexity.UserNotes.ModuleID == nil {
			break
		}

		return e.complexity.UserNotes.ModuleID(childComplexity), true

	case "UserNotes.sequence":
		if e.complexity.UserNotes.Sequence == nil {
			break
		}

		return e.complexity.UserNotes.Sequence(childComplexity), true

	case "UserNotes.status":
		if e.complexity.UserNotes.Status == nil {
			break
		}

		return e.complexity.UserNotes.Status(childComplexity), true

	case "UserNotes.topic_id":
		if e.complexity.UserNotes.TopicID == nil {
			break
		}

		return e.complexity.UserNotes.TopicID(childComplexity), true

	case "UserNotes.updated_at":
		if e.complexity.UserNotes.UpdatedAt == nil {
			break
		}

		return e.complexity.UserNotes.UpdatedAt(childComplexity), true

	case "UserNotes.updated_by":
		if e.complexity.UserNotes.UpdatedBy == nil {
			break
		}

		return e.complexity.UserNotes.UpdatedBy(childComplexity), true

	case "UserNotes.user_id":
		if e.complexity.UserNotes.UserID == nil {
			break
		}

		return e.complexity.UserNotes.UserID(childComplexity), true

	case "UserNotes.user_lsp_id":
		if e.complexity.UserNotes.UserLspID == nil {
			break
		}

		return e.complexity.UserNotes.UserLspID(childComplexity), true

	case "UserNotes.user_notes_id":
		if e.complexity.UserNotes.UserNotesID == nil {
			break
		}

		return e.complexity.UserNotes.UserNotesID(childComplexity), true

	case "UserOrganizationMap.created_at":
		if e.complexity.UserOrganizationMap.CreatedAt == nil {
			break
		}

		return e.complexity.UserOrganizationMap.CreatedAt(childComplexity), true

	case "UserOrganizationMap.created_by":
		if e.complexity.UserOrganizationMap.CreatedBy == nil {
			break
		}

		return e.complexity.UserOrganizationMap.CreatedBy(childComplexity), true

	case "UserOrganizationMap.employee_id":
		if e.complexity.UserOrganizationMap.EmployeeID == nil {
			break
		}

		return e.complexity.UserOrganizationMap.EmployeeID(childComplexity), true

	case "UserOrganizationMap.is_active":
		if e.complexity.UserOrganizationMap.IsActive == nil {
			break
		}

		return e.complexity.UserOrganizationMap.IsActive(childComplexity), true

	case "UserOrganizationMap.organization_id":
		if e.complexity.UserOrganizationMap.OrganizationID == nil {
			break
		}

		return e.complexity.UserOrganizationMap.OrganizationID(childComplexity), true

	case "UserOrganizationMap.organization_role":
		if e.complexity.UserOrganizationMap.OrganizationRole == nil {
			break
		}

		return e.complexity.UserOrganizationMap.OrganizationRole(childComplexity), true

	case "UserOrganizationMap.updated_at":
		if e.complexity.UserOrganizationMap.UpdatedAt == nil {
			break
		}

		return e.complexity.UserOrganizationMap.UpdatedAt(childComplexity), true

	case "UserOrganizationMap.updated_by":
		if e.complexity.UserOrganizationMap.UpdatedBy == nil {
			break
		}

		return e.complexity.UserOrganizationMap.UpdatedBy(childComplexity), true

	case "UserOrganizationMap.user_id":
		if e.complexity.UserOrganizationMap.UserID == nil {
			break
		}

		return e.complexity.UserOrganizationMap.UserID(childComplexity), true

	case "UserOrganizationMap.user_lsp_id":
		if e.complexity.UserOrganizationMap.UserLspID == nil {
			break
		}

		return e.complexity.UserOrganizationMap.UserLspID(childComplexity), true

	case "UserOrganizationMap.user_organization_id":
		if e.complexity.UserOrganizationMap.UserOrganizationID == nil {
			break
		}

		return e.complexity.UserOrganizationMap.UserOrganizationID(childComplexity), true

	case "UserPreference.created_at":
		if e.complexity.UserPreference.CreatedAt == nil {
			break
		}

		return e.complexity.UserPreference.CreatedAt(childComplexity), true

	case "UserPreference.created_by":
		if e.complexity.UserPreference.CreatedBy == nil {
			break
		}

		return e.complexity.UserPreference.CreatedBy(childComplexity), true

	case "UserPreference.is_active":
		if e.complexity.UserPreference.IsActive == nil {
			break
		}

		return e.complexity.UserPreference.IsActive(childComplexity), true

	case "UserPreference.is_base":
		if e.complexity.UserPreference.IsBase == nil {
			break
		}

		return e.complexity.UserPreference.IsBase(childComplexity), true

	case "UserPreference.sub_category":
		if e.complexity.UserPreference.SubCategory == nil {
			break
		}

		return e.complexity.UserPreference.SubCategory(childComplexity), true

	case "UserPreference.updated_at":
		if e.complexity.UserPreference.UpdatedAt == nil {
			break
		}

		return e.complexity.UserPreference.UpdatedAt(childComplexity), true

	case "UserPreference.updated_by":
		if e.complexity.UserPreference.UpdatedBy == nil {
			break
		}

		return e.complexity.UserPreference.UpdatedBy(childComplexity), true

	case "UserPreference.user_id":
		if e.complexity.UserPreference.UserID == nil {
			break
		}

		return e.complexity.UserPreference.UserID(childComplexity), true

	case "UserPreference.user_lsp_id":
		if e.complexity.UserPreference.UserLspID == nil {
			break
		}

		return e.complexity.UserPreference.UserLspID(childComplexity), true

	case "UserPreference.user_preference_id":
		if e.complexity.UserPreference.UserPreferenceID == nil {
			break
		}

		return e.complexity.UserPreference.UserPreferenceID(childComplexity), true

	case "UserQuizAttempt.created_at":
		if e.complexity.UserQuizAttempt.CreatedAt == nil {
			break
		}

		return e.complexity.UserQuizAttempt.CreatedAt(childComplexity), true

	case "UserQuizAttempt.created_by":
		if e.complexity.UserQuizAttempt.CreatedBy == nil {
			break
		}

		return e.complexity.UserQuizAttempt.CreatedBy(childComplexity), true

	case "UserQuizAttempt.is_active":
		if e.complexity.UserQuizAttempt.IsActive == nil {
			break
		}

		return e.complexity.UserQuizAttempt.IsActive(childComplexity), true

	case "UserQuizAttempt.quiz_attempt":
		if e.complexity.UserQuizAttempt.QuizAttempt == nil {
			break
		}

		return e.complexity.UserQuizAttempt.QuizAttempt(childComplexity), true

	case "UserQuizAttempt.quiz_id":
		if e.complexity.UserQuizAttempt.QuizID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.QuizID(childComplexity), true

	case "UserQuizAttempt.result":
		if e.complexity.UserQuizAttempt.Result == nil {
			break
		}

		return e.complexity.UserQuizAttempt.Result(childComplexity), true

	case "UserQuizAttempt.topic_id":
		if e.complexity.UserQuizAttempt.TopicID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.TopicID(childComplexity), true

	case "UserQuizAttempt.updated_at":
		if e.complexity.UserQuizAttempt.UpdatedAt == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UpdatedAt(childComplexity), true

	case "UserQuizAttempt.updated_by":
		if e.complexity.UserQuizAttempt.UpdatedBy == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UpdatedBy(childComplexity), true

	case "UserQuizAttempt.user_course_id":
		if e.complexity.UserQuizAttempt.UserCourseID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UserCourseID(childComplexity), true

	case "UserQuizAttempt.user_cp_id":
		if e.complexity.UserQuizAttempt.UserCpID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UserCpID(childComplexity), true

	case "UserQuizAttempt.user_id":
		if e.complexity.UserQuizAttempt.UserID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UserID(childComplexity), true

	case "UserQuizAttempt.user_qa_id":
		if e.complexity.UserQuizAttempt.UserQaID == nil {
			break
		}

		return e.complexity.UserQuizAttempt.UserQaID(childComplexity), true

	case "UserRole.created_at":
		if e.complexity.UserRole.CreatedAt == nil {
			break
		}

		return e.complexity.UserRole.CreatedAt(childComplexity), true

	case "UserRole.created_by":
		if e.complexity.UserRole.CreatedBy == nil {
			break
		}

		return e.complexity.UserRole.CreatedBy(childComplexity), true

	case "UserRole.is_active":
		if e.complexity.UserRole.IsActive == nil {
			break
		}

		return e.complexity.UserRole.IsActive(childComplexity), true

	case "UserRole.role":
		if e.complexity.UserRole.Role == nil {
			break
		}

		return e.complexity.UserRole.Role(childComplexity), true

	case "UserRole.updated_at":
		if e.complexity.UserRole.UpdatedAt == nil {
			break
		}

		return e.complexity.UserRole.UpdatedAt(childComplexity), true

	case "UserRole.updated_by":
		if e.complexity.UserRole.UpdatedBy == nil {
			break
		}

		return e.complexity.UserRole.UpdatedBy(childComplexity), true

	case "UserRole.user_id":
		if e.complexity.UserRole.UserID == nil {
			break
		}

		return e.complexity.UserRole.UserID(childComplexity), true

	case "UserRole.user_lsp_id":
		if e.complexity.UserRole.UserLspID == nil {
			break
		}

		return e.complexity.UserRole.UserLspID(childComplexity), true

	case "UserRole.user_role_id":
		if e.complexity.UserRole.UserRoleID == nil {
			break
		}

		return e.complexity.UserRole.UserRoleID(childComplexity), true

	case "Vendor.address":
		if e.complexity.Vendor.Address == nil {
			break
		}

		return e.complexity.Vendor.Address(childComplexity), true

	case "Vendor.created_at":
		if e.complexity.Vendor.CreatedAt == nil {
			break
		}

		return e.complexity.Vendor.CreatedAt(childComplexity), true

	case "Vendor.created_by":
		if e.complexity.Vendor.CreatedBy == nil {
			break
		}

		return e.complexity.Vendor.CreatedBy(childComplexity), true

	case "Vendor.description":
		if e.complexity.Vendor.Description == nil {
			break
		}

		return e.complexity.Vendor.Description(childComplexity), true

	case "Vendor.facebook_url":
		if e.complexity.Vendor.FacebookURL == nil {
			break
		}

		return e.complexity.Vendor.FacebookURL(childComplexity), true

	case "Vendor.instagram_url":
		if e.complexity.Vendor.InstagramURL == nil {
			break
		}

		return e.complexity.Vendor.InstagramURL(childComplexity), true

	case "Vendor.level":
		if e.complexity.Vendor.Level == nil {
			break
		}

		return e.complexity.Vendor.Level(childComplexity), true

	case "Vendor.linkedin_url":
		if e.complexity.Vendor.LinkedinURL == nil {
			break
		}

		return e.complexity.Vendor.LinkedinURL(childComplexity), true

	case "Vendor.name":
		if e.complexity.Vendor.Name == nil {
			break
		}

		return e.complexity.Vendor.Name(childComplexity), true

	case "Vendor.photo_url":
		if e.complexity.Vendor.PhotoURL == nil {
			break
		}

		return e.complexity.Vendor.PhotoURL(childComplexity), true

	case "Vendor.status":
		if e.complexity.Vendor.Status == nil {
			break
		}

		return e.complexity.Vendor.Status(childComplexity), true

	case "Vendor.twitter_url":
		if e.complexity.Vendor.TwitterURL == nil {
			break
		}

		return e.complexity.Vendor.TwitterURL(childComplexity), true

	case "Vendor.type":
		if e.complexity.Vendor.Type == nil {
			break
		}

		return e.complexity.Vendor.Type(childComplexity), true

	case "Vendor.updated_at":
		if e.complexity.Vendor.UpdatedAt == nil {
			break
		}

		return e.complexity.Vendor.UpdatedAt(childComplexity), true

	case "Vendor.updated_by":
		if e.complexity.Vendor.UpdatedBy == nil {
			break
		}

		return e.complexity.Vendor.UpdatedBy(childComplexity), true

	case "Vendor.users":
		if e.complexity.Vendor.Users == nil {
			break
		}

		return e.complexity.Vendor.Users(childComplexity), true

	case "Vendor.vendorId":
		if e.complexity.Vendor.VendorID == nil {
			break
		}

		return e.complexity.Vendor.VendorID(childComplexity), true

	case "Vendor.website":
		if e.complexity.Vendor.Website == nil {
			break
		}

		return e.complexity.Vendor.Website(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCohortMainInput,
		ec.unmarshalInputCourseMapFilters,
		ec.unmarshalInputExperienceInput,
		ec.unmarshalInputLearningSpaceInput,
		ec.unmarshalInputOrganizationInput,
		ec.unmarshalInputOrganizationUnitInput,
		ec.unmarshalInputSMEInput,
		ec.unmarshalInputSampleFile,
		ec.unmarshalInputUserBookmarkInput,
		ec.unmarshalInputUserCohortInput,
		ec.unmarshalInputUserCourseInput,
		ec.unmarshalInputUserCourseMapStatsInput,
		ec.unmarshalInputUserCourseProgressInput,
		ec.unmarshalInputUserExamAttemptsInput,
		ec.unmarshalInputUserExamProgressInput,
		ec.unmarshalInputUserExamResultDetails,
		ec.unmarshalInputUserExamResultInput,
		ec.unmarshalInputUserFilters,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserLanguageMapInput,
		ec.unmarshalInputUserLspMapInput,
		ec.unmarshalInputUserNotesInput,
		ec.unmarshalInputUserOrganizationMapInput,
		ec.unmarshalInputUserPreferenceInput,
		ec.unmarshalInputUserQuizAttemptInput,
		ec.unmarshalInputUserRoleInput,
		ec.unmarshalInputVendorInput,
		ec.unmarshalInputVendorProfile,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `scalar Upload

type User {
  id: ID
  first_name: String!
  last_name: String!
  status: String!
  role: String!
  is_verified: Boolean!
  is_active: Boolean!
  gender: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
  email: String!
  phone: String!
  photo_url: String
}

input UserInput {
  id: ID
  first_name: String!
  last_name: String!
  status: String!
  role: String!
  is_verified: Boolean!
  is_active: Boolean!
  gender: String!
  created_by: String
  updated_by: String
  email: String!
  phone: String!
  Photo: Upload
  photo_url: String
}

input UserLspMapInput {
  user_lsp_id: ID
  user_id: String!
  lsp_id: String!
  status: String!
  created_by: String
  updated_by: String
}

type UserLspMap {
  user_lsp_id: ID
  user_id: String!
  lsp_id: String!
  status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserOrganizationMapInput {
  user_organization_id: ID
  user_id: String!
  user_lsp_id: String!
  organization_id: String!
  organization_role: String!
  is_active: Boolean!
  employee_id: String!
  created_by: String
  updated_by: String
}

type UserOrganizationMap {
  user_organization_id: ID
  user_id: String!
  user_lsp_id: String!
  organization_id: String!
  organization_role: String!
  is_active: Boolean!
  employee_id: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserLanguageMapInput {
  user_id: String!
  user_lsp_id: String!
  language: String!
  is_base_language: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserLanguageMap {
  user_language_id: ID
  user_id: String!
  user_lsp_id: String!
  language: String!
  is_base_language: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserPreferenceInput {
  user_preference_id: ID
  user_id: String!
  user_lsp_id: String!
  sub_category: String!
  is_base: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserPreference {
  user_preference_id: ID
  user_id: String!
  user_lsp_id: String!
  sub_category: String!
  is_base: Boolean!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserRoleInput {
  user_role_id: ID
  user_id: String!
  user_lsp_id: String!
  role: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserRole {
  user_role_id: ID
  user_id: String!
  user_lsp_id: String!
  role: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCohortInput {
  user_cohort_id: ID
  user_id: String!
  user_lsp_id: String!
  cohort_id: String!
  added_by: String!
  membership_status: String!
  role: String!
  created_by: String
  updated_by: String
}

type UserCohort {
  user_cohort_id: ID
  user_id: String!
  user_lsp_id: String!
  cohort_id: String!
  added_by: String!
  membership_status: String!
  role: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCourseInput {
  user_course_id: ID
  user_id: String!
  lsp_id: String
  user_lsp_id: String!
  course_id: String!
  course_type: String!
  added_by: String!
  is_mandatory: Boolean!
  end_date: String
  course_status: String!
  created_by: String
  updated_by: String
}

type UserCourse {
  user_course_id: ID
  user_id: String!
  lsp_id: String
  user_lsp_id: String!
  course_id: String!
  course_type: String!
  added_by: String!
  is_mandatory: Boolean!
  end_date: String
  course_status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserCourseProgressInput {
  user_cp_id: ID
  user_id: String!
  user_course_id: String!
  topic_id: String!
  topic_type: String!
  status: String!
  video_progress: String!
  time_stamp: String!
  created_by: String
  updated_by: String
}

type UserCourseProgress {
  user_cp_id: ID
  user_id: String!
  user_course_id: String!
  topic_id: String!
  topic_type: String!
  status: String!
  video_progress: String!
  time_stamp: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserQuizAttemptInput {
  user_qa_id: ID
  user_id: String!
  user_cp_id: String!
  user_course_id: String!
  quiz_id: String!
  quiz_attempt: Int!
  topic_id: String!
  result: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserQuizAttempt {
  user_qa_id: ID
  user_id: String!
  user_cp_id: String!
  user_course_id: String!
  quiz_id: String!
  quiz_attempt: Int!
  topic_id: String!
  result: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserBookmarkInput {
  user_bm_id: ID
  user_id: String!
  user_lsp_id: String!
  user_course_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  name: String!
  time_stamp: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserBookmark {
  user_bm_id: ID
  user_id: String!
  user_lsp_id: String!
  user_course_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  name: String!
  time_stamp: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserNotesInput {
  user_notes_id: ID
  user_id: String!
  user_lsp_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  sequence: Int!
  status: String!
  details: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
}

type UserNotes {
  user_notes_id: ID
  user_id: String!
  user_lsp_id: String!
  course_id: String!
  module_id: String!
  topic_id: String!
  sequence: Int!
  status: String!
  details: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamAttemptsInput {
  user_ea_id: ID
  user_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  user_course_id: String!
  exam_id: String!
  attempt_no: Int!
  attempt_status: String!
  attempt_start_time: String!
  attempt_duration: String!
  created_by: String
  updated_by: String
}

type UserExamAttempts {
  user_ea_id: ID
  user_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  user_course_id: String!
  exam_id: String!
  attempt_no: Int!
  attempt_status: String!
  attempt_start_time: String!
  attempt_duration: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamProgressInput {
  user_ep_id: ID
  user_id: String!
  user_ea_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  sr_no: Int!
  question_id: String!
  question_type: String!
  answer: String!
  q_attempt_status: String!
  total_time_spent: String!
  correct_answer: String!
  section_id: String!
  created_by: String
  updated_by: String
}

type UserExamProgress {
  user_ep_id: ID
  user_id: String!
  user_ea_id: String!
  user_lsp_id: String!
  user_cp_id: String!
  sr_no: Int!
  question_id: String!
  question_type: String!
  answer: String!
  q_attempt_status: String!
  total_time_spent: String!
  correct_answer: String!
  section_id: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

input UserExamResultInput {
  user_er_id: ID
  user_id: String!
  user_ea_id: String!
  user_score: Int!
  correct_answers: Int!
  wrong_answers: Int!
  result_status: String!
  created_by: String
  updated_by: String
}

type UserExamResult {
  user_er_id: ID
  user_id: String!
  user_ea_id: String!
  user_score: Int!
  correct_answers: Int!
  wrong_answers: Int!
  result_status: String!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
}

type PaginatedUsers {
  users: [User]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedCourseMaps {
  user_courses: [UserCourse]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedNotes {
  notes: [UserNotes]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedBookmarks {
  bookmarks: [UserBookmark]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedCohorts {
  cohorts: [UserCohort]
  pageCursor: String
  direction: String
  pageSize: Int
}

input CohortMainInput {
  cohort_id: ID
  name: String!
  description: String!
  lsp_id: String!
  code: String!
  status: String!
  type: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  size: Int!
  image: Upload
  imageUrl: String
}

type CohortMain {
  cohort_id: ID
  name: String!
  description: String!
  lsp_id: String!
  code: String!
  status: String!
  type: String!
  is_active: Boolean!
  created_by: String
  updated_by: String
  created_at: String!
  updated_at: String!
  size: Int!
  imageUrl: String
}

type PaginatedCohortsMain {
  cohorts: [CohortMain]
  pageCursor: String
  direction: String
  pageSize: Int
}

type PaginatedUserLspMaps {
  user_lsp_maps: [UserLspMap]
  pageCursor: String
  direction: String
  pageSize: Int
}

input OrganizationInput {
  org_id: ID
  name: String!
  logo_url: String
  industry: String!
  type: String!
  subdomain: String!
  employee_count: Int!
  website: String!
  linkedin_url: String
  facebook_url: String
  twitter_url: String
  status: String!
  logo: Upload
}

type Organization {
  org_id: ID
  name: String!
  logo_url: String
  industry: String!
  type: String!
  subdomain: String!
  employee_count: Int!
  website: String!
  linkedin_url: String
  facebook_url: String
  twitter_url: String
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input OrganizationUnitInput {
  ou_id: ID
  org_id: String!
  emp_count: Int!
  address: String!
  city: String!
  state: String!
  country: String!
  postal_code: String!
  status: String!
  created_by: String
  updated_by: String
}

type OrganizationUnit {
  ou_id: ID
  org_id: String!
  emp_count: Int!
  address: String!
  city: String!
  state: String!
  country: String!
  postal_code: String!
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input LearningSpaceInput {
  lsp_id: ID
  type: String!
  org_id: String!
  ou_id: String!
  name: String!
  logo_url: String
  logo: Upload
  profile_url: String
  profile: Upload
  no_users: Int!
  owners: [String]
  is_default: Boolean!
  status: String!
  created_by: String
  updated_by: String
}

type LearningSpace {
  lsp_id: ID
  org_id: String!
  ou_id: String!
  #type: String!
  name: String!
  logo_url: String
  profile_url: String
  no_users: Int!
  owners: [String]
  is_default: Boolean!
  status: String!
  created_at: String!
  updated_at: String!
  created_by: String
  updated_by: String
}

input UserExamResultDetails {
  user_id: String!
  user_ea_id: String!
}

type UserExamResultInfo {
  user_id: String!
  user_ea_id: String!
  results: [UserExamResult]
}

input UserFilters {
  email: String
  nameSearch: String
  role: String
  status: String
}

input CourseMapFilters {
  lsp_id: [String]
  is_mandatory: Boolean
  status: String
  type: String
}

type Count {
  name: String!
  count: Int!
}

input UserCourseMapStatsInput {
  lsp_id: String
  user_id: String
  course_type: [String]
  course_status: [String]
  is_mandatory: Boolean
}

type UserCourseMapStats {
  lsp_id: String
  user_id: String
  type_stats: [Count]
  status_stats: [Count]
}

type CourseConsumptionStats {
  ID: String
  LspId: String
  CourseId: String
  Category: String
  SubCategory: String
  Owner: String
  Duration: Int
  TotalLearners: Int
  ActiveLearners: Int
  CompletedLearners: Int
  ExpectedCompletionTime: Int
  AverageCompletionTime: Int
  AverageComplianceScore: Int
  CreatedAt: Int
  UpdatedAt: Int
  CreatedBy: String
  UpdatedBy: String
}

type PaginatedCCStats {
  stats: [CourseConsumptionStats]
  pageCursor: String
  direction: String
  pageSize: Int
}

type CourseViews {
  seconds: Int
  created_at: String
  lsp_id: String
  user_ids: [String]
  date_string: String
}


input VendorInput {
  lsp_id: String
  name: String
  level: String
  vendor_id: String
  type: String
  photo: Upload
  address: String
  website: String
  facebook_url: String
  instagram_url: String
  twitter_url: String
  linkedin_url: String
  users: [String]
  description: String
	status: String
}

type Vendor {
  vendorId: String!
	type: String!
	level: String!
	name: String!
  description: String
	photo_url: String
	address: String
  users: [String]
	website: String
	facebook_url: String
	instagram_url: String
	twitter_url: String
	linkedin_url: String
	created_at: String
	created_by: String
	updated_at: String
	updated_by: String
	status: String
}

type PaginatedVendors {
  vendors: [Vendor]
  pageCursor: String
  direction: String
  pageSize: Int
}

input SMEInput {
  description: String!
  is_applicable: Boolean!
  expertise: [String]
  languages: [String]
  output_deliveries: [String]
  sample_files: [String]
  profiles: [String]!
	Status: String!
}

input VendorProfile {
  vendor_id: String!
  first_name: String!
  last_name: String
  email: String!
  phone: Int!
  photo: Upload
  description: String
  languages: [String]
  SME_expertise: [String]
  Classroom_expertise: [String]
  experience: Int
  is_speaker: Boolean!
	status: String!
}

input ExperienceInput {
  vendor_id: String!
  pf_id: String!
  title: String!
  company_name: String!
  employement_type: String!
  location: String!
  location_type: String!
  start_date: Int!
  end_date: Int
	status: String!
}

type ExperienceVendor {
  ExpId: String!
  VendorId: String!
  PfId: String!
  StartDate: Int!
  EndDate: Int
  Title: String!
  Location: String!
  LocationType: String!
  EmployementType: String!
  CompanyName: String!
  CreatedAt: String
	CreatedBy: String
	UpdatedAt: String
	UpdatedBy: String
	Status: String!
}

type InviteResponse {
  email: String
  message: String!
}

input SampleFile {
  File: Upload!
  Name: String!
  Description: String!
  Pricing: String!
  FileType: String
	Status: String!
}

type Query {
  logout: Boolean
  getUserLspMapsByLspId(
    lsp_id: String!
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedUserLspMaps
  getUsersForAdmin(
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    filters: UserFilters
  ): PaginatedUsers
  getUserDetails(user_ids: [String]): [User]
  getUserOrganizations(user_id: String!): [UserOrganizationMap]
  getUserOrgDetails(user_id: String!, user_lsp_id: String!): UserOrganizationMap
  getUserPreferences(user_id: String!): [UserPreference]
  getUserPreferenceForLsp(
    user_id: String!
    user_lsp_id: String!
  ): UserPreference
  getUserLsps(user_id: String!): [UserLspMap]
  getUserLspByLspId(user_id: String!, lsp_id: String!): UserLspMap
  getUserCourseMaps(
    user_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    filters: CourseMapFilters
  ): PaginatedCourseMaps
  getUserCourseMapStats(input: UserCourseMapStatsInput!): UserCourseMapStats
  getUserCourseMapByCourseID(
    user_id: String!
    course_id: String!
    lsp_id: String
  ): [UserCourse]
  getUserCourseProgressByMapId(
    user_id: String!
    user_course_id: [ID!]
  ): [UserCourseProgress]
  getUserCourseProgressByTopicId(
    user_id: String!
    topic_id: ID!
  ): [UserCourseProgress]
  getUserNotes(
    user_id: String!
    user_lsp_id: String
    course_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedNotes
  getUserBookmarks(
    user_id: String!
    user_lsp_id: String
    course_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedBookmarks
  getUserExamAttempts(user_id: String, exam_id: String!): [UserExamAttempts]
  getUserExamResults(
    user_ea_details: [UserExamResultDetails!]!
  ): [UserExamResultInfo]
  getUserExamProgress(user_id: String!, user_ea_id: String!): [UserExamProgress]
  getLatestCohorts(
    user_id: String
    user_lsp_id: String
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCohorts
  getCohortUsers(
    cohort_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCohorts
  getUserQuizAttempts(user_id: String!, topic_id: String!): [UserQuizAttempt]
  getCohortDetails(cohort_id: String!): CohortMain
  getCohortMains(
    lsp_id: String!
    publish_time: Int
    pageCursor: String
    Direction: String
    pageSize: Int
    searchText: String
  ): PaginatedCohortsMain
  getOrganizations(org_ids: [String]): [Organization]
  getOrganizationsByName(
    name: String
    prevPageSnapShot: String!
    pageSize: Int!
  ): [Organization]
  getOrganizationUnits(ou_ids: [String]): [OrganizationUnit]
  getUnitsByOrgId(org_id: String!): [OrganizationUnit]
  getLearningSpacesByOrgId(org_id: String!): [LearningSpace]
  getLearningSpacesByOuId(ou_id: String!, org_id: String!): [LearningSpace]
  getLearningSpaceDetails(lsp_ids: [String]): [LearningSpace]
  getUserLspRoles(user_id: String!, user_lsp_ids: [String!]!): [UserRole]
  getCourseConsumptionStats(
    lsp_id: String!
    pageCursor: String
    Direction: String
    pageSize: Int
  ): PaginatedCCStats
  getCourseViews(
    lsp_ids: [String!]!
    start_time: String
    end_time: String
  ): [CourseViews]
  getVendorExperience(vendor_id: String!, exp_id: String!):ExperienceVendor
  getVendors(lsp_id: String): [Vendor]
  getPaginatedVendors(lsp_id: String, pageCursor: String, Direction: String, pageSize: Int): PaginatedVendors
  getVendorAdmins(vendor_id: String!): [User]
  getVendorDetails(vendor_id: String!): Vendor
}

type Mutation {
  registerUsers(input: [UserInput]!): [User]
  inviteUsers(emails: [String!]!, lsp_id: String): Boolean
  inviteUsersWithRole(emails: [String!]!, lsp_id: String, role: String): [InviteResponse]
  updateUser(input: UserInput!): User
  login: User
  addUserLspMap(input: [UserLspMapInput]!): [UserLspMap]
  updateUserLspMap(input: UserLspMapInput!): UserLspMap
  addUserOrganizationMap(
    input: [UserOrganizationMapInput]!
  ): [UserOrganizationMap]
  updateUserOrganizationMap(
    input: UserOrganizationMapInput!
  ): UserOrganizationMap
  addUserLanguageMap(input: [UserLanguageMapInput]!): [UserLanguageMap]
  addUserPreference(input: [UserPreferenceInput]!): [UserPreference]
  updateUserPreference(input: UserPreferenceInput!): UserPreference
  addUserRoles(input: [UserRoleInput]!): [UserRole]
  updateUserRole(input: UserRoleInput!): UserRole
  addUserCohort(input: [UserCohortInput]!): [UserCohort]
  updateUserCohort(input: UserCohortInput!): UserCohort
  addUserCourse(input: [UserCourseInput]!): [UserCourse]
  updateUserCourse(input: UserCourseInput!): UserCourse
  addUserCourseProgress(input: [UserCourseProgressInput]!): [UserCourseProgress]
  updateUserCourseProgress(input: UserCourseProgressInput!): UserCourseProgress
  addUserQuizAttempt(input: [UserQuizAttemptInput]!): [UserQuizAttempt]
  updateUserQuizAttempt(input: UserQuizAttemptInput!): UserQuizAttempt
  addUserBookmark(input: [UserBookmarkInput]!): [UserBookmark]
  updateUserBookmark(input: UserBookmarkInput!): UserBookmark
  addUserNotes(input: [UserNotesInput]!): [UserNotes]
  updateUserNotes(input: UserNotesInput!): UserNotes
  addUserExamAttempts(input: [UserExamAttemptsInput]!): [UserExamAttempts]
  updateUserExamAttempts(input: UserExamAttemptsInput!): UserExamAttempts
  addUserExamProgress(input: [UserExamProgressInput]!): [UserExamProgress]
  updateUserExamProgress(input: UserExamProgressInput!): UserExamProgress
  addUserExamResult(input: [UserExamResultInput]!): [UserExamResult]
  updateUserExamResult(input: UserExamResultInput!): UserExamResult
  addCohortMain(input: CohortMainInput!): CohortMain
  updateCohortMain(input: CohortMainInput!): CohortMain
  addOrganization(input: OrganizationInput!): Organization
  updateOrganization(input: OrganizationInput!): Organization
  addOrganizationUnit(input: OrganizationUnitInput!): OrganizationUnit
  updateOrganizationUnit(input: OrganizationUnitInput!): OrganizationUnit
  addLearningSpace(input: LearningSpaceInput!): LearningSpace
  updateLearningSpace(input: LearningSpaceInput!): LearningSpace
  deleteCohortImage(cohort_id: String!, filename: String!): String

  addVendor(input: VendorInput): Vendor
  updateVendor(input: VendorInput): Vendor
  createProfileVendor(input: VendorProfile): String!
  createExperienceVendor(input: ExperienceInput!): String!
  uploadSampleFile(input: SampleFile): String!
  #createVendorServices(VendorId: String!, SME: SMEInput, CRT: CRTInput, CD: CDInput): Boolean
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addCohortMain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CohortMainInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCohortMainInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMainInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addLearningSpace_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LearningSpaceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLearningSpaceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationUnitInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserBookmark_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserBookmarkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserBookmarkInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserCohort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserCohortInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCohortInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserCourseProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserCourseProgressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCourseProgressInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserCourse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserCourseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCourseInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserExamAttempts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserExamAttemptsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamAttemptsInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserExamProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserExamProgressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamProgressInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserExamResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserExamResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamResultInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserLanguageMap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserLanguageMapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserLanguageMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserLspMap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserLspMapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserLspMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserNotesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserNotesInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserOrganizationMap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserOrganizationMapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserOrganizationMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserPreference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserPreferenceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserPreferenceInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserQuizAttempt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserQuizAttemptInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserQuizAttemptInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserRoleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserRoleInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addVendor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VendorInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOVendorInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createExperienceVendor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ExperienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNExperienceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐExperienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProfileVendor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VendorProfile
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOVendorProfile2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendorProfile(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCohortImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["cohort_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cohort_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cohort_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["filename"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filename"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteUsersWithRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emails"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["emails"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emails"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_registerUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCohortMain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CohortMainInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCohortMainInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMainInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLearningSpace_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LearningSpaceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLearningSpaceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationUnitInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserBookmark_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserBookmarkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserBookmarkInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserCohort_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserCohortInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCohortInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserCourseProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserCourseProgressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCourseProgressInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserCourse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserCourseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCourseInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserExamAttempts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserExamAttemptsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamAttemptsInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserExamProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserExamProgressInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamProgressInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserExamResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserExamResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserExamResultInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserLspMap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserLspMapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserLspMapInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserNotesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserNotesInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserOrganizationMap_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserOrganizationMapInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserOrganizationMapInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPreference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserPreferenceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserPreferenceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserQuizAttempt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserQuizAttemptInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserQuizAttemptInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserRoleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserRoleInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVendor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VendorInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOVendorInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendorInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadSampleFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SampleFile
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOSampleFile2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐSampleFile(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCohortDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["cohort_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cohort_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cohort_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCohortMains_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["searchText"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchText"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchText"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_getCohortUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["cohort_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cohort_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cohort_id"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getCourseConsumptionStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getCourseViews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["lsp_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_ids"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_ids"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["start_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["start_time"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["end_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["end_time"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getLatestCohorts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["user_lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_id"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg4
	var arg5 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg5, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_getLearningSpaceDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["lsp_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_ids"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLearningSpacesByOrgId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["org_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLearningSpacesByOuId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ou_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ou_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ou_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["org_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getOrganizationUnits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["ou_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ou_ids"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ou_ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOrganizationsByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["prevPageSnapShot"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prevPageSnapShot"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["prevPageSnapShot"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getOrganizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["org_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_ids"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org_ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPaginatedVendors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getUnitsByOrgId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["org_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserBookmarks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["user_lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_id"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["course_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course_id"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_getUserCourseMapByCourseID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["course_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course_id"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getUserCourseMapStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserCourseMapStatsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserCourseMapStatsInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseMapStatsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserCourseMaps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg4
	var arg5 *model.CourseMapFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg5, err = ec.unmarshalOCourseMapFilters2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseMapFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_getUserCourseProgressByMapId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["user_course_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
		arg1, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_course_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserCourseProgressByTopicId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["topic_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["user_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ids"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserExamAttempts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["exam_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exam_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["exam_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserExamProgress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["user_ea_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_ea_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserExamResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UserExamResultDetails
	if tmp, ok := rawArgs["user_ea_details"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_details"))
		arg0, err = ec.unmarshalNUserExamResultDetails2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultDetailsᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_ea_details"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserLspByLspId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserLspMapsByLspId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getUserLspRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["user_lsp_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_ids"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_ids"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserLsps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["user_lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_id"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["course_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["course_id"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg5
	var arg6 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg6, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_getUserOrgDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["user_lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserOrganizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserPreferenceForLsp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["user_lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_lsp_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserPreferences_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserQuizAttempts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["topic_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUsersForAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["publish_time"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publish_time"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publish_time"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pageCursor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageCursor"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageCursor"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["Direction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Direction"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Direction"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg3
	var arg4 *model.UserFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg4, err = ec.unmarshalOUserFilters2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getVendorAdmins_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vendor_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vendor_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVendorDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vendor_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vendor_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVendorExperience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vendor_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vendor_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["exp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exp_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["exp_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getVendors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["lsp_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lsp_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CohortMain_cohort_id(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_cohort_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CohortID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_cohort_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_name(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_description(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_code(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_status(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_type(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_is_active(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_created_by(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_size(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CohortMain_imageUrl(ctx context.Context, field graphql.CollectedField, obj *model.CohortMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CohortMain_imageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CohortMain_imageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CohortMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Count_name(ctx context.Context, field graphql.CollectedField, obj *model.Count) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Count_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Count_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Count",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Count_count(ctx context.Context, field graphql.CollectedField, obj *model.Count) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Count_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Count_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Count",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_ID(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_LspId(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_LspId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_LspId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_CourseId(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_CourseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_CourseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_Category(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_Category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_Category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_SubCategory(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_SubCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_SubCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_Owner(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_Owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_Owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_Duration(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_Duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_Duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_TotalLearners(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_TotalLearners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalLearners, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_TotalLearners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_ActiveLearners(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_ActiveLearners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveLearners, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_ActiveLearners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_CompletedLearners(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_CompletedLearners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedLearners, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_CompletedLearners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_ExpectedCompletionTime(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_ExpectedCompletionTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCompletionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_ExpectedCompletionTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_AverageCompletionTime(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_AverageCompletionTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageCompletionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_AverageCompletionTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_AverageComplianceScore(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_AverageComplianceScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageComplianceScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_AverageComplianceScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_CreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_CreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_CreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_UpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_UpdatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_UpdatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_CreatedBy(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_CreatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_CreatedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseConsumptionStats_UpdatedBy(ctx context.Context, field graphql.CollectedField, obj *model.CourseConsumptionStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseConsumptionStats_UpdatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseConsumptionStats_UpdatedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseConsumptionStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseViews_seconds(ctx context.Context, field graphql.CollectedField, obj *model.CourseViews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseViews_seconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseViews_seconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseViews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseViews_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CourseViews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseViews_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseViews_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseViews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseViews_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.CourseViews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseViews_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseViews_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseViews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseViews_user_ids(ctx context.Context, field graphql.CollectedField, obj *model.CourseViews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseViews_user_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseViews_user_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseViews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseViews_date_string(ctx context.Context, field graphql.CollectedField, obj *model.CourseViews) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseViews_date_string(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseViews_date_string(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseViews",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_ExpId(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_ExpId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_ExpId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_VendorId(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_VendorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_VendorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_PfId(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_PfId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PfID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_PfId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_StartDate(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_StartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_StartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_EndDate(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_EndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_EndDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_Title(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_Location(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_Location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_Location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_LocationType(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_LocationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_LocationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_EmployementType(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_EmployementType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployementType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_EmployementType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_CompanyName(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_CompanyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_CompanyName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_CreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_CreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_CreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_CreatedBy(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_CreatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_CreatedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_UpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_UpdatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_UpdatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_UpdatedBy(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_UpdatedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_UpdatedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExperienceVendor_Status(ctx context.Context, field graphql.CollectedField, obj *model.ExperienceVendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExperienceVendor_Status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExperienceVendor_Status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExperienceVendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InviteResponse_email(ctx context.Context, field graphql.CollectedField, obj *model.InviteResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteResponse_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteResponse_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InviteResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.InviteResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InviteResponse_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InviteResponse_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InviteResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_org_id(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_org_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_org_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_ou_id(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_ou_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OuID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_ou_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_name(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_logo_url(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_logo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_logo_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_profile_url(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_profile_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_profile_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_no_users(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_no_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_no_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_owners(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_owners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owners, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_owners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_is_default(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_is_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_is_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_status(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_created_at(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_created_by(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LearningSpace_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.LearningSpace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LearningSpace_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LearningSpace_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LearningSpace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterUsers(rctx, fc.Args["input"].([]*model.UserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_inviteUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteUsers(rctx, fc.Args["emails"].([]string), fc.Args["lsp_id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_inviteUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteUsersWithRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_inviteUsersWithRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteUsersWithRole(rctx, fc.Args["emails"].([]string), fc.Args["lsp_id"].(*string), fc.Args["role"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.InviteResponse)
	fc.Result = res
	return ec.marshalOInviteResponse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐInviteResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_inviteUsersWithRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "email":
				return ec.fieldContext_InviteResponse_email(ctx, field)
			case "message":
				return ec.fieldContext_InviteResponse_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InviteResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteUsersWithRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["input"].(model.UserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserLspMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserLspMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserLspMap(rctx, fc.Args["input"].([]*model.UserLspMapInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserLspMap)
	fc.Result = res
	return ec.marshalOUserLspMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserLspMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_id":
				return ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLspMap_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserLspMap_lsp_id(ctx, field)
			case "status":
				return ec.fieldContext_UserLspMap_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLspMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLspMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLspMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLspMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLspMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserLspMap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserLspMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserLspMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserLspMap(rctx, fc.Args["input"].(model.UserLspMapInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserLspMap)
	fc.Result = res
	return ec.marshalOUserLspMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserLspMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_id":
				return ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLspMap_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserLspMap_lsp_id(ctx, field)
			case "status":
				return ec.fieldContext_UserLspMap_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLspMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLspMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLspMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLspMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLspMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserLspMap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserOrganizationMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserOrganizationMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserOrganizationMap(rctx, fc.Args["input"].([]*model.UserOrganizationMapInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserOrganizationMap)
	fc.Result = res
	return ec.marshalOUserOrganizationMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserOrganizationMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_organization_id":
				return ec.fieldContext_UserOrganizationMap_user_organization_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserOrganizationMap_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserOrganizationMap_user_lsp_id(ctx, field)
			case "organization_id":
				return ec.fieldContext_UserOrganizationMap_organization_id(ctx, field)
			case "organization_role":
				return ec.fieldContext_UserOrganizationMap_organization_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserOrganizationMap_is_active(ctx, field)
			case "employee_id":
				return ec.fieldContext_UserOrganizationMap_employee_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserOrganizationMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserOrganizationMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserOrganizationMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserOrganizationMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserOrganizationMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserOrganizationMap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserOrganizationMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserOrganizationMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserOrganizationMap(rctx, fc.Args["input"].(model.UserOrganizationMapInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOrganizationMap)
	fc.Result = res
	return ec.marshalOUserOrganizationMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserOrganizationMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_organization_id":
				return ec.fieldContext_UserOrganizationMap_user_organization_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserOrganizationMap_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserOrganizationMap_user_lsp_id(ctx, field)
			case "organization_id":
				return ec.fieldContext_UserOrganizationMap_organization_id(ctx, field)
			case "organization_role":
				return ec.fieldContext_UserOrganizationMap_organization_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserOrganizationMap_is_active(ctx, field)
			case "employee_id":
				return ec.fieldContext_UserOrganizationMap_employee_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserOrganizationMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserOrganizationMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserOrganizationMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserOrganizationMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserOrganizationMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserOrganizationMap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserLanguageMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserLanguageMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserLanguageMap(rctx, fc.Args["input"].([]*model.UserLanguageMapInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserLanguageMap)
	fc.Result = res
	return ec.marshalOUserLanguageMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserLanguageMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_language_id":
				return ec.fieldContext_UserLanguageMap_user_language_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLanguageMap_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserLanguageMap_user_lsp_id(ctx, field)
			case "language":
				return ec.fieldContext_UserLanguageMap_language(ctx, field)
			case "is_base_language":
				return ec.fieldContext_UserLanguageMap_is_base_language(ctx, field)
			case "is_active":
				return ec.fieldContext_UserLanguageMap_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLanguageMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLanguageMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLanguageMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLanguageMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLanguageMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserLanguageMap_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserPreference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserPreference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserPreference(rctx, fc.Args["input"].([]*model.UserPreferenceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserPreference)
	fc.Result = res
	return ec.marshalOUserPreference2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserPreference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_preference_id":
				return ec.fieldContext_UserPreference_user_preference_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserPreference_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserPreference_user_lsp_id(ctx, field)
			case "sub_category":
				return ec.fieldContext_UserPreference_sub_category(ctx, field)
			case "is_base":
				return ec.fieldContext_UserPreference_is_base(ctx, field)
			case "is_active":
				return ec.fieldContext_UserPreference_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserPreference_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserPreference_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserPreference_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserPreference_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserPreference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPreference(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserPreference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPreference(rctx, fc.Args["input"].(model.UserPreferenceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserPreference)
	fc.Result = res
	return ec.marshalOUserPreference2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPreference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_preference_id":
				return ec.fieldContext_UserPreference_user_preference_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserPreference_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserPreference_user_lsp_id(ctx, field)
			case "sub_category":
				return ec.fieldContext_UserPreference_sub_category(ctx, field)
			case "is_base":
				return ec.fieldContext_UserPreference_is_base(ctx, field)
			case "is_active":
				return ec.fieldContext_UserPreference_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserPreference_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserPreference_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserPreference_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserPreference_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPreference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserRoles(rctx, fc.Args["input"].([]*model.UserRoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_role_id":
				return ec.fieldContext_UserRole_user_role_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserRole_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserRole_user_lsp_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserRole_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserRole_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserRole_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserRole_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserRole_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserRole(rctx, fc.Args["input"].(model.UserRoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_role_id":
				return ec.fieldContext_UserRole_user_role_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserRole_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserRole_user_lsp_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserRole_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserRole_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserRole_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserRole_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserRole_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserCohort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserCohort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserCohort(rctx, fc.Args["input"].([]*model.UserCohortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCohort)
	fc.Result = res
	return ec.marshalOUserCohort2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserCohort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cohort_id":
				return ec.fieldContext_UserCohort_user_cohort_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCohort_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCohort_user_lsp_id(ctx, field)
			case "cohort_id":
				return ec.fieldContext_UserCohort_cohort_id(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCohort_added_by(ctx, field)
			case "membership_status":
				return ec.fieldContext_UserCohort_membership_status(ctx, field)
			case "role":
				return ec.fieldContext_UserCohort_role(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCohort_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCohort_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCohort_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCohort_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCohort", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserCohort_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserCohort(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserCohort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserCohort(rctx, fc.Args["input"].(model.UserCohortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserCohort)
	fc.Result = res
	return ec.marshalOUserCohort2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserCohort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cohort_id":
				return ec.fieldContext_UserCohort_user_cohort_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCohort_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCohort_user_lsp_id(ctx, field)
			case "cohort_id":
				return ec.fieldContext_UserCohort_cohort_id(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCohort_added_by(ctx, field)
			case "membership_status":
				return ec.fieldContext_UserCohort_membership_status(ctx, field)
			case "role":
				return ec.fieldContext_UserCohort_role(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCohort_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCohort_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCohort_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCohort_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCohort", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserCohort_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserCourse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserCourse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserCourse(rctx, fc.Args["input"].([]*model.UserCourseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourse)
	fc.Result = res
	return ec.marshalOUserCourse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserCourse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_course_id":
				return ec.fieldContext_UserCourse_user_course_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourse_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserCourse_lsp_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCourse_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserCourse_course_id(ctx, field)
			case "course_type":
				return ec.fieldContext_UserCourse_course_type(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCourse_added_by(ctx, field)
			case "is_mandatory":
				return ec.fieldContext_UserCourse_is_mandatory(ctx, field)
			case "end_date":
				return ec.fieldContext_UserCourse_end_date(ctx, field)
			case "course_status":
				return ec.fieldContext_UserCourse_course_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourse_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourse_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserCourse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserCourse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserCourse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserCourse(rctx, fc.Args["input"].(model.UserCourseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserCourse)
	fc.Result = res
	return ec.marshalOUserCourse2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserCourse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_course_id":
				return ec.fieldContext_UserCourse_user_course_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourse_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserCourse_lsp_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCourse_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserCourse_course_id(ctx, field)
			case "course_type":
				return ec.fieldContext_UserCourse_course_type(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCourse_added_by(ctx, field)
			case "is_mandatory":
				return ec.fieldContext_UserCourse_is_mandatory(ctx, field)
			case "end_date":
				return ec.fieldContext_UserCourse_end_date(ctx, field)
			case "course_status":
				return ec.fieldContext_UserCourse_course_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourse_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourse_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserCourse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserCourseProgress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserCourseProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserCourseProgress(rctx, fc.Args["input"].([]*model.UserCourseProgressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourseProgress)
	fc.Result = res
	return ec.marshalOUserCourseProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserCourseProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cp_id":
				return ec.fieldContext_UserCourseProgress_user_cp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourseProgress_user_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserCourseProgress_user_course_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserCourseProgress_topic_id(ctx, field)
			case "topic_type":
				return ec.fieldContext_UserCourseProgress_topic_type(ctx, field)
			case "status":
				return ec.fieldContext_UserCourseProgress_status(ctx, field)
			case "video_progress":
				return ec.fieldContext_UserCourseProgress_video_progress(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserCourseProgress_time_stamp(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourseProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourseProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourseProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourseProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourseProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserCourseProgress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserCourseProgress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserCourseProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserCourseProgress(rctx, fc.Args["input"].(model.UserCourseProgressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserCourseProgress)
	fc.Result = res
	return ec.marshalOUserCourseProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserCourseProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cp_id":
				return ec.fieldContext_UserCourseProgress_user_cp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourseProgress_user_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserCourseProgress_user_course_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserCourseProgress_topic_id(ctx, field)
			case "topic_type":
				return ec.fieldContext_UserCourseProgress_topic_type(ctx, field)
			case "status":
				return ec.fieldContext_UserCourseProgress_status(ctx, field)
			case "video_progress":
				return ec.fieldContext_UserCourseProgress_video_progress(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserCourseProgress_time_stamp(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourseProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourseProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourseProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourseProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourseProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserCourseProgress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserQuizAttempt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserQuizAttempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserQuizAttempt(rctx, fc.Args["input"].([]*model.UserQuizAttemptInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserQuizAttempt)
	fc.Result = res
	return ec.marshalOUserQuizAttempt2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserQuizAttempt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_qa_id":
				return ec.fieldContext_UserQuizAttempt_user_qa_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserQuizAttempt_user_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserQuizAttempt_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserQuizAttempt_user_course_id(ctx, field)
			case "quiz_id":
				return ec.fieldContext_UserQuizAttempt_quiz_id(ctx, field)
			case "quiz_attempt":
				return ec.fieldContext_UserQuizAttempt_quiz_attempt(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserQuizAttempt_topic_id(ctx, field)
			case "result":
				return ec.fieldContext_UserQuizAttempt_result(ctx, field)
			case "is_active":
				return ec.fieldContext_UserQuizAttempt_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserQuizAttempt_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserQuizAttempt_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserQuizAttempt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserQuizAttempt_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserQuizAttempt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserQuizAttempt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserQuizAttempt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserQuizAttempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserQuizAttempt(rctx, fc.Args["input"].(model.UserQuizAttemptInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserQuizAttempt)
	fc.Result = res
	return ec.marshalOUserQuizAttempt2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserQuizAttempt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_qa_id":
				return ec.fieldContext_UserQuizAttempt_user_qa_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserQuizAttempt_user_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserQuizAttempt_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserQuizAttempt_user_course_id(ctx, field)
			case "quiz_id":
				return ec.fieldContext_UserQuizAttempt_quiz_id(ctx, field)
			case "quiz_attempt":
				return ec.fieldContext_UserQuizAttempt_quiz_attempt(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserQuizAttempt_topic_id(ctx, field)
			case "result":
				return ec.fieldContext_UserQuizAttempt_result(ctx, field)
			case "is_active":
				return ec.fieldContext_UserQuizAttempt_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserQuizAttempt_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserQuizAttempt_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserQuizAttempt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserQuizAttempt_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserQuizAttempt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserQuizAttempt_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserBookmark(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserBookmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserBookmark(rctx, fc.Args["input"].([]*model.UserBookmarkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserBookmark)
	fc.Result = res
	return ec.marshalOUserBookmark2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserBookmark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_bm_id":
				return ec.fieldContext_UserBookmark_user_bm_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserBookmark_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserBookmark_user_lsp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserBookmark_user_course_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserBookmark_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserBookmark_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserBookmark_topic_id(ctx, field)
			case "name":
				return ec.fieldContext_UserBookmark_name(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserBookmark_time_stamp(ctx, field)
			case "is_active":
				return ec.fieldContext_UserBookmark_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserBookmark_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserBookmark_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserBookmark_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserBookmark_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserBookmark", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserBookmark_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserBookmark(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserBookmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserBookmark(rctx, fc.Args["input"].(model.UserBookmarkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserBookmark)
	fc.Result = res
	return ec.marshalOUserBookmark2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserBookmark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_bm_id":
				return ec.fieldContext_UserBookmark_user_bm_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserBookmark_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserBookmark_user_lsp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserBookmark_user_course_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserBookmark_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserBookmark_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserBookmark_topic_id(ctx, field)
			case "name":
				return ec.fieldContext_UserBookmark_name(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserBookmark_time_stamp(ctx, field)
			case "is_active":
				return ec.fieldContext_UserBookmark_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserBookmark_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserBookmark_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserBookmark_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserBookmark_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserBookmark", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserBookmark_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserNotes(rctx, fc.Args["input"].([]*model.UserNotesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserNotes)
	fc.Result = res
	return ec.marshalOUserNotes2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_notes_id":
				return ec.fieldContext_UserNotes_user_notes_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserNotes_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserNotes_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserNotes_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserNotes_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserNotes_topic_id(ctx, field)
			case "sequence":
				return ec.fieldContext_UserNotes_sequence(ctx, field)
			case "status":
				return ec.fieldContext_UserNotes_status(ctx, field)
			case "details":
				return ec.fieldContext_UserNotes_details(ctx, field)
			case "is_active":
				return ec.fieldContext_UserNotes_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserNotes_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserNotes_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserNotes_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserNotes_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserNotes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserNotes(rctx, fc.Args["input"].(model.UserNotesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserNotes)
	fc.Result = res
	return ec.marshalOUserNotes2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_notes_id":
				return ec.fieldContext_UserNotes_user_notes_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserNotes_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserNotes_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserNotes_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserNotes_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserNotes_topic_id(ctx, field)
			case "sequence":
				return ec.fieldContext_UserNotes_sequence(ctx, field)
			case "status":
				return ec.fieldContext_UserNotes_status(ctx, field)
			case "details":
				return ec.fieldContext_UserNotes_details(ctx, field)
			case "is_active":
				return ec.fieldContext_UserNotes_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserNotes_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserNotes_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserNotes_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserNotes_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserNotes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserExamAttempts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserExamAttempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserExamAttempts(rctx, fc.Args["input"].([]*model.UserExamAttemptsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamAttempts)
	fc.Result = res
	return ec.marshalOUserExamAttempts2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserExamAttempts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ea_id":
				return ec.fieldContext_UserExamAttempts_user_ea_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamAttempts_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamAttempts_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamAttempts_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserExamAttempts_user_course_id(ctx, field)
			case "exam_id":
				return ec.fieldContext_UserExamAttempts_exam_id(ctx, field)
			case "attempt_no":
				return ec.fieldContext_UserExamAttempts_attempt_no(ctx, field)
			case "attempt_status":
				return ec.fieldContext_UserExamAttempts_attempt_status(ctx, field)
			case "attempt_start_time":
				return ec.fieldContext_UserExamAttempts_attempt_start_time(ctx, field)
			case "attempt_duration":
				return ec.fieldContext_UserExamAttempts_attempt_duration(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamAttempts_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamAttempts_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamAttempts_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamAttempts_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamAttempts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserExamAttempts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserExamAttempts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserExamAttempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserExamAttempts(rctx, fc.Args["input"].(model.UserExamAttemptsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserExamAttempts)
	fc.Result = res
	return ec.marshalOUserExamAttempts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserExamAttempts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ea_id":
				return ec.fieldContext_UserExamAttempts_user_ea_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamAttempts_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamAttempts_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamAttempts_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserExamAttempts_user_course_id(ctx, field)
			case "exam_id":
				return ec.fieldContext_UserExamAttempts_exam_id(ctx, field)
			case "attempt_no":
				return ec.fieldContext_UserExamAttempts_attempt_no(ctx, field)
			case "attempt_status":
				return ec.fieldContext_UserExamAttempts_attempt_status(ctx, field)
			case "attempt_start_time":
				return ec.fieldContext_UserExamAttempts_attempt_start_time(ctx, field)
			case "attempt_duration":
				return ec.fieldContext_UserExamAttempts_attempt_duration(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamAttempts_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamAttempts_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamAttempts_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamAttempts_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamAttempts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserExamAttempts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserExamProgress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserExamProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserExamProgress(rctx, fc.Args["input"].([]*model.UserExamProgressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamProgress)
	fc.Result = res
	return ec.marshalOUserExamProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserExamProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ep_id":
				return ec.fieldContext_UserExamProgress_user_ep_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamProgress_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamProgress_user_ea_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamProgress_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamProgress_user_cp_id(ctx, field)
			case "sr_no":
				return ec.fieldContext_UserExamProgress_sr_no(ctx, field)
			case "question_id":
				return ec.fieldContext_UserExamProgress_question_id(ctx, field)
			case "question_type":
				return ec.fieldContext_UserExamProgress_question_type(ctx, field)
			case "answer":
				return ec.fieldContext_UserExamProgress_answer(ctx, field)
			case "q_attempt_status":
				return ec.fieldContext_UserExamProgress_q_attempt_status(ctx, field)
			case "total_time_spent":
				return ec.fieldContext_UserExamProgress_total_time_spent(ctx, field)
			case "correct_answer":
				return ec.fieldContext_UserExamProgress_correct_answer(ctx, field)
			case "section_id":
				return ec.fieldContext_UserExamProgress_section_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserExamProgress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserExamProgress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserExamProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserExamProgress(rctx, fc.Args["input"].(model.UserExamProgressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserExamProgress)
	fc.Result = res
	return ec.marshalOUserExamProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserExamProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ep_id":
				return ec.fieldContext_UserExamProgress_user_ep_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamProgress_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamProgress_user_ea_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamProgress_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamProgress_user_cp_id(ctx, field)
			case "sr_no":
				return ec.fieldContext_UserExamProgress_sr_no(ctx, field)
			case "question_id":
				return ec.fieldContext_UserExamProgress_question_id(ctx, field)
			case "question_type":
				return ec.fieldContext_UserExamProgress_question_type(ctx, field)
			case "answer":
				return ec.fieldContext_UserExamProgress_answer(ctx, field)
			case "q_attempt_status":
				return ec.fieldContext_UserExamProgress_q_attempt_status(ctx, field)
			case "total_time_spent":
				return ec.fieldContext_UserExamProgress_total_time_spent(ctx, field)
			case "correct_answer":
				return ec.fieldContext_UserExamProgress_correct_answer(ctx, field)
			case "section_id":
				return ec.fieldContext_UserExamProgress_section_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserExamProgress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addUserExamResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addUserExamResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserExamResult(rctx, fc.Args["input"].([]*model.UserExamResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamResult)
	fc.Result = res
	return ec.marshalOUserExamResult2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addUserExamResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_er_id":
				return ec.fieldContext_UserExamResult_user_er_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamResult_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamResult_user_ea_id(ctx, field)
			case "user_score":
				return ec.fieldContext_UserExamResult_user_score(ctx, field)
			case "correct_answers":
				return ec.fieldContext_UserExamResult_correct_answers(ctx, field)
			case "wrong_answers":
				return ec.fieldContext_UserExamResult_wrong_answers(ctx, field)
			case "result_status":
				return ec.fieldContext_UserExamResult_result_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamResult_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamResult_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamResult_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamResult_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addUserExamResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserExamResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserExamResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserExamResult(rctx, fc.Args["input"].(model.UserExamResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserExamResult)
	fc.Result = res
	return ec.marshalOUserExamResult2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserExamResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_er_id":
				return ec.fieldContext_UserExamResult_user_er_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamResult_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamResult_user_ea_id(ctx, field)
			case "user_score":
				return ec.fieldContext_UserExamResult_user_score(ctx, field)
			case "correct_answers":
				return ec.fieldContext_UserExamResult_correct_answers(ctx, field)
			case "wrong_answers":
				return ec.fieldContext_UserExamResult_wrong_answers(ctx, field)
			case "result_status":
				return ec.fieldContext_UserExamResult_result_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamResult_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamResult_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamResult_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamResult_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserExamResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addCohortMain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addCohortMain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCohortMain(rctx, fc.Args["input"].(model.CohortMainInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CohortMain)
	fc.Result = res
	return ec.marshalOCohortMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addCohortMain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohort_id":
				return ec.fieldContext_CohortMain_cohort_id(ctx, field)
			case "name":
				return ec.fieldContext_CohortMain_name(ctx, field)
			case "description":
				return ec.fieldContext_CohortMain_description(ctx, field)
			case "lsp_id":
				return ec.fieldContext_CohortMain_lsp_id(ctx, field)
			case "code":
				return ec.fieldContext_CohortMain_code(ctx, field)
			case "status":
				return ec.fieldContext_CohortMain_status(ctx, field)
			case "type":
				return ec.fieldContext_CohortMain_type(ctx, field)
			case "is_active":
				return ec.fieldContext_CohortMain_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_CohortMain_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_CohortMain_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_CohortMain_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CohortMain_updated_at(ctx, field)
			case "size":
				return ec.fieldContext_CohortMain_size(ctx, field)
			case "imageUrl":
				return ec.fieldContext_CohortMain_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CohortMain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addCohortMain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCohortMain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCohortMain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCohortMain(rctx, fc.Args["input"].(model.CohortMainInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CohortMain)
	fc.Result = res
	return ec.marshalOCohortMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCohortMain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohort_id":
				return ec.fieldContext_CohortMain_cohort_id(ctx, field)
			case "name":
				return ec.fieldContext_CohortMain_name(ctx, field)
			case "description":
				return ec.fieldContext_CohortMain_description(ctx, field)
			case "lsp_id":
				return ec.fieldContext_CohortMain_lsp_id(ctx, field)
			case "code":
				return ec.fieldContext_CohortMain_code(ctx, field)
			case "status":
				return ec.fieldContext_CohortMain_status(ctx, field)
			case "type":
				return ec.fieldContext_CohortMain_type(ctx, field)
			case "is_active":
				return ec.fieldContext_CohortMain_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_CohortMain_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_CohortMain_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_CohortMain_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CohortMain_updated_at(ctx, field)
			case "size":
				return ec.fieldContext_CohortMain_size(ctx, field)
			case "imageUrl":
				return ec.fieldContext_CohortMain_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CohortMain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCohortMain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganization(rctx, fc.Args["input"].(model.OrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "org_id":
				return ec.fieldContext_Organization_org_id(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_Organization_logo_url(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "type":
				return ec.fieldContext_Organization_type(ctx, field)
			case "subdomain":
				return ec.fieldContext_Organization_subdomain(ctx, field)
			case "employee_count":
				return ec.fieldContext_Organization_employee_count(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Organization_linkedin_url(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Organization_facebook_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Organization_twitter_url(ctx, field)
			case "status":
				return ec.fieldContext_Organization_status(ctx, field)
			case "created_at":
				return ec.fieldContext_Organization_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Organization_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Organization_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_Organization_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganization(rctx, fc.Args["input"].(model.OrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "org_id":
				return ec.fieldContext_Organization_org_id(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_Organization_logo_url(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "type":
				return ec.fieldContext_Organization_type(ctx, field)
			case "subdomain":
				return ec.fieldContext_Organization_subdomain(ctx, field)
			case "employee_count":
				return ec.fieldContext_Organization_employee_count(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Organization_linkedin_url(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Organization_facebook_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Organization_twitter_url(ctx, field)
			case "status":
				return ec.fieldContext_Organization_status(ctx, field)
			case "created_at":
				return ec.fieldContext_Organization_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Organization_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Organization_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_Organization_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addOrganizationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addOrganizationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationUnit(rctx, fc.Args["input"].(model.OrganizationUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationUnit)
	fc.Result = res
	return ec.marshalOOrganizationUnit2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addOrganizationUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ou_id":
				return ec.fieldContext_OrganizationUnit_ou_id(ctx, field)
			case "org_id":
				return ec.fieldContext_OrganizationUnit_org_id(ctx, field)
			case "emp_count":
				return ec.fieldContext_OrganizationUnit_emp_count(ctx, field)
			case "address":
				return ec.fieldContext_OrganizationUnit_address(ctx, field)
			case "city":
				return ec.fieldContext_OrganizationUnit_city(ctx, field)
			case "state":
				return ec.fieldContext_OrganizationUnit_state(ctx, field)
			case "country":
				return ec.fieldContext_OrganizationUnit_country(ctx, field)
			case "postal_code":
				return ec.fieldContext_OrganizationUnit_postal_code(ctx, field)
			case "status":
				return ec.fieldContext_OrganizationUnit_status(ctx, field)
			case "created_at":
				return ec.fieldContext_OrganizationUnit_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OrganizationUnit_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_OrganizationUnit_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_OrganizationUnit_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addOrganizationUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrganizationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrganizationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationUnit(rctx, fc.Args["input"].(model.OrganizationUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationUnit)
	fc.Result = res
	return ec.marshalOOrganizationUnit2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrganizationUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ou_id":
				return ec.fieldContext_OrganizationUnit_ou_id(ctx, field)
			case "org_id":
				return ec.fieldContext_OrganizationUnit_org_id(ctx, field)
			case "emp_count":
				return ec.fieldContext_OrganizationUnit_emp_count(ctx, field)
			case "address":
				return ec.fieldContext_OrganizationUnit_address(ctx, field)
			case "city":
				return ec.fieldContext_OrganizationUnit_city(ctx, field)
			case "state":
				return ec.fieldContext_OrganizationUnit_state(ctx, field)
			case "country":
				return ec.fieldContext_OrganizationUnit_country(ctx, field)
			case "postal_code":
				return ec.fieldContext_OrganizationUnit_postal_code(ctx, field)
			case "status":
				return ec.fieldContext_OrganizationUnit_status(ctx, field)
			case "created_at":
				return ec.fieldContext_OrganizationUnit_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OrganizationUnit_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_OrganizationUnit_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_OrganizationUnit_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrganizationUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addLearningSpace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addLearningSpace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddLearningSpace(rctx, fc.Args["input"].(model.LearningSpaceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LearningSpace)
	fc.Result = res
	return ec.marshalOLearningSpace2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addLearningSpace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_LearningSpace_lsp_id(ctx, field)
			case "org_id":
				return ec.fieldContext_LearningSpace_org_id(ctx, field)
			case "ou_id":
				return ec.fieldContext_LearningSpace_ou_id(ctx, field)
			case "name":
				return ec.fieldContext_LearningSpace_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_LearningSpace_logo_url(ctx, field)
			case "profile_url":
				return ec.fieldContext_LearningSpace_profile_url(ctx, field)
			case "no_users":
				return ec.fieldContext_LearningSpace_no_users(ctx, field)
			case "owners":
				return ec.fieldContext_LearningSpace_owners(ctx, field)
			case "is_default":
				return ec.fieldContext_LearningSpace_is_default(ctx, field)
			case "status":
				return ec.fieldContext_LearningSpace_status(ctx, field)
			case "created_at":
				return ec.fieldContext_LearningSpace_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_LearningSpace_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_LearningSpace_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_LearningSpace_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LearningSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addLearningSpace_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLearningSpace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLearningSpace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLearningSpace(rctx, fc.Args["input"].(model.LearningSpaceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LearningSpace)
	fc.Result = res
	return ec.marshalOLearningSpace2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLearningSpace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_LearningSpace_lsp_id(ctx, field)
			case "org_id":
				return ec.fieldContext_LearningSpace_org_id(ctx, field)
			case "ou_id":
				return ec.fieldContext_LearningSpace_ou_id(ctx, field)
			case "name":
				return ec.fieldContext_LearningSpace_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_LearningSpace_logo_url(ctx, field)
			case "profile_url":
				return ec.fieldContext_LearningSpace_profile_url(ctx, field)
			case "no_users":
				return ec.fieldContext_LearningSpace_no_users(ctx, field)
			case "owners":
				return ec.fieldContext_LearningSpace_owners(ctx, field)
			case "is_default":
				return ec.fieldContext_LearningSpace_is_default(ctx, field)
			case "status":
				return ec.fieldContext_LearningSpace_status(ctx, field)
			case "created_at":
				return ec.fieldContext_LearningSpace_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_LearningSpace_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_LearningSpace_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_LearningSpace_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LearningSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLearningSpace_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCohortImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCohortImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCohortImage(rctx, fc.Args["cohort_id"].(string), fc.Args["filename"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCohortImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCohortImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addVendor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addVendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddVendor(rctx, fc.Args["input"].(*model.VendorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Vendor)
	fc.Result = res
	return ec.marshalOVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addVendor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendorId":
				return ec.fieldContext_Vendor_vendorId(ctx, field)
			case "type":
				return ec.fieldContext_Vendor_type(ctx, field)
			case "level":
				return ec.fieldContext_Vendor_level(ctx, field)
			case "name":
				return ec.fieldContext_Vendor_name(ctx, field)
			case "description":
				return ec.fieldContext_Vendor_description(ctx, field)
			case "photo_url":
				return ec.fieldContext_Vendor_photo_url(ctx, field)
			case "address":
				return ec.fieldContext_Vendor_address(ctx, field)
			case "users":
				return ec.fieldContext_Vendor_users(ctx, field)
			case "website":
				return ec.fieldContext_Vendor_website(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Vendor_facebook_url(ctx, field)
			case "instagram_url":
				return ec.fieldContext_Vendor_instagram_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Vendor_twitter_url(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Vendor_linkedin_url(ctx, field)
			case "created_at":
				return ec.fieldContext_Vendor_created_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Vendor_created_by(ctx, field)
			case "updated_at":
				return ec.fieldContext_Vendor_updated_at(ctx, field)
			case "updated_by":
				return ec.fieldContext_Vendor_updated_by(ctx, field)
			case "status":
				return ec.fieldContext_Vendor_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vendor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addVendor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVendor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateVendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVendor(rctx, fc.Args["input"].(*model.VendorInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Vendor)
	fc.Result = res
	return ec.marshalOVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateVendor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendorId":
				return ec.fieldContext_Vendor_vendorId(ctx, field)
			case "type":
				return ec.fieldContext_Vendor_type(ctx, field)
			case "level":
				return ec.fieldContext_Vendor_level(ctx, field)
			case "name":
				return ec.fieldContext_Vendor_name(ctx, field)
			case "description":
				return ec.fieldContext_Vendor_description(ctx, field)
			case "photo_url":
				return ec.fieldContext_Vendor_photo_url(ctx, field)
			case "address":
				return ec.fieldContext_Vendor_address(ctx, field)
			case "users":
				return ec.fieldContext_Vendor_users(ctx, field)
			case "website":
				return ec.fieldContext_Vendor_website(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Vendor_facebook_url(ctx, field)
			case "instagram_url":
				return ec.fieldContext_Vendor_instagram_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Vendor_twitter_url(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Vendor_linkedin_url(ctx, field)
			case "created_at":
				return ec.fieldContext_Vendor_created_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Vendor_created_by(ctx, field)
			case "updated_at":
				return ec.fieldContext_Vendor_updated_at(ctx, field)
			case "updated_by":
				return ec.fieldContext_Vendor_updated_by(ctx, field)
			case "status":
				return ec.fieldContext_Vendor_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vendor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVendor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProfileVendor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProfileVendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProfileVendor(rctx, fc.Args["input"].(*model.VendorProfile))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProfileVendor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProfileVendor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createExperienceVendor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createExperienceVendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateExperienceVendor(rctx, fc.Args["input"].(model.ExperienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createExperienceVendor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createExperienceVendor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadSampleFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadSampleFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadSampleFile(rctx, fc.Args["input"].(*model.SampleFile))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadSampleFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadSampleFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Organization_org_id(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_org_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_org_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_logo_url(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_logo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_logo_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_industry(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_industry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_industry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_type(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_subdomain(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_subdomain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subdomain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_subdomain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_employee_count(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_employee_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployeeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_employee_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_website(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_website(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_linkedin_url(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_linkedin_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedinURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_linkedin_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_facebook_url(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_facebook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacebookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_facebook_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_twitter_url(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_twitter_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitterURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_twitter_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_status(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_created_at(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_created_by(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_ou_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_ou_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OuID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_ou_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_org_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_org_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_org_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_emp_count(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_emp_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmpCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_emp_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_address(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_city(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_state(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_country(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_postal_code(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_postal_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_postal_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_status(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_created_at(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_created_by(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUnit_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUnit_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUnit_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedBookmarks_bookmarks(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedBookmarks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedBookmarks_bookmarks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bookmarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserBookmark)
	fc.Result = res
	return ec.marshalOUserBookmark2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedBookmarks_bookmarks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedBookmarks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_bm_id":
				return ec.fieldContext_UserBookmark_user_bm_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserBookmark_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserBookmark_user_lsp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserBookmark_user_course_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserBookmark_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserBookmark_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserBookmark_topic_id(ctx, field)
			case "name":
				return ec.fieldContext_UserBookmark_name(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserBookmark_time_stamp(ctx, field)
			case "is_active":
				return ec.fieldContext_UserBookmark_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserBookmark_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserBookmark_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserBookmark_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserBookmark_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserBookmark", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedBookmarks_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedBookmarks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedBookmarks_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedBookmarks_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedBookmarks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedBookmarks_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedBookmarks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedBookmarks_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedBookmarks_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedBookmarks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedBookmarks_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedBookmarks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedBookmarks_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedBookmarks_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedBookmarks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCCStats_stats(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCCStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCCStats_stats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CourseConsumptionStats)
	fc.Result = res
	return ec.marshalOCourseConsumptionStats2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseConsumptionStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCCStats_stats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCCStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CourseConsumptionStats_ID(ctx, field)
			case "LspId":
				return ec.fieldContext_CourseConsumptionStats_LspId(ctx, field)
			case "CourseId":
				return ec.fieldContext_CourseConsumptionStats_CourseId(ctx, field)
			case "Category":
				return ec.fieldContext_CourseConsumptionStats_Category(ctx, field)
			case "SubCategory":
				return ec.fieldContext_CourseConsumptionStats_SubCategory(ctx, field)
			case "Owner":
				return ec.fieldContext_CourseConsumptionStats_Owner(ctx, field)
			case "Duration":
				return ec.fieldContext_CourseConsumptionStats_Duration(ctx, field)
			case "TotalLearners":
				return ec.fieldContext_CourseConsumptionStats_TotalLearners(ctx, field)
			case "ActiveLearners":
				return ec.fieldContext_CourseConsumptionStats_ActiveLearners(ctx, field)
			case "CompletedLearners":
				return ec.fieldContext_CourseConsumptionStats_CompletedLearners(ctx, field)
			case "ExpectedCompletionTime":
				return ec.fieldContext_CourseConsumptionStats_ExpectedCompletionTime(ctx, field)
			case "AverageCompletionTime":
				return ec.fieldContext_CourseConsumptionStats_AverageCompletionTime(ctx, field)
			case "AverageComplianceScore":
				return ec.fieldContext_CourseConsumptionStats_AverageComplianceScore(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_CourseConsumptionStats_CreatedAt(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_CourseConsumptionStats_UpdatedAt(ctx, field)
			case "CreatedBy":
				return ec.fieldContext_CourseConsumptionStats_CreatedBy(ctx, field)
			case "UpdatedBy":
				return ec.fieldContext_CourseConsumptionStats_UpdatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CourseConsumptionStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCCStats_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCCStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCCStats_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCCStats_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCCStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCCStats_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCCStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCCStats_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCCStats_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCCStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCCStats_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCCStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCCStats_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCCStats_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCCStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohorts_cohorts(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohorts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohorts_cohorts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cohorts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCohort)
	fc.Result = res
	return ec.marshalOUserCohort2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohorts_cohorts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohorts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cohort_id":
				return ec.fieldContext_UserCohort_user_cohort_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCohort_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCohort_user_lsp_id(ctx, field)
			case "cohort_id":
				return ec.fieldContext_UserCohort_cohort_id(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCohort_added_by(ctx, field)
			case "membership_status":
				return ec.fieldContext_UserCohort_membership_status(ctx, field)
			case "role":
				return ec.fieldContext_UserCohort_role(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCohort_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCohort_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCohort_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCohort_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCohort", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohorts_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohorts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohorts_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohorts_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohorts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohorts_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohorts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohorts_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohorts_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohorts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohorts_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohorts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohorts_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohorts_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohorts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohortsMain_cohorts(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohortsMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohortsMain_cohorts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cohorts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CohortMain)
	fc.Result = res
	return ec.marshalOCohortMain2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohortsMain_cohorts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohortsMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohort_id":
				return ec.fieldContext_CohortMain_cohort_id(ctx, field)
			case "name":
				return ec.fieldContext_CohortMain_name(ctx, field)
			case "description":
				return ec.fieldContext_CohortMain_description(ctx, field)
			case "lsp_id":
				return ec.fieldContext_CohortMain_lsp_id(ctx, field)
			case "code":
				return ec.fieldContext_CohortMain_code(ctx, field)
			case "status":
				return ec.fieldContext_CohortMain_status(ctx, field)
			case "type":
				return ec.fieldContext_CohortMain_type(ctx, field)
			case "is_active":
				return ec.fieldContext_CohortMain_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_CohortMain_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_CohortMain_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_CohortMain_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CohortMain_updated_at(ctx, field)
			case "size":
				return ec.fieldContext_CohortMain_size(ctx, field)
			case "imageUrl":
				return ec.fieldContext_CohortMain_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CohortMain", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohortsMain_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohortsMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohortsMain_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohortsMain_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohortsMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohortsMain_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohortsMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohortsMain_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohortsMain_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohortsMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCohortsMain_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCohortsMain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCohortsMain_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCohortsMain_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCohortsMain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCourseMaps_user_courses(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCourseMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCourseMaps_user_courses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourse)
	fc.Result = res
	return ec.marshalOUserCourse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCourseMaps_user_courses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCourseMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_course_id":
				return ec.fieldContext_UserCourse_user_course_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourse_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserCourse_lsp_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCourse_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserCourse_course_id(ctx, field)
			case "course_type":
				return ec.fieldContext_UserCourse_course_type(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCourse_added_by(ctx, field)
			case "is_mandatory":
				return ec.fieldContext_UserCourse_is_mandatory(ctx, field)
			case "end_date":
				return ec.fieldContext_UserCourse_end_date(ctx, field)
			case "course_status":
				return ec.fieldContext_UserCourse_course_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourse_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourse_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCourseMaps_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCourseMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCourseMaps_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCourseMaps_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCourseMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCourseMaps_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCourseMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCourseMaps_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCourseMaps_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCourseMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedCourseMaps_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedCourseMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedCourseMaps_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedCourseMaps_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedCourseMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedNotes_notes(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedNotes_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserNotes)
	fc.Result = res
	return ec.marshalOUserNotes2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedNotes_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_notes_id":
				return ec.fieldContext_UserNotes_user_notes_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserNotes_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserNotes_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserNotes_course_id(ctx, field)
			case "module_id":
				return ec.fieldContext_UserNotes_module_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserNotes_topic_id(ctx, field)
			case "sequence":
				return ec.fieldContext_UserNotes_sequence(ctx, field)
			case "status":
				return ec.fieldContext_UserNotes_status(ctx, field)
			case "details":
				return ec.fieldContext_UserNotes_details(ctx, field)
			case "is_active":
				return ec.fieldContext_UserNotes_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserNotes_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserNotes_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserNotes_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserNotes_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedNotes_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedNotes_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedNotes_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedNotes_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedNotes_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedNotes_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedNotes_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedNotes_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedNotes_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUserLspMaps_user_lsp_maps(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUserLspMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUserLspMaps_user_lsp_maps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspMaps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserLspMap)
	fc.Result = res
	return ec.marshalOUserLspMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUserLspMaps_user_lsp_maps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUserLspMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_id":
				return ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLspMap_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserLspMap_lsp_id(ctx, field)
			case "status":
				return ec.fieldContext_UserLspMap_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLspMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLspMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLspMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLspMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLspMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUserLspMaps_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUserLspMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUserLspMaps_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUserLspMaps_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUserLspMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUserLspMaps_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUserLspMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUserLspMaps_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUserLspMaps_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUserLspMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUserLspMaps_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUserLspMaps) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUserLspMaps_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUserLspMaps_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUserLspMaps",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUsers_users(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUsers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUsers_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUsers_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUsers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUsers_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUsers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUsers_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUsers_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUsers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUsers_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUsers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUsers_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUsers_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUsers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedUsers_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedUsers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedUsers_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedUsers_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedUsers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedVendors_vendors(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedVendors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedVendors_vendors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vendor)
	fc.Result = res
	return ec.marshalOVendor2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedVendors_vendors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedVendors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendorId":
				return ec.fieldContext_Vendor_vendorId(ctx, field)
			case "type":
				return ec.fieldContext_Vendor_type(ctx, field)
			case "level":
				return ec.fieldContext_Vendor_level(ctx, field)
			case "name":
				return ec.fieldContext_Vendor_name(ctx, field)
			case "description":
				return ec.fieldContext_Vendor_description(ctx, field)
			case "photo_url":
				return ec.fieldContext_Vendor_photo_url(ctx, field)
			case "address":
				return ec.fieldContext_Vendor_address(ctx, field)
			case "users":
				return ec.fieldContext_Vendor_users(ctx, field)
			case "website":
				return ec.fieldContext_Vendor_website(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Vendor_facebook_url(ctx, field)
			case "instagram_url":
				return ec.fieldContext_Vendor_instagram_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Vendor_twitter_url(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Vendor_linkedin_url(ctx, field)
			case "created_at":
				return ec.fieldContext_Vendor_created_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Vendor_created_by(ctx, field)
			case "updated_at":
				return ec.fieldContext_Vendor_updated_at(ctx, field)
			case "updated_by":
				return ec.fieldContext_Vendor_updated_by(ctx, field)
			case "status":
				return ec.fieldContext_Vendor_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vendor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedVendors_pageCursor(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedVendors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedVendors_pageCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedVendors_pageCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedVendors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedVendors_direction(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedVendors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedVendors_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedVendors_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedVendors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaginatedVendors_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.PaginatedVendors) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaginatedVendors_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaginatedVendors_pageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaginatedVendors",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_logout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserLspMapsByLspId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserLspMapsByLspId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserLspMapsByLspID(rctx, fc.Args["lsp_id"].(string), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedUserLspMaps)
	fc.Result = res
	return ec.marshalOPaginatedUserLspMaps2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedUserLspMaps(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserLspMapsByLspId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_maps":
				return ec.fieldContext_PaginatedUserLspMaps_user_lsp_maps(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedUserLspMaps_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedUserLspMaps_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedUserLspMaps_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedUserLspMaps", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserLspMapsByLspId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUsersForAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUsersForAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUsersForAdmin(rctx, fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int), fc.Args["filters"].(*model.UserFilters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedUsers)
	fc.Result = res
	return ec.marshalOPaginatedUsers2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedUsers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUsersForAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_PaginatedUsers_users(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedUsers_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedUsers_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedUsers_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedUsers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUsersForAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserDetails(rctx, fc.Args["user_ids"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserOrganizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserOrganizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserOrganizations(rctx, fc.Args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserOrganizationMap)
	fc.Result = res
	return ec.marshalOUserOrganizationMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserOrganizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_organization_id":
				return ec.fieldContext_UserOrganizationMap_user_organization_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserOrganizationMap_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserOrganizationMap_user_lsp_id(ctx, field)
			case "organization_id":
				return ec.fieldContext_UserOrganizationMap_organization_id(ctx, field)
			case "organization_role":
				return ec.fieldContext_UserOrganizationMap_organization_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserOrganizationMap_is_active(ctx, field)
			case "employee_id":
				return ec.fieldContext_UserOrganizationMap_employee_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserOrganizationMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserOrganizationMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserOrganizationMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserOrganizationMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserOrganizationMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserOrganizations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserOrgDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserOrgDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserOrgDetails(rctx, fc.Args["user_id"].(string), fc.Args["user_lsp_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserOrganizationMap)
	fc.Result = res
	return ec.marshalOUserOrganizationMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserOrgDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_organization_id":
				return ec.fieldContext_UserOrganizationMap_user_organization_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserOrganizationMap_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserOrganizationMap_user_lsp_id(ctx, field)
			case "organization_id":
				return ec.fieldContext_UserOrganizationMap_organization_id(ctx, field)
			case "organization_role":
				return ec.fieldContext_UserOrganizationMap_organization_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserOrganizationMap_is_active(ctx, field)
			case "employee_id":
				return ec.fieldContext_UserOrganizationMap_employee_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserOrganizationMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserOrganizationMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserOrganizationMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserOrganizationMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserOrganizationMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserOrgDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserPreferences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserPreferences(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserPreferences(rctx, fc.Args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserPreference)
	fc.Result = res
	return ec.marshalOUserPreference2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserPreferences(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_preference_id":
				return ec.fieldContext_UserPreference_user_preference_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserPreference_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserPreference_user_lsp_id(ctx, field)
			case "sub_category":
				return ec.fieldContext_UserPreference_sub_category(ctx, field)
			case "is_base":
				return ec.fieldContext_UserPreference_is_base(ctx, field)
			case "is_active":
				return ec.fieldContext_UserPreference_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserPreference_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserPreference_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserPreference_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserPreference_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserPreferences_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserPreferenceForLsp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserPreferenceForLsp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserPreferenceForLsp(rctx, fc.Args["user_id"].(string), fc.Args["user_lsp_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserPreference)
	fc.Result = res
	return ec.marshalOUserPreference2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserPreferenceForLsp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_preference_id":
				return ec.fieldContext_UserPreference_user_preference_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserPreference_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserPreference_user_lsp_id(ctx, field)
			case "sub_category":
				return ec.fieldContext_UserPreference_sub_category(ctx, field)
			case "is_base":
				return ec.fieldContext_UserPreference_is_base(ctx, field)
			case "is_active":
				return ec.fieldContext_UserPreference_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserPreference_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserPreference_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserPreference_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserPreference_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreference", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserPreferenceForLsp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserLsps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserLsps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserLsps(rctx, fc.Args["user_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserLspMap)
	fc.Result = res
	return ec.marshalOUserLspMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserLsps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_id":
				return ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLspMap_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserLspMap_lsp_id(ctx, field)
			case "status":
				return ec.fieldContext_UserLspMap_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLspMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLspMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLspMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLspMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLspMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserLsps_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserLspByLspId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserLspByLspId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserLspByLspID(rctx, fc.Args["user_id"].(string), fc.Args["lsp_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserLspMap)
	fc.Result = res
	return ec.marshalOUserLspMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserLspByLspId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_lsp_id":
				return ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserLspMap_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserLspMap_lsp_id(ctx, field)
			case "status":
				return ec.fieldContext_UserLspMap_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserLspMap_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserLspMap_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserLspMap_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserLspMap_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserLspMap", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserLspByLspId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserCourseMaps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserCourseMaps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCourseMaps(rctx, fc.Args["user_id"].(string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int), fc.Args["filters"].(*model.CourseMapFilters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedCourseMaps)
	fc.Result = res
	return ec.marshalOPaginatedCourseMaps2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCourseMaps(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserCourseMaps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_courses":
				return ec.fieldContext_PaginatedCourseMaps_user_courses(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedCourseMaps_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedCourseMaps_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedCourseMaps_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedCourseMaps", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserCourseMaps_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserCourseMapStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserCourseMapStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCourseMapStats(rctx, fc.Args["input"].(model.UserCourseMapStatsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserCourseMapStats)
	fc.Result = res
	return ec.marshalOUserCourseMapStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseMapStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserCourseMapStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_UserCourseMapStats_lsp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourseMapStats_user_id(ctx, field)
			case "type_stats":
				return ec.fieldContext_UserCourseMapStats_type_stats(ctx, field)
			case "status_stats":
				return ec.fieldContext_UserCourseMapStats_status_stats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourseMapStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserCourseMapStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserCourseMapByCourseID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserCourseMapByCourseID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCourseMapByCourseID(rctx, fc.Args["user_id"].(string), fc.Args["course_id"].(string), fc.Args["lsp_id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourse)
	fc.Result = res
	return ec.marshalOUserCourse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserCourseMapByCourseID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_course_id":
				return ec.fieldContext_UserCourse_user_course_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourse_user_id(ctx, field)
			case "lsp_id":
				return ec.fieldContext_UserCourse_lsp_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserCourse_user_lsp_id(ctx, field)
			case "course_id":
				return ec.fieldContext_UserCourse_course_id(ctx, field)
			case "course_type":
				return ec.fieldContext_UserCourse_course_type(ctx, field)
			case "added_by":
				return ec.fieldContext_UserCourse_added_by(ctx, field)
			case "is_mandatory":
				return ec.fieldContext_UserCourse_is_mandatory(ctx, field)
			case "end_date":
				return ec.fieldContext_UserCourse_end_date(ctx, field)
			case "course_status":
				return ec.fieldContext_UserCourse_course_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourse_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourse_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourse_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourse_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserCourseMapByCourseID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserCourseProgressByMapId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserCourseProgressByMapId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCourseProgressByMapID(rctx, fc.Args["user_id"].(string), fc.Args["user_course_id"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourseProgress)
	fc.Result = res
	return ec.marshalOUserCourseProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserCourseProgressByMapId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cp_id":
				return ec.fieldContext_UserCourseProgress_user_cp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourseProgress_user_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserCourseProgress_user_course_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserCourseProgress_topic_id(ctx, field)
			case "topic_type":
				return ec.fieldContext_UserCourseProgress_topic_type(ctx, field)
			case "status":
				return ec.fieldContext_UserCourseProgress_status(ctx, field)
			case "video_progress":
				return ec.fieldContext_UserCourseProgress_video_progress(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserCourseProgress_time_stamp(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourseProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourseProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourseProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourseProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourseProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserCourseProgressByMapId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserCourseProgressByTopicId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserCourseProgressByTopicId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCourseProgressByTopicID(rctx, fc.Args["user_id"].(string), fc.Args["topic_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserCourseProgress)
	fc.Result = res
	return ec.marshalOUserCourseProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserCourseProgressByTopicId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_cp_id":
				return ec.fieldContext_UserCourseProgress_user_cp_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserCourseProgress_user_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserCourseProgress_user_course_id(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserCourseProgress_topic_id(ctx, field)
			case "topic_type":
				return ec.fieldContext_UserCourseProgress_topic_type(ctx, field)
			case "status":
				return ec.fieldContext_UserCourseProgress_status(ctx, field)
			case "video_progress":
				return ec.fieldContext_UserCourseProgress_video_progress(ctx, field)
			case "time_stamp":
				return ec.fieldContext_UserCourseProgress_time_stamp(ctx, field)
			case "created_by":
				return ec.fieldContext_UserCourseProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserCourseProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserCourseProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserCourseProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserCourseProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserCourseProgressByTopicId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserNotes(rctx, fc.Args["user_id"].(string), fc.Args["user_lsp_id"].(*string), fc.Args["course_id"].(*string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedNotes)
	fc.Result = res
	return ec.marshalOPaginatedNotes2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedNotes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notes":
				return ec.fieldContext_PaginatedNotes_notes(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedNotes_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedNotes_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedNotes_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedNotes", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserNotes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserBookmarks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserBookmarks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserBookmarks(rctx, fc.Args["user_id"].(string), fc.Args["user_lsp_id"].(*string), fc.Args["course_id"].(*string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedBookmarks)
	fc.Result = res
	return ec.marshalOPaginatedBookmarks2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedBookmarks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserBookmarks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bookmarks":
				return ec.fieldContext_PaginatedBookmarks_bookmarks(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedBookmarks_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedBookmarks_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedBookmarks_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedBookmarks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserBookmarks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserExamAttempts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserExamAttempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserExamAttempts(rctx, fc.Args["user_id"].(*string), fc.Args["exam_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamAttempts)
	fc.Result = res
	return ec.marshalOUserExamAttempts2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserExamAttempts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ea_id":
				return ec.fieldContext_UserExamAttempts_user_ea_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamAttempts_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamAttempts_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamAttempts_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserExamAttempts_user_course_id(ctx, field)
			case "exam_id":
				return ec.fieldContext_UserExamAttempts_exam_id(ctx, field)
			case "attempt_no":
				return ec.fieldContext_UserExamAttempts_attempt_no(ctx, field)
			case "attempt_status":
				return ec.fieldContext_UserExamAttempts_attempt_status(ctx, field)
			case "attempt_start_time":
				return ec.fieldContext_UserExamAttempts_attempt_start_time(ctx, field)
			case "attempt_duration":
				return ec.fieldContext_UserExamAttempts_attempt_duration(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamAttempts_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamAttempts_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamAttempts_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamAttempts_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamAttempts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserExamAttempts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserExamResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserExamResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserExamResults(rctx, fc.Args["user_ea_details"].([]*model.UserExamResultDetails))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamResultInfo)
	fc.Result = res
	return ec.marshalOUserExamResultInfo2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserExamResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_id":
				return ec.fieldContext_UserExamResultInfo_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamResultInfo_user_ea_id(ctx, field)
			case "results":
				return ec.fieldContext_UserExamResultInfo_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamResultInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserExamResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserExamProgress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserExamProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserExamProgress(rctx, fc.Args["user_id"].(string), fc.Args["user_ea_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamProgress)
	fc.Result = res
	return ec.marshalOUserExamProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserExamProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_ep_id":
				return ec.fieldContext_UserExamProgress_user_ep_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamProgress_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamProgress_user_ea_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserExamProgress_user_lsp_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserExamProgress_user_cp_id(ctx, field)
			case "sr_no":
				return ec.fieldContext_UserExamProgress_sr_no(ctx, field)
			case "question_id":
				return ec.fieldContext_UserExamProgress_question_id(ctx, field)
			case "question_type":
				return ec.fieldContext_UserExamProgress_question_type(ctx, field)
			case "answer":
				return ec.fieldContext_UserExamProgress_answer(ctx, field)
			case "q_attempt_status":
				return ec.fieldContext_UserExamProgress_q_attempt_status(ctx, field)
			case "total_time_spent":
				return ec.fieldContext_UserExamProgress_total_time_spent(ctx, field)
			case "correct_answer":
				return ec.fieldContext_UserExamProgress_correct_answer(ctx, field)
			case "section_id":
				return ec.fieldContext_UserExamProgress_section_id(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamProgress_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamProgress_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamProgress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamProgress_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamProgress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserExamProgress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLatestCohorts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLatestCohorts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLatestCohorts(rctx, fc.Args["user_id"].(*string), fc.Args["user_lsp_id"].(*string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedCohorts)
	fc.Result = res
	return ec.marshalOPaginatedCohorts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCohorts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLatestCohorts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohorts":
				return ec.fieldContext_PaginatedCohorts_cohorts(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedCohorts_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedCohorts_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedCohorts_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedCohorts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLatestCohorts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCohortUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCohortUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCohortUsers(rctx, fc.Args["cohort_id"].(string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedCohorts)
	fc.Result = res
	return ec.marshalOPaginatedCohorts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCohorts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCohortUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohorts":
				return ec.fieldContext_PaginatedCohorts_cohorts(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedCohorts_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedCohorts_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedCohorts_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedCohorts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCohortUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserQuizAttempts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserQuizAttempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserQuizAttempts(rctx, fc.Args["user_id"].(string), fc.Args["topic_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserQuizAttempt)
	fc.Result = res
	return ec.marshalOUserQuizAttempt2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserQuizAttempts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_qa_id":
				return ec.fieldContext_UserQuizAttempt_user_qa_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserQuizAttempt_user_id(ctx, field)
			case "user_cp_id":
				return ec.fieldContext_UserQuizAttempt_user_cp_id(ctx, field)
			case "user_course_id":
				return ec.fieldContext_UserQuizAttempt_user_course_id(ctx, field)
			case "quiz_id":
				return ec.fieldContext_UserQuizAttempt_quiz_id(ctx, field)
			case "quiz_attempt":
				return ec.fieldContext_UserQuizAttempt_quiz_attempt(ctx, field)
			case "topic_id":
				return ec.fieldContext_UserQuizAttempt_topic_id(ctx, field)
			case "result":
				return ec.fieldContext_UserQuizAttempt_result(ctx, field)
			case "is_active":
				return ec.fieldContext_UserQuizAttempt_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserQuizAttempt_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserQuizAttempt_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserQuizAttempt_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserQuizAttempt_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserQuizAttempt", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserQuizAttempts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCohortDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCohortDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCohortDetails(rctx, fc.Args["cohort_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CohortMain)
	fc.Result = res
	return ec.marshalOCohortMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCohortDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohort_id":
				return ec.fieldContext_CohortMain_cohort_id(ctx, field)
			case "name":
				return ec.fieldContext_CohortMain_name(ctx, field)
			case "description":
				return ec.fieldContext_CohortMain_description(ctx, field)
			case "lsp_id":
				return ec.fieldContext_CohortMain_lsp_id(ctx, field)
			case "code":
				return ec.fieldContext_CohortMain_code(ctx, field)
			case "status":
				return ec.fieldContext_CohortMain_status(ctx, field)
			case "type":
				return ec.fieldContext_CohortMain_type(ctx, field)
			case "is_active":
				return ec.fieldContext_CohortMain_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_CohortMain_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_CohortMain_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_CohortMain_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_CohortMain_updated_at(ctx, field)
			case "size":
				return ec.fieldContext_CohortMain_size(ctx, field)
			case "imageUrl":
				return ec.fieldContext_CohortMain_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CohortMain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCohortDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCohortMains(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCohortMains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCohortMains(rctx, fc.Args["lsp_id"].(string), fc.Args["publish_time"].(*int), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int), fc.Args["searchText"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedCohortsMain)
	fc.Result = res
	return ec.marshalOPaginatedCohortsMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCohortsMain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCohortMains(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cohorts":
				return ec.fieldContext_PaginatedCohortsMain_cohorts(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedCohortsMain_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedCohortsMain_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedCohortsMain_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedCohortsMain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCohortMains_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getOrganizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getOrganizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOrganizations(rctx, fc.Args["org_ids"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getOrganizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "org_id":
				return ec.fieldContext_Organization_org_id(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_Organization_logo_url(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "type":
				return ec.fieldContext_Organization_type(ctx, field)
			case "subdomain":
				return ec.fieldContext_Organization_subdomain(ctx, field)
			case "employee_count":
				return ec.fieldContext_Organization_employee_count(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Organization_linkedin_url(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Organization_facebook_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Organization_twitter_url(ctx, field)
			case "status":
				return ec.fieldContext_Organization_status(ctx, field)
			case "created_at":
				return ec.fieldContext_Organization_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Organization_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Organization_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_Organization_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getOrganizations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getOrganizationsByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getOrganizationsByName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOrganizationsByName(rctx, fc.Args["name"].(*string), fc.Args["prevPageSnapShot"].(string), fc.Args["pageSize"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getOrganizationsByName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "org_id":
				return ec.fieldContext_Organization_org_id(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_Organization_logo_url(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "type":
				return ec.fieldContext_Organization_type(ctx, field)
			case "subdomain":
				return ec.fieldContext_Organization_subdomain(ctx, field)
			case "employee_count":
				return ec.fieldContext_Organization_employee_count(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Organization_linkedin_url(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Organization_facebook_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Organization_twitter_url(ctx, field)
			case "status":
				return ec.fieldContext_Organization_status(ctx, field)
			case "created_at":
				return ec.fieldContext_Organization_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Organization_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Organization_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_Organization_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getOrganizationsByName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getOrganizationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getOrganizationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOrganizationUnits(rctx, fc.Args["ou_ids"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationUnit)
	fc.Result = res
	return ec.marshalOOrganizationUnit2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getOrganizationUnits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ou_id":
				return ec.fieldContext_OrganizationUnit_ou_id(ctx, field)
			case "org_id":
				return ec.fieldContext_OrganizationUnit_org_id(ctx, field)
			case "emp_count":
				return ec.fieldContext_OrganizationUnit_emp_count(ctx, field)
			case "address":
				return ec.fieldContext_OrganizationUnit_address(ctx, field)
			case "city":
				return ec.fieldContext_OrganizationUnit_city(ctx, field)
			case "state":
				return ec.fieldContext_OrganizationUnit_state(ctx, field)
			case "country":
				return ec.fieldContext_OrganizationUnit_country(ctx, field)
			case "postal_code":
				return ec.fieldContext_OrganizationUnit_postal_code(ctx, field)
			case "status":
				return ec.fieldContext_OrganizationUnit_status(ctx, field)
			case "created_at":
				return ec.fieldContext_OrganizationUnit_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OrganizationUnit_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_OrganizationUnit_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_OrganizationUnit_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getOrganizationUnits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUnitsByOrgId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUnitsByOrgId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUnitsByOrgID(rctx, fc.Args["org_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationUnit)
	fc.Result = res
	return ec.marshalOOrganizationUnit2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUnitsByOrgId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ou_id":
				return ec.fieldContext_OrganizationUnit_ou_id(ctx, field)
			case "org_id":
				return ec.fieldContext_OrganizationUnit_org_id(ctx, field)
			case "emp_count":
				return ec.fieldContext_OrganizationUnit_emp_count(ctx, field)
			case "address":
				return ec.fieldContext_OrganizationUnit_address(ctx, field)
			case "city":
				return ec.fieldContext_OrganizationUnit_city(ctx, field)
			case "state":
				return ec.fieldContext_OrganizationUnit_state(ctx, field)
			case "country":
				return ec.fieldContext_OrganizationUnit_country(ctx, field)
			case "postal_code":
				return ec.fieldContext_OrganizationUnit_postal_code(ctx, field)
			case "status":
				return ec.fieldContext_OrganizationUnit_status(ctx, field)
			case "created_at":
				return ec.fieldContext_OrganizationUnit_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OrganizationUnit_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_OrganizationUnit_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_OrganizationUnit_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUnitsByOrgId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLearningSpacesByOrgId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLearningSpacesByOrgId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLearningSpacesByOrgID(rctx, fc.Args["org_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LearningSpace)
	fc.Result = res
	return ec.marshalOLearningSpace2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLearningSpacesByOrgId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_LearningSpace_lsp_id(ctx, field)
			case "org_id":
				return ec.fieldContext_LearningSpace_org_id(ctx, field)
			case "ou_id":
				return ec.fieldContext_LearningSpace_ou_id(ctx, field)
			case "name":
				return ec.fieldContext_LearningSpace_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_LearningSpace_logo_url(ctx, field)
			case "profile_url":
				return ec.fieldContext_LearningSpace_profile_url(ctx, field)
			case "no_users":
				return ec.fieldContext_LearningSpace_no_users(ctx, field)
			case "owners":
				return ec.fieldContext_LearningSpace_owners(ctx, field)
			case "is_default":
				return ec.fieldContext_LearningSpace_is_default(ctx, field)
			case "status":
				return ec.fieldContext_LearningSpace_status(ctx, field)
			case "created_at":
				return ec.fieldContext_LearningSpace_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_LearningSpace_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_LearningSpace_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_LearningSpace_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LearningSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLearningSpacesByOrgId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLearningSpacesByOuId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLearningSpacesByOuId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLearningSpacesByOuID(rctx, fc.Args["ou_id"].(string), fc.Args["org_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LearningSpace)
	fc.Result = res
	return ec.marshalOLearningSpace2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLearningSpacesByOuId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_LearningSpace_lsp_id(ctx, field)
			case "org_id":
				return ec.fieldContext_LearningSpace_org_id(ctx, field)
			case "ou_id":
				return ec.fieldContext_LearningSpace_ou_id(ctx, field)
			case "name":
				return ec.fieldContext_LearningSpace_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_LearningSpace_logo_url(ctx, field)
			case "profile_url":
				return ec.fieldContext_LearningSpace_profile_url(ctx, field)
			case "no_users":
				return ec.fieldContext_LearningSpace_no_users(ctx, field)
			case "owners":
				return ec.fieldContext_LearningSpace_owners(ctx, field)
			case "is_default":
				return ec.fieldContext_LearningSpace_is_default(ctx, field)
			case "status":
				return ec.fieldContext_LearningSpace_status(ctx, field)
			case "created_at":
				return ec.fieldContext_LearningSpace_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_LearningSpace_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_LearningSpace_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_LearningSpace_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LearningSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLearningSpacesByOuId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLearningSpaceDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getLearningSpaceDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLearningSpaceDetails(rctx, fc.Args["lsp_ids"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LearningSpace)
	fc.Result = res
	return ec.marshalOLearningSpace2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getLearningSpaceDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lsp_id":
				return ec.fieldContext_LearningSpace_lsp_id(ctx, field)
			case "org_id":
				return ec.fieldContext_LearningSpace_org_id(ctx, field)
			case "ou_id":
				return ec.fieldContext_LearningSpace_ou_id(ctx, field)
			case "name":
				return ec.fieldContext_LearningSpace_name(ctx, field)
			case "logo_url":
				return ec.fieldContext_LearningSpace_logo_url(ctx, field)
			case "profile_url":
				return ec.fieldContext_LearningSpace_profile_url(ctx, field)
			case "no_users":
				return ec.fieldContext_LearningSpace_no_users(ctx, field)
			case "owners":
				return ec.fieldContext_LearningSpace_owners(ctx, field)
			case "is_default":
				return ec.fieldContext_LearningSpace_is_default(ctx, field)
			case "status":
				return ec.fieldContext_LearningSpace_status(ctx, field)
			case "created_at":
				return ec.fieldContext_LearningSpace_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_LearningSpace_updated_at(ctx, field)
			case "created_by":
				return ec.fieldContext_LearningSpace_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_LearningSpace_updated_by(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LearningSpace", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLearningSpaceDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserLspRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserLspRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserLspRoles(rctx, fc.Args["user_id"].(string), fc.Args["user_lsp_ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserRole)
	fc.Result = res
	return ec.marshalOUserRole2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserLspRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_role_id":
				return ec.fieldContext_UserRole_user_role_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserRole_user_id(ctx, field)
			case "user_lsp_id":
				return ec.fieldContext_UserRole_user_lsp_id(ctx, field)
			case "role":
				return ec.fieldContext_UserRole_role(ctx, field)
			case "is_active":
				return ec.fieldContext_UserRole_is_active(ctx, field)
			case "created_by":
				return ec.fieldContext_UserRole_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserRole_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserRole_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserRole_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserLspRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCourseConsumptionStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCourseConsumptionStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCourseConsumptionStats(rctx, fc.Args["lsp_id"].(string), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedCCStats)
	fc.Result = res
	return ec.marshalOPaginatedCCStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCCStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCourseConsumptionStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stats":
				return ec.fieldContext_PaginatedCCStats_stats(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedCCStats_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedCCStats_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedCCStats_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedCCStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCourseConsumptionStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCourseViews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCourseViews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCourseViews(rctx, fc.Args["lsp_ids"].([]string), fc.Args["start_time"].(*string), fc.Args["end_time"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CourseViews)
	fc.Result = res
	return ec.marshalOCourseViews2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseViews(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCourseViews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_CourseViews_seconds(ctx, field)
			case "created_at":
				return ec.fieldContext_CourseViews_created_at(ctx, field)
			case "lsp_id":
				return ec.fieldContext_CourseViews_lsp_id(ctx, field)
			case "user_ids":
				return ec.fieldContext_CourseViews_user_ids(ctx, field)
			case "date_string":
				return ec.fieldContext_CourseViews_date_string(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CourseViews", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCourseViews_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVendorExperience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVendorExperience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVendorExperience(rctx, fc.Args["vendor_id"].(string), fc.Args["exp_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ExperienceVendor)
	fc.Result = res
	return ec.marshalOExperienceVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐExperienceVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVendorExperience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ExpId":
				return ec.fieldContext_ExperienceVendor_ExpId(ctx, field)
			case "VendorId":
				return ec.fieldContext_ExperienceVendor_VendorId(ctx, field)
			case "PfId":
				return ec.fieldContext_ExperienceVendor_PfId(ctx, field)
			case "StartDate":
				return ec.fieldContext_ExperienceVendor_StartDate(ctx, field)
			case "EndDate":
				return ec.fieldContext_ExperienceVendor_EndDate(ctx, field)
			case "Title":
				return ec.fieldContext_ExperienceVendor_Title(ctx, field)
			case "Location":
				return ec.fieldContext_ExperienceVendor_Location(ctx, field)
			case "LocationType":
				return ec.fieldContext_ExperienceVendor_LocationType(ctx, field)
			case "EmployementType":
				return ec.fieldContext_ExperienceVendor_EmployementType(ctx, field)
			case "CompanyName":
				return ec.fieldContext_ExperienceVendor_CompanyName(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_ExperienceVendor_CreatedAt(ctx, field)
			case "CreatedBy":
				return ec.fieldContext_ExperienceVendor_CreatedBy(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_ExperienceVendor_UpdatedAt(ctx, field)
			case "UpdatedBy":
				return ec.fieldContext_ExperienceVendor_UpdatedBy(ctx, field)
			case "Status":
				return ec.fieldContext_ExperienceVendor_Status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExperienceVendor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVendorExperience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVendors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVendors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVendors(rctx, fc.Args["lsp_id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Vendor)
	fc.Result = res
	return ec.marshalOVendor2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVendors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendorId":
				return ec.fieldContext_Vendor_vendorId(ctx, field)
			case "type":
				return ec.fieldContext_Vendor_type(ctx, field)
			case "level":
				return ec.fieldContext_Vendor_level(ctx, field)
			case "name":
				return ec.fieldContext_Vendor_name(ctx, field)
			case "description":
				return ec.fieldContext_Vendor_description(ctx, field)
			case "photo_url":
				return ec.fieldContext_Vendor_photo_url(ctx, field)
			case "address":
				return ec.fieldContext_Vendor_address(ctx, field)
			case "users":
				return ec.fieldContext_Vendor_users(ctx, field)
			case "website":
				return ec.fieldContext_Vendor_website(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Vendor_facebook_url(ctx, field)
			case "instagram_url":
				return ec.fieldContext_Vendor_instagram_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Vendor_twitter_url(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Vendor_linkedin_url(ctx, field)
			case "created_at":
				return ec.fieldContext_Vendor_created_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Vendor_created_by(ctx, field)
			case "updated_at":
				return ec.fieldContext_Vendor_updated_at(ctx, field)
			case "updated_by":
				return ec.fieldContext_Vendor_updated_by(ctx, field)
			case "status":
				return ec.fieldContext_Vendor_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vendor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVendors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPaginatedVendors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPaginatedVendors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPaginatedVendors(rctx, fc.Args["lsp_id"].(*string), fc.Args["pageCursor"].(*string), fc.Args["Direction"].(*string), fc.Args["pageSize"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PaginatedVendors)
	fc.Result = res
	return ec.marshalOPaginatedVendors2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedVendors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPaginatedVendors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendors":
				return ec.fieldContext_PaginatedVendors_vendors(ctx, field)
			case "pageCursor":
				return ec.fieldContext_PaginatedVendors_pageCursor(ctx, field)
			case "direction":
				return ec.fieldContext_PaginatedVendors_direction(ctx, field)
			case "pageSize":
				return ec.fieldContext_PaginatedVendors_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaginatedVendors", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPaginatedVendors_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVendorAdmins(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVendorAdmins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVendorAdmins(rctx, fc.Args["vendor_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVendorAdmins(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "first_name":
				return ec.fieldContext_User_first_name(ctx, field)
			case "last_name":
				return ec.fieldContext_User_last_name(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "is_verified":
				return ec.fieldContext_User_is_verified(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "created_by":
				return ec.fieldContext_User_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_User_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "photo_url":
				return ec.fieldContext_User_photo_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVendorAdmins_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVendorDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVendorDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVendorDetails(rctx, fc.Args["vendor_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Vendor)
	fc.Result = res
	return ec.marshalOVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVendorDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vendorId":
				return ec.fieldContext_Vendor_vendorId(ctx, field)
			case "type":
				return ec.fieldContext_Vendor_type(ctx, field)
			case "level":
				return ec.fieldContext_Vendor_level(ctx, field)
			case "name":
				return ec.fieldContext_Vendor_name(ctx, field)
			case "description":
				return ec.fieldContext_Vendor_description(ctx, field)
			case "photo_url":
				return ec.fieldContext_Vendor_photo_url(ctx, field)
			case "address":
				return ec.fieldContext_Vendor_address(ctx, field)
			case "users":
				return ec.fieldContext_Vendor_users(ctx, field)
			case "website":
				return ec.fieldContext_Vendor_website(ctx, field)
			case "facebook_url":
				return ec.fieldContext_Vendor_facebook_url(ctx, field)
			case "instagram_url":
				return ec.fieldContext_Vendor_instagram_url(ctx, field)
			case "twitter_url":
				return ec.fieldContext_Vendor_twitter_url(ctx, field)
			case "linkedin_url":
				return ec.fieldContext_Vendor_linkedin_url(ctx, field)
			case "created_at":
				return ec.fieldContext_Vendor_created_at(ctx, field)
			case "created_by":
				return ec.fieldContext_Vendor_created_by(ctx, field)
			case "updated_at":
				return ec.fieldContext_Vendor_updated_at(ctx, field)
			case "updated_by":
				return ec.fieldContext_Vendor_updated_by(ctx, field)
			case "status":
				return ec.fieldContext_Vendor_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vendor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getVendorDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_first_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_first_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_first_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_last_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_last_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_last_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_is_verified(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_is_verified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_is_verified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_is_active(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_gender(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_created_by(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_created_at(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phone(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_photo_url(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_photo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_photo_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_user_bm_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_user_bm_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_user_bm_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_user_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_user_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_user_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_module_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_module_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_module_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_topic_id(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_name(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_time_stamp(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_time_stamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_time_stamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserBookmark_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserBookmark_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserBookmark_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_user_cohort_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_user_cohort_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCohortID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_user_cohort_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_cohort_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_cohort_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CohortID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_cohort_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_added_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_added_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_added_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_membership_status(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_membership_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MembershipStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_membership_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_role(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCohort_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCohort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCohort_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCohort_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCohort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_user_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_user_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_user_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_course_type(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_course_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_course_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_added_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_added_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_added_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_is_mandatory(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_is_mandatory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMandatory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_is_mandatory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_end_date(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_end_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_end_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_course_status(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_course_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_course_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourse_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCourse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourse_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourse_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseMapStats_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseMapStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseMapStats_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseMapStats_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseMapStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseMapStats_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseMapStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseMapStats_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseMapStats_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseMapStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseMapStats_type_stats(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseMapStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseMapStats_type_stats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeStats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseMapStats_type_stats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseMapStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Count_name(ctx, field)
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseMapStats_status_stats(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseMapStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseMapStats_status_stats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusStats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Count)
	fc.Result = res
	return ec.marshalOCount2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseMapStats_status_stats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseMapStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Count_name(ctx, field)
			case "count":
				return ec.fieldContext_Count_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Count", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_user_cp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_user_cp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_user_cp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_user_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_user_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_user_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_topic_id(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_topic_type(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_topic_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_topic_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_status(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_video_progress(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_video_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_video_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_time_stamp(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_time_stamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_time_stamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserCourseProgress_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserCourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserCourseProgress_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserCourseProgress_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserCourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_user_ea_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_user_ea_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_user_ea_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_user_cp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_user_cp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_user_cp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_user_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_user_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_user_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_exam_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_exam_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExamID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_exam_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_attempt_no(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_attempt_no(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_attempt_no(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_attempt_status(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_attempt_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_attempt_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_attempt_start_time(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_attempt_start_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_attempt_start_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_attempt_duration(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_attempt_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_attempt_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamAttempts_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamAttempts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamAttempts_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamAttempts_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamAttempts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_user_ep_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_user_ep_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_user_ep_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_user_ea_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_user_ea_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_user_ea_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_user_cp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_user_cp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_user_cp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_sr_no(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_sr_no(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SrNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_sr_no(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_question_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_question_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_question_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_question_type(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_question_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_question_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_answer(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_answer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_q_attempt_status(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_q_attempt_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QAttemptStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_q_attempt_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_total_time_spent(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_total_time_spent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalTimeSpent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_total_time_spent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_correct_answer(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_correct_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_correct_answer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_section_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_section_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SectionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_section_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamProgress_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamProgress_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamProgress_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_user_er_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_user_er_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_user_er_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_user_ea_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_user_ea_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_user_ea_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_user_score(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_user_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_user_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_correct_answers(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_correct_answers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectAnswers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_correct_answers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_wrong_answers(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_wrong_answers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrongAnswers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_wrong_answers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_result_status(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_result_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_result_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResult_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResult_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResult_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResultInfo_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResultInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResultInfo_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResultInfo_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResultInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResultInfo_user_ea_id(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResultInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResultInfo_user_ea_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResultInfo_user_ea_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResultInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserExamResultInfo_results(ctx context.Context, field graphql.CollectedField, obj *model.UserExamResultInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserExamResultInfo_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserExamResult)
	fc.Result = res
	return ec.marshalOUserExamResult2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserExamResultInfo_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserExamResultInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user_er_id":
				return ec.fieldContext_UserExamResult_user_er_id(ctx, field)
			case "user_id":
				return ec.fieldContext_UserExamResult_user_id(ctx, field)
			case "user_ea_id":
				return ec.fieldContext_UserExamResult_user_ea_id(ctx, field)
			case "user_score":
				return ec.fieldContext_UserExamResult_user_score(ctx, field)
			case "correct_answers":
				return ec.fieldContext_UserExamResult_correct_answers(ctx, field)
			case "wrong_answers":
				return ec.fieldContext_UserExamResult_wrong_answers(ctx, field)
			case "result_status":
				return ec.fieldContext_UserExamResult_result_status(ctx, field)
			case "created_by":
				return ec.fieldContext_UserExamResult_created_by(ctx, field)
			case "updated_by":
				return ec.fieldContext_UserExamResult_updated_by(ctx, field)
			case "created_at":
				return ec.fieldContext_UserExamResult_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_UserExamResult_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserExamResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_user_language_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_user_language_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLanguageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_user_language_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_language(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_is_base_language(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_is_base_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBaseLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_is_base_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLanguageMap_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserLanguageMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLanguageMap_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLanguageMap_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLanguageMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_status(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserLspMap_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserLspMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserLspMap_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserLspMap_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserLspMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_user_notes_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_user_notes_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserNotesID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_user_notes_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_module_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_module_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_module_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_topic_id(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_sequence(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_sequence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_sequence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_status(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_details(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotes_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserNotes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotes_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotes_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_user_organization_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_user_organization_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_user_organization_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_organization_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_organization_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_organization_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_organization_role(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_organization_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_organization_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_employee_id(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_employee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployeeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_employee_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserOrganizationMap_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserOrganizationMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserOrganizationMap_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserOrganizationMap_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserOrganizationMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_user_preference_id(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_user_preference_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserPreferenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_user_preference_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_sub_category(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_sub_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_sub_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_is_base(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_is_base(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_is_base(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreference_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserPreference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPreference_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPreference_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_user_qa_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_user_qa_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserQaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_user_qa_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_user_cp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_user_cp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCpID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_user_cp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_user_course_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_user_course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_user_course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_quiz_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_quiz_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_quiz_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_quiz_attempt(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_quiz_attempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizAttempt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_quiz_attempt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_topic_id(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_topic_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_topic_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_result(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserQuizAttempt_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserQuizAttempt) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserQuizAttempt_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserQuizAttempt_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserQuizAttempt",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_user_role_id(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_user_role_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserRoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_user_role_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_user_id(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_user_lsp_id(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_user_lsp_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLspID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_user_lsp_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_role(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_is_active(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_is_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_is_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_created_by(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_created_at(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.UserRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserRole_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserRole_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_vendorId(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_vendorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_vendorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_type(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_level(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_level(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_level(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_name(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_description(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_photo_url(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_photo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_photo_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_address(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_users(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_website(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_website(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_facebook_url(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_facebook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacebookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_facebook_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_instagram_url(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_instagram_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstagramURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_instagram_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_twitter_url(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_twitter_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitterURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_twitter_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_linkedin_url(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_linkedin_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedinURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_linkedin_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_created_at(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_created_by(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_updated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_updated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vendor_status(ctx context.Context, field graphql.CollectedField, obj *model.Vendor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Vendor_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Vendor_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vendor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCohortMainInput(ctx context.Context, obj interface{}) (model.CohortMainInput, error) {
	var it model.CohortMainInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cohort_id", "name", "description", "lsp_id", "code", "status", "type", "is_active", "created_by", "updated_by", "size", "image", "imageUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cohort_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cohort_id"))
			it.CohortID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageUrl"))
			it.ImageURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCourseMapFilters(ctx context.Context, obj interface{}) (model.CourseMapFilters, error) {
	var it model.CourseMapFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lsp_id", "is_mandatory", "status", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_mandatory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_mandatory"))
			it.IsMandatory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExperienceInput(ctx context.Context, obj interface{}) (model.ExperienceInput, error) {
	var it model.ExperienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vendor_id", "pf_id", "title", "company_name", "employement_type", "location", "location_type", "start_date", "end_date", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vendor_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
			it.VendorID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pf_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pf_id"))
			it.PfID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company_name"))
			it.CompanyName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employement_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employement_type"))
			it.EmployementType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_type"))
			it.LocationType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLearningSpaceInput(ctx context.Context, obj interface{}) (model.LearningSpaceInput, error) {
	var it model.LearningSpaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lsp_id", "type", "org_id", "ou_id", "name", "logo_url", "logo", "profile_url", "profile", "no_users", "owners", "is_default", "status", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ou_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ou_id"))
			it.OuID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo_url"))
			it.LogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "profile_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profile_url"))
			it.ProfileURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profile"))
			it.Profile, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "no_users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("no_users"))
			it.NoUsers, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "owners":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owners"))
			it.Owners, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_default":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_default"))
			it.IsDefault, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationInput(ctx context.Context, obj interface{}) (model.OrganizationInput, error) {
	var it model.OrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"org_id", "name", "logo_url", "industry", "type", "subdomain", "employee_count", "website", "linkedin_url", "facebook_url", "twitter_url", "status", "logo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo_url"))
			it.LogoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			it.Industry, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subdomain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subdomain"))
			it.Subdomain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employee_count"))
			it.EmployeeCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkedin_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkedin_url"))
			it.LinkedinURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facebook_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facebook_url"))
			it.FacebookURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter_url"))
			it.TwitterURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationUnitInput(ctx context.Context, obj interface{}) (model.OrganizationUnitInput, error) {
	var it model.OrganizationUnitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ou_id", "org_id", "emp_count", "address", "city", "state", "country", "postal_code", "status", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ou_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ou_id"))
			it.OuID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "org_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org_id"))
			it.OrgID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "emp_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emp_count"))
			it.EmpCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postal_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postal_code"))
			it.PostalCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSMEInput(ctx context.Context, obj interface{}) (model.SMEInput, error) {
	var it model.SMEInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "is_applicable", "expertise", "languages", "output_deliveries", "sample_files", "profiles", "Status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_applicable":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_applicable"))
			it.IsApplicable, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "expertise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expertise"))
			it.Expertise, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "languages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			it.Languages, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "output_deliveries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("output_deliveries"))
			it.OutputDeliveries, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sample_files":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sample_files"))
			it.SampleFiles, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profiles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profiles"))
			it.Profiles, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSampleFile(ctx context.Context, obj interface{}) (model.SampleFile, error) {
	var it model.SampleFile
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"File", "Name", "Description", "Pricing", "FileType", "Status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "File":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("File"))
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Pricing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Pricing"))
			it.Pricing, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "FileType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FileType"))
			it.FileType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserBookmarkInput(ctx context.Context, obj interface{}) (model.UserBookmarkInput, error) {
	var it model.UserBookmarkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_bm_id", "user_id", "user_lsp_id", "user_course_id", "course_id", "module_id", "topic_id", "name", "time_stamp", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_bm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_bm_id"))
			it.UserBmID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
			it.UserCourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
			it.CourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "module_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("module_id"))
			it.ModuleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
			it.TopicID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_stamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_stamp"))
			it.TimeStamp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCohortInput(ctx context.Context, obj interface{}) (model.UserCohortInput, error) {
	var it model.UserCohortInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_cohort_id", "user_id", "user_lsp_id", "cohort_id", "added_by", "membership_status", "role", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_cohort_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_cohort_id"))
			it.UserCohortID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cohort_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cohort_id"))
			it.CohortID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "added_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("added_by"))
			it.AddedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "membership_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("membership_status"))
			it.MembershipStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCourseInput(ctx context.Context, obj interface{}) (model.UserCourseInput, error) {
	var it model.UserCourseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_course_id", "user_id", "lsp_id", "user_lsp_id", "course_id", "course_type", "added_by", "is_mandatory", "end_date", "course_status", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
			it.UserCourseID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
			it.CourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_type"))
			it.CourseType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "added_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("added_by"))
			it.AddedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_mandatory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_mandatory"))
			it.IsMandatory, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_status"))
			it.CourseStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCourseMapStatsInput(ctx context.Context, obj interface{}) (model.UserCourseMapStatsInput, error) {
	var it model.UserCourseMapStatsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lsp_id", "user_id", "course_type", "course_status", "is_mandatory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_type"))
			it.CourseType, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_status"))
			it.CourseStatus, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_mandatory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_mandatory"))
			it.IsMandatory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCourseProgressInput(ctx context.Context, obj interface{}) (model.UserCourseProgressInput, error) {
	var it model.UserCourseProgressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_cp_id", "user_id", "user_course_id", "topic_id", "topic_type", "status", "video_progress", "time_stamp", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_cp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_cp_id"))
			it.UserCpID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
			it.UserCourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
			it.TopicID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_type"))
			it.TopicType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "video_progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("video_progress"))
			it.VideoProgress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "time_stamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_stamp"))
			it.TimeStamp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserExamAttemptsInput(ctx context.Context, obj interface{}) (model.UserExamAttemptsInput, error) {
	var it model.UserExamAttemptsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_ea_id", "user_id", "user_lsp_id", "user_cp_id", "user_course_id", "exam_id", "attempt_no", "attempt_status", "attempt_start_time", "attempt_duration", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_ea_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_id"))
			it.UserEaID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_cp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_cp_id"))
			it.UserCpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
			it.UserCourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "exam_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exam_id"))
			it.ExamID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attempt_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attempt_no"))
			it.AttemptNo, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "attempt_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attempt_status"))
			it.AttemptStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attempt_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attempt_start_time"))
			it.AttemptStartTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attempt_duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attempt_duration"))
			it.AttemptDuration, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserExamProgressInput(ctx context.Context, obj interface{}) (model.UserExamProgressInput, error) {
	var it model.UserExamProgressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_ep_id", "user_id", "user_ea_id", "user_lsp_id", "user_cp_id", "sr_no", "question_id", "question_type", "answer", "q_attempt_status", "total_time_spent", "correct_answer", "section_id", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_ep_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ep_id"))
			it.UserEpID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ea_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_id"))
			it.UserEaID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_cp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_cp_id"))
			it.UserCpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sr_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sr_no"))
			it.SrNo, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "question_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("question_id"))
			it.QuestionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "question_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("question_type"))
			it.QuestionType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "q_attempt_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q_attempt_status"))
			it.QAttemptStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_time_spent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_time_spent"))
			it.TotalTimeSpent, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_answer"))
			it.CorrectAnswer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "section_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section_id"))
			it.SectionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserExamResultDetails(ctx context.Context, obj interface{}) (model.UserExamResultDetails, error) {
	var it model.UserExamResultDetails
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "user_ea_id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ea_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_id"))
			it.UserEaID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserExamResultInput(ctx context.Context, obj interface{}) (model.UserExamResultInput, error) {
	var it model.UserExamResultInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_er_id", "user_id", "user_ea_id", "user_score", "correct_answers", "wrong_answers", "result_status", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_er_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_er_id"))
			it.UserErID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_ea_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_ea_id"))
			it.UserEaID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_score"))
			it.UserScore, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "correct_answers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correct_answers"))
			it.CorrectAnswers, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "wrong_answers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wrong_answers"))
			it.WrongAnswers, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "result_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result_status"))
			it.ResultStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilters(ctx context.Context, obj interface{}) (model.UserFilters, error) {
	var it model.UserFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "nameSearch", "role", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nameSearch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameSearch"))
			it.NameSearch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (model.UserInput, error) {
	var it model.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "first_name", "last_name", "status", "role", "is_verified", "is_active", "gender", "created_by", "updated_by", "email", "phone", "Photo", "photo_url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_verified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_verified"))
			it.IsVerified, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Photo"))
			it.Photo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_url"))
			it.PhotoURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLanguageMapInput(ctx context.Context, obj interface{}) (model.UserLanguageMapInput, error) {
	var it model.UserLanguageMapInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "user_lsp_id", "language", "is_base_language", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			it.Language, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_base_language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_base_language"))
			it.IsBaseLanguage, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserLspMapInput(ctx context.Context, obj interface{}) (model.UserLspMapInput, error) {
	var it model.UserLspMapInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_lsp_id", "user_id", "lsp_id", "status", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserNotesInput(ctx context.Context, obj interface{}) (model.UserNotesInput, error) {
	var it model.UserNotesInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_notes_id", "user_id", "user_lsp_id", "course_id", "module_id", "topic_id", "sequence", "status", "details", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_notes_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_notes_id"))
			it.UserNotesID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("course_id"))
			it.CourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "module_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("module_id"))
			it.ModuleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
			it.TopicID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sequence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sequence"))
			it.Sequence, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrganizationMapInput(ctx context.Context, obj interface{}) (model.UserOrganizationMapInput, error) {
	var it model.UserOrganizationMapInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_organization_id", "user_id", "user_lsp_id", "organization_id", "organization_role", "is_active", "employee_id", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_organization_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_organization_id"))
			it.UserOrganizationID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_id"))
			it.OrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_role"))
			it.OrganizationRole, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "employee_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employee_id"))
			it.EmployeeID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserPreferenceInput(ctx context.Context, obj interface{}) (model.UserPreferenceInput, error) {
	var it model.UserPreferenceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_preference_id", "user_id", "user_lsp_id", "sub_category", "is_base", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_preference_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_preference_id"))
			it.UserPreferenceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_category"))
			it.SubCategory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_base":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_base"))
			it.IsBase, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserQuizAttemptInput(ctx context.Context, obj interface{}) (model.UserQuizAttemptInput, error) {
	var it model.UserQuizAttemptInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_qa_id", "user_id", "user_cp_id", "user_course_id", "quiz_id", "quiz_attempt", "topic_id", "result", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_qa_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_qa_id"))
			it.UserQaID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_cp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_cp_id"))
			it.UserCpID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_course_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_course_id"))
			it.UserCourseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "quiz_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quiz_id"))
			it.QuizID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "quiz_attempt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quiz_attempt"))
			it.QuizAttempt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "topic_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topic_id"))
			it.TopicID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserRoleInput(ctx context.Context, obj interface{}) (model.UserRoleInput, error) {
	var it model.UserRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_role_id", "user_id", "user_lsp_id", "role", "is_active", "created_by", "updated_by"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_role_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_role_id"))
			it.UserRoleID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_lsp_id"))
			it.UserLspID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_active"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVendorInput(ctx context.Context, obj interface{}) (model.VendorInput, error) {
	var it model.VendorInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lsp_id", "name", "level", "vendor_id", "type", "photo", "address", "website", "facebook_url", "instagram_url", "twitter_url", "linkedin_url", "users", "description", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lsp_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lsp_id"))
			it.LspID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			it.Level, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vendor_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
			it.VendorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo"))
			it.Photo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facebook_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facebook_url"))
			it.FacebookURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram_url"))
			it.InstagramURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter_url"))
			it.TwitterURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkedin_url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkedin_url"))
			it.LinkedinURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			it.Users, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVendorProfile(ctx context.Context, obj interface{}) (model.VendorProfile, error) {
	var it model.VendorProfile
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vendor_id", "first_name", "last_name", "email", "phone", "photo", "description", "languages", "SME_expertise", "Classroom_expertise", "experience", "is_speaker", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vendor_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendor_id"))
			it.VendorID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_name"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "last_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last_name"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo"))
			it.Photo, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "languages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			it.Languages, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "SME_expertise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SME_expertise"))
			it.SmeExpertise, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Classroom_expertise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Classroom_expertise"))
			it.ClassroomExpertise, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("experience"))
			it.Experience, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speaker":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speaker"))
			it.IsSpeaker, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var cohortMainImplementors = []string{"CohortMain"}

func (ec *executionContext) _CohortMain(ctx context.Context, sel ast.SelectionSet, obj *model.CohortMain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cohortMainImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CohortMain")
		case "cohort_id":

			out.Values[i] = ec._CohortMain_cohort_id(ctx, field, obj)

		case "name":

			out.Values[i] = ec._CohortMain_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._CohortMain_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lsp_id":

			out.Values[i] = ec._CohortMain_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":

			out.Values[i] = ec._CohortMain_code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._CohortMain_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._CohortMain_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._CohortMain_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._CohortMain_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._CohortMain_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._CohortMain_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._CohortMain_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":

			out.Values[i] = ec._CohortMain_size(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageUrl":

			out.Values[i] = ec._CohortMain_imageUrl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var countImplementors = []string{"Count"}

func (ec *executionContext) _Count(ctx context.Context, sel ast.SelectionSet, obj *model.Count) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Count")
		case "name":

			out.Values[i] = ec._Count_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._Count_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var courseConsumptionStatsImplementors = []string{"CourseConsumptionStats"}

func (ec *executionContext) _CourseConsumptionStats(ctx context.Context, sel ast.SelectionSet, obj *model.CourseConsumptionStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, courseConsumptionStatsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CourseConsumptionStats")
		case "ID":

			out.Values[i] = ec._CourseConsumptionStats_ID(ctx, field, obj)

		case "LspId":

			out.Values[i] = ec._CourseConsumptionStats_LspId(ctx, field, obj)

		case "CourseId":

			out.Values[i] = ec._CourseConsumptionStats_CourseId(ctx, field, obj)

		case "Category":

			out.Values[i] = ec._CourseConsumptionStats_Category(ctx, field, obj)

		case "SubCategory":

			out.Values[i] = ec._CourseConsumptionStats_SubCategory(ctx, field, obj)

		case "Owner":

			out.Values[i] = ec._CourseConsumptionStats_Owner(ctx, field, obj)

		case "Duration":

			out.Values[i] = ec._CourseConsumptionStats_Duration(ctx, field, obj)

		case "TotalLearners":

			out.Values[i] = ec._CourseConsumptionStats_TotalLearners(ctx, field, obj)

		case "ActiveLearners":

			out.Values[i] = ec._CourseConsumptionStats_ActiveLearners(ctx, field, obj)

		case "CompletedLearners":

			out.Values[i] = ec._CourseConsumptionStats_CompletedLearners(ctx, field, obj)

		case "ExpectedCompletionTime":

			out.Values[i] = ec._CourseConsumptionStats_ExpectedCompletionTime(ctx, field, obj)

		case "AverageCompletionTime":

			out.Values[i] = ec._CourseConsumptionStats_AverageCompletionTime(ctx, field, obj)

		case "AverageComplianceScore":

			out.Values[i] = ec._CourseConsumptionStats_AverageComplianceScore(ctx, field, obj)

		case "CreatedAt":

			out.Values[i] = ec._CourseConsumptionStats_CreatedAt(ctx, field, obj)

		case "UpdatedAt":

			out.Values[i] = ec._CourseConsumptionStats_UpdatedAt(ctx, field, obj)

		case "CreatedBy":

			out.Values[i] = ec._CourseConsumptionStats_CreatedBy(ctx, field, obj)

		case "UpdatedBy":

			out.Values[i] = ec._CourseConsumptionStats_UpdatedBy(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var courseViewsImplementors = []string{"CourseViews"}

func (ec *executionContext) _CourseViews(ctx context.Context, sel ast.SelectionSet, obj *model.CourseViews) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, courseViewsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CourseViews")
		case "seconds":

			out.Values[i] = ec._CourseViews_seconds(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._CourseViews_created_at(ctx, field, obj)

		case "lsp_id":

			out.Values[i] = ec._CourseViews_lsp_id(ctx, field, obj)

		case "user_ids":

			out.Values[i] = ec._CourseViews_user_ids(ctx, field, obj)

		case "date_string":

			out.Values[i] = ec._CourseViews_date_string(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var experienceVendorImplementors = []string{"ExperienceVendor"}

func (ec *executionContext) _ExperienceVendor(ctx context.Context, sel ast.SelectionSet, obj *model.ExperienceVendor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, experienceVendorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExperienceVendor")
		case "ExpId":

			out.Values[i] = ec._ExperienceVendor_ExpId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "VendorId":

			out.Values[i] = ec._ExperienceVendor_VendorId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PfId":

			out.Values[i] = ec._ExperienceVendor_PfId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "StartDate":

			out.Values[i] = ec._ExperienceVendor_StartDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "EndDate":

			out.Values[i] = ec._ExperienceVendor_EndDate(ctx, field, obj)

		case "Title":

			out.Values[i] = ec._ExperienceVendor_Title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Location":

			out.Values[i] = ec._ExperienceVendor_Location(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LocationType":

			out.Values[i] = ec._ExperienceVendor_LocationType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "EmployementType":

			out.Values[i] = ec._ExperienceVendor_EmployementType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CompanyName":

			out.Values[i] = ec._ExperienceVendor_CompanyName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreatedAt":

			out.Values[i] = ec._ExperienceVendor_CreatedAt(ctx, field, obj)

		case "CreatedBy":

			out.Values[i] = ec._ExperienceVendor_CreatedBy(ctx, field, obj)

		case "UpdatedAt":

			out.Values[i] = ec._ExperienceVendor_UpdatedAt(ctx, field, obj)

		case "UpdatedBy":

			out.Values[i] = ec._ExperienceVendor_UpdatedBy(ctx, field, obj)

		case "Status":

			out.Values[i] = ec._ExperienceVendor_Status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var inviteResponseImplementors = []string{"InviteResponse"}

func (ec *executionContext) _InviteResponse(ctx context.Context, sel ast.SelectionSet, obj *model.InviteResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteResponse")
		case "email":

			out.Values[i] = ec._InviteResponse_email(ctx, field, obj)

		case "message":

			out.Values[i] = ec._InviteResponse_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var learningSpaceImplementors = []string{"LearningSpace"}

func (ec *executionContext) _LearningSpace(ctx context.Context, sel ast.SelectionSet, obj *model.LearningSpace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, learningSpaceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LearningSpace")
		case "lsp_id":

			out.Values[i] = ec._LearningSpace_lsp_id(ctx, field, obj)

		case "org_id":

			out.Values[i] = ec._LearningSpace_org_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ou_id":

			out.Values[i] = ec._LearningSpace_ou_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._LearningSpace_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo_url":

			out.Values[i] = ec._LearningSpace_logo_url(ctx, field, obj)

		case "profile_url":

			out.Values[i] = ec._LearningSpace_profile_url(ctx, field, obj)

		case "no_users":

			out.Values[i] = ec._LearningSpace_no_users(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "owners":

			out.Values[i] = ec._LearningSpace_owners(ctx, field, obj)

		case "is_default":

			out.Values[i] = ec._LearningSpace_is_default(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._LearningSpace_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._LearningSpace_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._LearningSpace_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._LearningSpace_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._LearningSpace_updated_by(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "registerUsers":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerUsers(ctx, field)
			})

		case "inviteUsers":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteUsers(ctx, field)
			})

		case "inviteUsersWithRole":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteUsersWithRole(ctx, field)
			})

		case "updateUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})

		case "login":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})

		case "addUserLspMap":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserLspMap(ctx, field)
			})

		case "updateUserLspMap":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserLspMap(ctx, field)
			})

		case "addUserOrganizationMap":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserOrganizationMap(ctx, field)
			})

		case "updateUserOrganizationMap":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserOrganizationMap(ctx, field)
			})

		case "addUserLanguageMap":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserLanguageMap(ctx, field)
			})

		case "addUserPreference":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserPreference(ctx, field)
			})

		case "updateUserPreference":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPreference(ctx, field)
			})

		case "addUserRoles":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserRoles(ctx, field)
			})

		case "updateUserRole":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserRole(ctx, field)
			})

		case "addUserCohort":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserCohort(ctx, field)
			})

		case "updateUserCohort":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserCohort(ctx, field)
			})

		case "addUserCourse":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserCourse(ctx, field)
			})

		case "updateUserCourse":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserCourse(ctx, field)
			})

		case "addUserCourseProgress":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserCourseProgress(ctx, field)
			})

		case "updateUserCourseProgress":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserCourseProgress(ctx, field)
			})

		case "addUserQuizAttempt":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserQuizAttempt(ctx, field)
			})

		case "updateUserQuizAttempt":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserQuizAttempt(ctx, field)
			})

		case "addUserBookmark":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserBookmark(ctx, field)
			})

		case "updateUserBookmark":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserBookmark(ctx, field)
			})

		case "addUserNotes":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserNotes(ctx, field)
			})

		case "updateUserNotes":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserNotes(ctx, field)
			})

		case "addUserExamAttempts":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserExamAttempts(ctx, field)
			})

		case "updateUserExamAttempts":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserExamAttempts(ctx, field)
			})

		case "addUserExamProgress":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserExamProgress(ctx, field)
			})

		case "updateUserExamProgress":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserExamProgress(ctx, field)
			})

		case "addUserExamResult":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addUserExamResult(ctx, field)
			})

		case "updateUserExamResult":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserExamResult(ctx, field)
			})

		case "addCohortMain":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addCohortMain(ctx, field)
			})

		case "updateCohortMain":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCohortMain(ctx, field)
			})

		case "addOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addOrganization(ctx, field)
			})

		case "updateOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrganization(ctx, field)
			})

		case "addOrganizationUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addOrganizationUnit(ctx, field)
			})

		case "updateOrganizationUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrganizationUnit(ctx, field)
			})

		case "addLearningSpace":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addLearningSpace(ctx, field)
			})

		case "updateLearningSpace":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLearningSpace(ctx, field)
			})

		case "deleteCohortImage":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCohortImage(ctx, field)
			})

		case "addVendor":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addVendor(ctx, field)
			})

		case "updateVendor":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVendor(ctx, field)
			})

		case "createProfileVendor":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProfileVendor(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createExperienceVendor":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createExperienceVendor(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadSampleFile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadSampleFile(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *model.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "org_id":

			out.Values[i] = ec._Organization_org_id(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Organization_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo_url":

			out.Values[i] = ec._Organization_logo_url(ctx, field, obj)

		case "industry":

			out.Values[i] = ec._Organization_industry(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Organization_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subdomain":

			out.Values[i] = ec._Organization_subdomain(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "employee_count":

			out.Values[i] = ec._Organization_employee_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "website":

			out.Values[i] = ec._Organization_website(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkedin_url":

			out.Values[i] = ec._Organization_linkedin_url(ctx, field, obj)

		case "facebook_url":

			out.Values[i] = ec._Organization_facebook_url(ctx, field, obj)

		case "twitter_url":

			out.Values[i] = ec._Organization_twitter_url(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Organization_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._Organization_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._Organization_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._Organization_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._Organization_updated_by(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationUnitImplementors = []string{"OrganizationUnit"}

func (ec *executionContext) _OrganizationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationUnitImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationUnit")
		case "ou_id":

			out.Values[i] = ec._OrganizationUnit_ou_id(ctx, field, obj)

		case "org_id":

			out.Values[i] = ec._OrganizationUnit_org_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "emp_count":

			out.Values[i] = ec._OrganizationUnit_emp_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":

			out.Values[i] = ec._OrganizationUnit_address(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":

			out.Values[i] = ec._OrganizationUnit_city(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":

			out.Values[i] = ec._OrganizationUnit_state(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":

			out.Values[i] = ec._OrganizationUnit_country(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postal_code":

			out.Values[i] = ec._OrganizationUnit_postal_code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._OrganizationUnit_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":

			out.Values[i] = ec._OrganizationUnit_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._OrganizationUnit_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._OrganizationUnit_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._OrganizationUnit_updated_by(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedBookmarksImplementors = []string{"PaginatedBookmarks"}

func (ec *executionContext) _PaginatedBookmarks(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedBookmarks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedBookmarksImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedBookmarks")
		case "bookmarks":

			out.Values[i] = ec._PaginatedBookmarks_bookmarks(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedBookmarks_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedBookmarks_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedBookmarks_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedCCStatsImplementors = []string{"PaginatedCCStats"}

func (ec *executionContext) _PaginatedCCStats(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedCCStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedCCStatsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedCCStats")
		case "stats":

			out.Values[i] = ec._PaginatedCCStats_stats(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedCCStats_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedCCStats_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedCCStats_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedCohortsImplementors = []string{"PaginatedCohorts"}

func (ec *executionContext) _PaginatedCohorts(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedCohorts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedCohortsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedCohorts")
		case "cohorts":

			out.Values[i] = ec._PaginatedCohorts_cohorts(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedCohorts_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedCohorts_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedCohorts_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedCohortsMainImplementors = []string{"PaginatedCohortsMain"}

func (ec *executionContext) _PaginatedCohortsMain(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedCohortsMain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedCohortsMainImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedCohortsMain")
		case "cohorts":

			out.Values[i] = ec._PaginatedCohortsMain_cohorts(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedCohortsMain_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedCohortsMain_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedCohortsMain_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedCourseMapsImplementors = []string{"PaginatedCourseMaps"}

func (ec *executionContext) _PaginatedCourseMaps(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedCourseMaps) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedCourseMapsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedCourseMaps")
		case "user_courses":

			out.Values[i] = ec._PaginatedCourseMaps_user_courses(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedCourseMaps_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedCourseMaps_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedCourseMaps_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedNotesImplementors = []string{"PaginatedNotes"}

func (ec *executionContext) _PaginatedNotes(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedNotes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedNotesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedNotes")
		case "notes":

			out.Values[i] = ec._PaginatedNotes_notes(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedNotes_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedNotes_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedNotes_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedUserLspMapsImplementors = []string{"PaginatedUserLspMaps"}

func (ec *executionContext) _PaginatedUserLspMaps(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedUserLspMaps) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedUserLspMapsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedUserLspMaps")
		case "user_lsp_maps":

			out.Values[i] = ec._PaginatedUserLspMaps_user_lsp_maps(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedUserLspMaps_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedUserLspMaps_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedUserLspMaps_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedUsersImplementors = []string{"PaginatedUsers"}

func (ec *executionContext) _PaginatedUsers(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedUsers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedUsersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedUsers")
		case "users":

			out.Values[i] = ec._PaginatedUsers_users(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedUsers_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedUsers_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedUsers_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginatedVendorsImplementors = []string{"PaginatedVendors"}

func (ec *executionContext) _PaginatedVendors(ctx context.Context, sel ast.SelectionSet, obj *model.PaginatedVendors) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginatedVendorsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaginatedVendors")
		case "vendors":

			out.Values[i] = ec._PaginatedVendors_vendors(ctx, field, obj)

		case "pageCursor":

			out.Values[i] = ec._PaginatedVendors_pageCursor(ctx, field, obj)

		case "direction":

			out.Values[i] = ec._PaginatedVendors_direction(ctx, field, obj)

		case "pageSize":

			out.Values[i] = ec._PaginatedVendors_pageSize(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "logout":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_logout(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserLspMapsByLspId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserLspMapsByLspId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUsersForAdmin":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUsersForAdmin(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserOrganizations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserOrganizations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserOrgDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserOrgDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserPreferences":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserPreferences(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserPreferenceForLsp":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserPreferenceForLsp(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserLsps":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserLsps(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserLspByLspId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserLspByLspId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserCourseMaps":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCourseMaps(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserCourseMapStats":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCourseMapStats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserCourseMapByCourseID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCourseMapByCourseID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserCourseProgressByMapId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCourseProgressByMapId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserCourseProgressByTopicId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCourseProgressByTopicId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserNotes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserNotes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserBookmarks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserBookmarks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserExamAttempts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserExamAttempts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserExamResults":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserExamResults(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserExamProgress":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserExamProgress(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getLatestCohorts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLatestCohorts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCohortUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCohortUsers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserQuizAttempts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserQuizAttempts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCohortDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCohortDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCohortMains":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCohortMains(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getOrganizations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrganizations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getOrganizationsByName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrganizationsByName(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getOrganizationUnits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrganizationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUnitsByOrgId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUnitsByOrgId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getLearningSpacesByOrgId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLearningSpacesByOrgId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getLearningSpacesByOuId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLearningSpacesByOuId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getLearningSpaceDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLearningSpaceDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserLspRoles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserLspRoles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCourseConsumptionStats":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCourseConsumptionStats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCourseViews":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCourseViews(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getVendorExperience":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVendorExperience(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getVendors":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVendors(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPaginatedVendors":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPaginatedVendors(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getVendorAdmins":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVendorAdmins(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getVendorDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVendorDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

		case "first_name":

			out.Values[i] = ec._User_first_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "last_name":

			out.Values[i] = ec._User_last_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._User_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._User_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_verified":

			out.Values[i] = ec._User_is_verified(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._User_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":

			out.Values[i] = ec._User_gender(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._User_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._User_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._User_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._User_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._User_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "photo_url":

			out.Values[i] = ec._User_photo_url(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userBookmarkImplementors = []string{"UserBookmark"}

func (ec *executionContext) _UserBookmark(ctx context.Context, sel ast.SelectionSet, obj *model.UserBookmark) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userBookmarkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserBookmark")
		case "user_bm_id":

			out.Values[i] = ec._UserBookmark_user_bm_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserBookmark_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserBookmark_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_course_id":

			out.Values[i] = ec._UserBookmark_user_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "course_id":

			out.Values[i] = ec._UserBookmark_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module_id":

			out.Values[i] = ec._UserBookmark_module_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic_id":

			out.Values[i] = ec._UserBookmark_topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._UserBookmark_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "time_stamp":

			out.Values[i] = ec._UserBookmark_time_stamp(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserBookmark_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserBookmark_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserBookmark_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserBookmark_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserBookmark_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCohortImplementors = []string{"UserCohort"}

func (ec *executionContext) _UserCohort(ctx context.Context, sel ast.SelectionSet, obj *model.UserCohort) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCohortImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCohort")
		case "user_cohort_id":

			out.Values[i] = ec._UserCohort_user_cohort_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserCohort_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserCohort_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cohort_id":

			out.Values[i] = ec._UserCohort_cohort_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "added_by":

			out.Values[i] = ec._UserCohort_added_by(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "membership_status":

			out.Values[i] = ec._UserCohort_membership_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._UserCohort_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserCohort_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserCohort_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserCohort_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserCohort_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCourseImplementors = []string{"UserCourse"}

func (ec *executionContext) _UserCourse(ctx context.Context, sel ast.SelectionSet, obj *model.UserCourse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCourseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCourse")
		case "user_course_id":

			out.Values[i] = ec._UserCourse_user_course_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserCourse_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lsp_id":

			out.Values[i] = ec._UserCourse_lsp_id(ctx, field, obj)

		case "user_lsp_id":

			out.Values[i] = ec._UserCourse_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "course_id":

			out.Values[i] = ec._UserCourse_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "course_type":

			out.Values[i] = ec._UserCourse_course_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "added_by":

			out.Values[i] = ec._UserCourse_added_by(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_mandatory":

			out.Values[i] = ec._UserCourse_is_mandatory(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_date":

			out.Values[i] = ec._UserCourse_end_date(ctx, field, obj)

		case "course_status":

			out.Values[i] = ec._UserCourse_course_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserCourse_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserCourse_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserCourse_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserCourse_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCourseMapStatsImplementors = []string{"UserCourseMapStats"}

func (ec *executionContext) _UserCourseMapStats(ctx context.Context, sel ast.SelectionSet, obj *model.UserCourseMapStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCourseMapStatsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCourseMapStats")
		case "lsp_id":

			out.Values[i] = ec._UserCourseMapStats_lsp_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserCourseMapStats_user_id(ctx, field, obj)

		case "type_stats":

			out.Values[i] = ec._UserCourseMapStats_type_stats(ctx, field, obj)

		case "status_stats":

			out.Values[i] = ec._UserCourseMapStats_status_stats(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCourseProgressImplementors = []string{"UserCourseProgress"}

func (ec *executionContext) _UserCourseProgress(ctx context.Context, sel ast.SelectionSet, obj *model.UserCourseProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCourseProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCourseProgress")
		case "user_cp_id":

			out.Values[i] = ec._UserCourseProgress_user_cp_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserCourseProgress_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_course_id":

			out.Values[i] = ec._UserCourseProgress_user_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic_id":

			out.Values[i] = ec._UserCourseProgress_topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic_type":

			out.Values[i] = ec._UserCourseProgress_topic_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._UserCourseProgress_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "video_progress":

			out.Values[i] = ec._UserCourseProgress_video_progress(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "time_stamp":

			out.Values[i] = ec._UserCourseProgress_time_stamp(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserCourseProgress_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserCourseProgress_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserCourseProgress_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserCourseProgress_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userExamAttemptsImplementors = []string{"UserExamAttempts"}

func (ec *executionContext) _UserExamAttempts(ctx context.Context, sel ast.SelectionSet, obj *model.UserExamAttempts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userExamAttemptsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserExamAttempts")
		case "user_ea_id":

			out.Values[i] = ec._UserExamAttempts_user_ea_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserExamAttempts_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserExamAttempts_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_cp_id":

			out.Values[i] = ec._UserExamAttempts_user_cp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_course_id":

			out.Values[i] = ec._UserExamAttempts_user_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exam_id":

			out.Values[i] = ec._UserExamAttempts_exam_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attempt_no":

			out.Values[i] = ec._UserExamAttempts_attempt_no(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attempt_status":

			out.Values[i] = ec._UserExamAttempts_attempt_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attempt_start_time":

			out.Values[i] = ec._UserExamAttempts_attempt_start_time(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attempt_duration":

			out.Values[i] = ec._UserExamAttempts_attempt_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserExamAttempts_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserExamAttempts_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserExamAttempts_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserExamAttempts_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userExamProgressImplementors = []string{"UserExamProgress"}

func (ec *executionContext) _UserExamProgress(ctx context.Context, sel ast.SelectionSet, obj *model.UserExamProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userExamProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserExamProgress")
		case "user_ep_id":

			out.Values[i] = ec._UserExamProgress_user_ep_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserExamProgress_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_ea_id":

			out.Values[i] = ec._UserExamProgress_user_ea_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserExamProgress_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_cp_id":

			out.Values[i] = ec._UserExamProgress_user_cp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sr_no":

			out.Values[i] = ec._UserExamProgress_sr_no(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "question_id":

			out.Values[i] = ec._UserExamProgress_question_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "question_type":

			out.Values[i] = ec._UserExamProgress_question_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "answer":

			out.Values[i] = ec._UserExamProgress_answer(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "q_attempt_status":

			out.Values[i] = ec._UserExamProgress_q_attempt_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_time_spent":

			out.Values[i] = ec._UserExamProgress_total_time_spent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "correct_answer":

			out.Values[i] = ec._UserExamProgress_correct_answer(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "section_id":

			out.Values[i] = ec._UserExamProgress_section_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserExamProgress_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserExamProgress_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserExamProgress_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserExamProgress_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userExamResultImplementors = []string{"UserExamResult"}

func (ec *executionContext) _UserExamResult(ctx context.Context, sel ast.SelectionSet, obj *model.UserExamResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userExamResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserExamResult")
		case "user_er_id":

			out.Values[i] = ec._UserExamResult_user_er_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserExamResult_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_ea_id":

			out.Values[i] = ec._UserExamResult_user_ea_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_score":

			out.Values[i] = ec._UserExamResult_user_score(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "correct_answers":

			out.Values[i] = ec._UserExamResult_correct_answers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wrong_answers":

			out.Values[i] = ec._UserExamResult_wrong_answers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "result_status":

			out.Values[i] = ec._UserExamResult_result_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserExamResult_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserExamResult_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserExamResult_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserExamResult_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userExamResultInfoImplementors = []string{"UserExamResultInfo"}

func (ec *executionContext) _UserExamResultInfo(ctx context.Context, sel ast.SelectionSet, obj *model.UserExamResultInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userExamResultInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserExamResultInfo")
		case "user_id":

			out.Values[i] = ec._UserExamResultInfo_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_ea_id":

			out.Values[i] = ec._UserExamResultInfo_user_ea_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._UserExamResultInfo_results(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLanguageMapImplementors = []string{"UserLanguageMap"}

func (ec *executionContext) _UserLanguageMap(ctx context.Context, sel ast.SelectionSet, obj *model.UserLanguageMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLanguageMapImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLanguageMap")
		case "user_language_id":

			out.Values[i] = ec._UserLanguageMap_user_language_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserLanguageMap_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserLanguageMap_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "language":

			out.Values[i] = ec._UserLanguageMap_language(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_base_language":

			out.Values[i] = ec._UserLanguageMap_is_base_language(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserLanguageMap_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserLanguageMap_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserLanguageMap_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserLanguageMap_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserLanguageMap_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLspMapImplementors = []string{"UserLspMap"}

func (ec *executionContext) _UserLspMap(ctx context.Context, sel ast.SelectionSet, obj *model.UserLspMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLspMapImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLspMap")
		case "user_lsp_id":

			out.Values[i] = ec._UserLspMap_user_lsp_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserLspMap_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lsp_id":

			out.Values[i] = ec._UserLspMap_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._UserLspMap_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserLspMap_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserLspMap_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserLspMap_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserLspMap_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userNotesImplementors = []string{"UserNotes"}

func (ec *executionContext) _UserNotes(ctx context.Context, sel ast.SelectionSet, obj *model.UserNotes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNotesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNotes")
		case "user_notes_id":

			out.Values[i] = ec._UserNotes_user_notes_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserNotes_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserNotes_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "course_id":

			out.Values[i] = ec._UserNotes_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "module_id":

			out.Values[i] = ec._UserNotes_module_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic_id":

			out.Values[i] = ec._UserNotes_topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequence":

			out.Values[i] = ec._UserNotes_sequence(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._UserNotes_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "details":

			out.Values[i] = ec._UserNotes_details(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserNotes_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserNotes_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserNotes_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserNotes_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserNotes_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userOrganizationMapImplementors = []string{"UserOrganizationMap"}

func (ec *executionContext) _UserOrganizationMap(ctx context.Context, sel ast.SelectionSet, obj *model.UserOrganizationMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userOrganizationMapImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserOrganizationMap")
		case "user_organization_id":

			out.Values[i] = ec._UserOrganizationMap_user_organization_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserOrganizationMap_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserOrganizationMap_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organization_id":

			out.Values[i] = ec._UserOrganizationMap_organization_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organization_role":

			out.Values[i] = ec._UserOrganizationMap_organization_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserOrganizationMap_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "employee_id":

			out.Values[i] = ec._UserOrganizationMap_employee_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserOrganizationMap_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserOrganizationMap_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserOrganizationMap_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserOrganizationMap_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPreferenceImplementors = []string{"UserPreference"}

func (ec *executionContext) _UserPreference(ctx context.Context, sel ast.SelectionSet, obj *model.UserPreference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPreferenceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPreference")
		case "user_preference_id":

			out.Values[i] = ec._UserPreference_user_preference_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserPreference_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserPreference_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sub_category":

			out.Values[i] = ec._UserPreference_sub_category(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_base":

			out.Values[i] = ec._UserPreference_is_base(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserPreference_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserPreference_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserPreference_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserPreference_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserPreference_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userQuizAttemptImplementors = []string{"UserQuizAttempt"}

func (ec *executionContext) _UserQuizAttempt(ctx context.Context, sel ast.SelectionSet, obj *model.UserQuizAttempt) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userQuizAttemptImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserQuizAttempt")
		case "user_qa_id":

			out.Values[i] = ec._UserQuizAttempt_user_qa_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserQuizAttempt_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_cp_id":

			out.Values[i] = ec._UserQuizAttempt_user_cp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_course_id":

			out.Values[i] = ec._UserQuizAttempt_user_course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quiz_id":

			out.Values[i] = ec._UserQuizAttempt_quiz_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quiz_attempt":

			out.Values[i] = ec._UserQuizAttempt_quiz_attempt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "topic_id":

			out.Values[i] = ec._UserQuizAttempt_topic_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "result":

			out.Values[i] = ec._UserQuizAttempt_result(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserQuizAttempt_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserQuizAttempt_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserQuizAttempt_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserQuizAttempt_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserQuizAttempt_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userRoleImplementors = []string{"UserRole"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *model.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "user_role_id":

			out.Values[i] = ec._UserRole_user_role_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._UserRole_user_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_lsp_id":

			out.Values[i] = ec._UserRole_user_lsp_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._UserRole_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_active":

			out.Values[i] = ec._UserRole_is_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":

			out.Values[i] = ec._UserRole_created_by(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._UserRole_updated_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._UserRole_created_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":

			out.Values[i] = ec._UserRole_updated_at(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vendorImplementors = []string{"Vendor"}

func (ec *executionContext) _Vendor(ctx context.Context, sel ast.SelectionSet, obj *model.Vendor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vendorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vendor")
		case "vendorId":

			out.Values[i] = ec._Vendor_vendorId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Vendor_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":

			out.Values[i] = ec._Vendor_level(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Vendor_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Vendor_description(ctx, field, obj)

		case "photo_url":

			out.Values[i] = ec._Vendor_photo_url(ctx, field, obj)

		case "address":

			out.Values[i] = ec._Vendor_address(ctx, field, obj)

		case "users":

			out.Values[i] = ec._Vendor_users(ctx, field, obj)

		case "website":

			out.Values[i] = ec._Vendor_website(ctx, field, obj)

		case "facebook_url":

			out.Values[i] = ec._Vendor_facebook_url(ctx, field, obj)

		case "instagram_url":

			out.Values[i] = ec._Vendor_instagram_url(ctx, field, obj)

		case "twitter_url":

			out.Values[i] = ec._Vendor_twitter_url(ctx, field, obj)

		case "linkedin_url":

			out.Values[i] = ec._Vendor_linkedin_url(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._Vendor_created_at(ctx, field, obj)

		case "created_by":

			out.Values[i] = ec._Vendor_created_by(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._Vendor_updated_at(ctx, field, obj)

		case "updated_by":

			out.Values[i] = ec._Vendor_updated_by(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Vendor_status(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCohortMainInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMainInput(ctx context.Context, v interface{}) (model.CohortMainInput, error) {
	res, err := ec.unmarshalInputCohortMainInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNExperienceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐExperienceInput(ctx context.Context, v interface{}) (model.ExperienceInput, error) {
	res, err := ec.unmarshalInputExperienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLearningSpaceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpaceInput(ctx context.Context, v interface{}) (model.LearningSpaceInput, error) {
	res, err := ec.unmarshalInputLearningSpaceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationInput(ctx context.Context, v interface{}) (model.OrganizationInput, error) {
	res, err := ec.unmarshalInputOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationUnitInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnitInput(ctx context.Context, v interface{}) (model.OrganizationUnitInput, error) {
	res, err := ec.unmarshalInputOrganizationUnitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUserBookmarkInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx context.Context, v interface{}) (model.UserBookmarkInput, error) {
	res, err := ec.unmarshalInputUserBookmarkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserBookmarkInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx context.Context, v interface{}) ([]*model.UserBookmarkInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserBookmarkInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserBookmarkInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserCohortInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx context.Context, v interface{}) (model.UserCohortInput, error) {
	res, err := ec.unmarshalInputUserCohortInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserCohortInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx context.Context, v interface{}) ([]*model.UserCohortInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserCohortInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserCohortInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserCourseInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx context.Context, v interface{}) (model.UserCourseInput, error) {
	res, err := ec.unmarshalInputUserCourseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserCourseInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx context.Context, v interface{}) ([]*model.UserCourseInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserCourseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserCourseInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserCourseMapStatsInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseMapStatsInput(ctx context.Context, v interface{}) (model.UserCourseMapStatsInput, error) {
	res, err := ec.unmarshalInputUserCourseMapStatsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserCourseProgressInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx context.Context, v interface{}) (model.UserCourseProgressInput, error) {
	res, err := ec.unmarshalInputUserCourseProgressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserCourseProgressInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx context.Context, v interface{}) ([]*model.UserCourseProgressInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserCourseProgressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserCourseProgressInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserExamAttemptsInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx context.Context, v interface{}) (model.UserExamAttemptsInput, error) {
	res, err := ec.unmarshalInputUserExamAttemptsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserExamAttemptsInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx context.Context, v interface{}) ([]*model.UserExamAttemptsInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserExamAttemptsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserExamAttemptsInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserExamProgressInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx context.Context, v interface{}) (model.UserExamProgressInput, error) {
	res, err := ec.unmarshalInputUserExamProgressInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserExamProgressInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx context.Context, v interface{}) ([]*model.UserExamProgressInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserExamProgressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserExamProgressInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserExamResultDetails2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultDetailsᚄ(ctx context.Context, v interface{}) ([]*model.UserExamResultDetails, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserExamResultDetails, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserExamResultDetails2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultDetails(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserExamResultDetails2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultDetails(ctx context.Context, v interface{}) (*model.UserExamResultDetails, error) {
	res, err := ec.unmarshalInputUserExamResultDetails(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserExamResultInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx context.Context, v interface{}) (model.UserExamResultInput, error) {
	res, err := ec.unmarshalInputUserExamResultInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserExamResultInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx context.Context, v interface{}) ([]*model.UserExamResultInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserExamResultInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserExamResultInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (model.UserInput, error) {
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) ([]*model.UserInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserLanguageMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMapInput(ctx context.Context, v interface{}) ([]*model.UserLanguageMapInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserLanguageMapInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserLanguageMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMapInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserLspMapInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx context.Context, v interface{}) (model.UserLspMapInput, error) {
	res, err := ec.unmarshalInputUserLspMapInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserLspMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx context.Context, v interface{}) ([]*model.UserLspMapInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserLspMapInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserLspMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserNotesInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx context.Context, v interface{}) (model.UserNotesInput, error) {
	res, err := ec.unmarshalInputUserNotesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserNotesInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx context.Context, v interface{}) ([]*model.UserNotesInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserNotesInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserNotesInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserOrganizationMapInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx context.Context, v interface{}) (model.UserOrganizationMapInput, error) {
	res, err := ec.unmarshalInputUserOrganizationMapInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserOrganizationMapInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx context.Context, v interface{}) ([]*model.UserOrganizationMapInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserOrganizationMapInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserOrganizationMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserPreferenceInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx context.Context, v interface{}) (model.UserPreferenceInput, error) {
	res, err := ec.unmarshalInputUserPreferenceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserPreferenceInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx context.Context, v interface{}) ([]*model.UserPreferenceInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserPreferenceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserPreferenceInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserQuizAttemptInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx context.Context, v interface{}) (model.UserQuizAttemptInput, error) {
	res, err := ec.unmarshalInputUserQuizAttemptInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserQuizAttemptInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx context.Context, v interface{}) ([]*model.UserQuizAttemptInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserQuizAttemptInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserQuizAttemptInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserRoleInput2githubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx context.Context, v interface{}) (model.UserRoleInput, error) {
	res, err := ec.unmarshalInputUserRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserRoleInput2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx context.Context, v interface{}) ([]*model.UserRoleInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UserRoleInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserRoleInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCohortMain2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx context.Context, sel ast.SelectionSet, v []*model.CohortMain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCohortMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCohortMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCohortMain(ctx context.Context, sel ast.SelectionSet, v *model.CohortMain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CohortMain(ctx, sel, v)
}

func (ec *executionContext) marshalOCount2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCount(ctx context.Context, sel ast.SelectionSet, v []*model.Count) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCount2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCount2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCount(ctx context.Context, sel ast.SelectionSet, v *model.Count) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Count(ctx, sel, v)
}

func (ec *executionContext) marshalOCourseConsumptionStats2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseConsumptionStats(ctx context.Context, sel ast.SelectionSet, v []*model.CourseConsumptionStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCourseConsumptionStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseConsumptionStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCourseConsumptionStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseConsumptionStats(ctx context.Context, sel ast.SelectionSet, v *model.CourseConsumptionStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CourseConsumptionStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCourseMapFilters2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseMapFilters(ctx context.Context, v interface{}) (*model.CourseMapFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCourseMapFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCourseViews2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseViews(ctx context.Context, sel ast.SelectionSet, v []*model.CourseViews) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCourseViews2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseViews(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCourseViews2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐCourseViews(ctx context.Context, sel ast.SelectionSet, v *model.CourseViews) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CourseViews(ctx, sel, v)
}

func (ec *executionContext) marshalOExperienceVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐExperienceVendor(ctx context.Context, sel ast.SelectionSet, v *model.ExperienceVendor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExperienceVendor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOInviteResponse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐInviteResponse(ctx context.Context, sel ast.SelectionSet, v []*model.InviteResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInviteResponse2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐInviteResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOInviteResponse2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐInviteResponse(ctx context.Context, sel ast.SelectionSet, v *model.InviteResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InviteResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOLearningSpace2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx context.Context, sel ast.SelectionSet, v []*model.LearningSpace) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLearningSpace2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLearningSpace2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐLearningSpace(ctx context.Context, sel ast.SelectionSet, v *model.LearningSpace) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LearningSpace(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganization2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v []*model.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganization2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOrganization2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *model.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationUnit2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizationUnit2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOrganizationUnit2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐOrganizationUnit(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedBookmarks2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedBookmarks(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedBookmarks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedBookmarks(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedCCStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCCStats(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedCCStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedCCStats(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedCohorts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCohorts(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedCohorts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedCohorts(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedCohortsMain2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCohortsMain(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedCohortsMain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedCohortsMain(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedCourseMaps2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedCourseMaps(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedCourseMaps) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedCourseMaps(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedNotes2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedNotes(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedNotes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedNotes(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedUserLspMaps2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedUserLspMaps(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedUserLspMaps) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedUserLspMaps(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedUsers2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedUsers(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedUsers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedUsers(ctx, sel, v)
}

func (ec *executionContext) marshalOPaginatedVendors2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐPaginatedVendors(ctx context.Context, sel ast.SelectionSet, v *model.PaginatedVendors) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaginatedVendors(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSampleFile2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐSampleFile(ctx context.Context, v interface{}) (*model.SampleFile, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSampleFile(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserBookmark2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx context.Context, sel ast.SelectionSet, v []*model.UserBookmark) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserBookmark2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserBookmark2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmark(ctx context.Context, sel ast.SelectionSet, v *model.UserBookmark) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserBookmark(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserBookmarkInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserBookmarkInput(ctx context.Context, v interface{}) (*model.UserBookmarkInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserBookmarkInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserCohort2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx context.Context, sel ast.SelectionSet, v []*model.UserCohort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserCohort2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserCohort2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohort(ctx context.Context, sel ast.SelectionSet, v *model.UserCohort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserCohort(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserCohortInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCohortInput(ctx context.Context, v interface{}) (*model.UserCohortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserCohortInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserCourse2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx context.Context, sel ast.SelectionSet, v []*model.UserCourse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserCourse2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserCourse2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourse(ctx context.Context, sel ast.SelectionSet, v *model.UserCourse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserCourse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserCourseInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseInput(ctx context.Context, v interface{}) (*model.UserCourseInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserCourseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserCourseMapStats2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseMapStats(ctx context.Context, sel ast.SelectionSet, v *model.UserCourseMapStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserCourseMapStats(ctx, sel, v)
}

func (ec *executionContext) marshalOUserCourseProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx context.Context, sel ast.SelectionSet, v []*model.UserCourseProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserCourseProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserCourseProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgress(ctx context.Context, sel ast.SelectionSet, v *model.UserCourseProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserCourseProgress(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserCourseProgressInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserCourseProgressInput(ctx context.Context, v interface{}) (*model.UserCourseProgressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserCourseProgressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserExamAttempts2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx context.Context, sel ast.SelectionSet, v []*model.UserExamAttempts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserExamAttempts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserExamAttempts2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttempts(ctx context.Context, sel ast.SelectionSet, v *model.UserExamAttempts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserExamAttempts(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserExamAttemptsInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamAttemptsInput(ctx context.Context, v interface{}) (*model.UserExamAttemptsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserExamAttemptsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserExamProgress2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx context.Context, sel ast.SelectionSet, v []*model.UserExamProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserExamProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserExamProgress2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgress(ctx context.Context, sel ast.SelectionSet, v *model.UserExamProgress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserExamProgress(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserExamProgressInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamProgressInput(ctx context.Context, v interface{}) (*model.UserExamProgressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserExamProgressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserExamResult2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx context.Context, sel ast.SelectionSet, v []*model.UserExamResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserExamResult2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserExamResult2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResult(ctx context.Context, sel ast.SelectionSet, v *model.UserExamResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserExamResult(ctx, sel, v)
}

func (ec *executionContext) marshalOUserExamResultInfo2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInfo(ctx context.Context, sel ast.SelectionSet, v []*model.UserExamResultInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserExamResultInfo2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserExamResultInfo2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInfo(ctx context.Context, sel ast.SelectionSet, v *model.UserExamResultInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserExamResultInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserExamResultInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserExamResultInput(ctx context.Context, v interface{}) (*model.UserExamResultInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserExamResultInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserFilters2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserFilters(ctx context.Context, v interface{}) (*model.UserFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (*model.UserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserLanguageMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMap(ctx context.Context, sel ast.SelectionSet, v []*model.UserLanguageMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserLanguageMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMap(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserLanguageMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMap(ctx context.Context, sel ast.SelectionSet, v *model.UserLanguageMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserLanguageMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserLanguageMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLanguageMapInput(ctx context.Context, v interface{}) (*model.UserLanguageMapInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLanguageMapInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserLspMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx context.Context, sel ast.SelectionSet, v []*model.UserLspMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserLspMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserLspMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMap(ctx context.Context, sel ast.SelectionSet, v *model.UserLspMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserLspMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserLspMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserLspMapInput(ctx context.Context, v interface{}) (*model.UserLspMapInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserLspMapInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserNotes2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx context.Context, sel ast.SelectionSet, v []*model.UserNotes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserNotes2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserNotes2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotes(ctx context.Context, sel ast.SelectionSet, v *model.UserNotes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserNotes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserNotesInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserNotesInput(ctx context.Context, v interface{}) (*model.UserNotesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserNotesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserOrganizationMap2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx context.Context, sel ast.SelectionSet, v []*model.UserOrganizationMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserOrganizationMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserOrganizationMap2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMap(ctx context.Context, sel ast.SelectionSet, v *model.UserOrganizationMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserOrganizationMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserOrganizationMapInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserOrganizationMapInput(ctx context.Context, v interface{}) (*model.UserOrganizationMapInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserOrganizationMapInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserPreference2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx context.Context, sel ast.SelectionSet, v []*model.UserPreference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserPreference2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserPreference2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreference(ctx context.Context, sel ast.SelectionSet, v *model.UserPreference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserPreference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserPreferenceInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserPreferenceInput(ctx context.Context, v interface{}) (*model.UserPreferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserPreferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserQuizAttempt2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx context.Context, sel ast.SelectionSet, v []*model.UserQuizAttempt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserQuizAttempt2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserQuizAttempt2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttempt(ctx context.Context, sel ast.SelectionSet, v *model.UserQuizAttempt) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserQuizAttempt(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserQuizAttemptInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserQuizAttemptInput(ctx context.Context, v interface{}) (*model.UserQuizAttemptInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserQuizAttemptInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRole2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx context.Context, sel ast.SelectionSet, v []*model.UserRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserRole2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUserRole2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *model.UserRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserRoleInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐUserRoleInput(ctx context.Context, v interface{}) (*model.UserRoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVendor2ᚕᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx context.Context, sel ast.SelectionSet, v []*model.Vendor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVendor2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendor(ctx context.Context, sel ast.SelectionSet, v *model.Vendor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vendor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVendorInput2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendorInput(ctx context.Context, v interface{}) (*model.VendorInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVendorInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVendorProfile2ᚖgithubᚗcomᚋzicopsᚋzicopsᚑuserᚑmanagerᚋgraphᚋmodelᚐVendorProfile(ctx context.Context, v interface{}) (*model.VendorProfile, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVendorProfile(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
